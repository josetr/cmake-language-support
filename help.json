{
  "Version": "3.22",
  "Variables": [
    {
      "Id": "CMAKE_AR",
      "Summary": "Name of archiving tool for static libraries."
    },
    {
      "Id": "CMAKE_ARGC",
      "Summary": "Number of command line arguments passed to CMake in script mode."
    },
    {
      "Id": "CMAKE_ARGV0",
      "Summary": "Command line argument passed to CMake in script mode."
    },
    {
      "Id": "CMAKE_BINARY_DIR",
      "Summary": "The path to the top level of the build tree."
    },
    {
      "Id": "CMAKE_BUILD_TOOL",
      "Summary": "This variable exists only for backwards compatibility."
    },
    {
      "Id": "CMAKE_CACHE_MAJOR_VERSION",
      "Summary": "Major version of CMake used to create the ``CMakeCache.txt`` file"
    },
    {
      "Id": "CMAKE_CACHE_MINOR_VERSION",
      "Summary": "Minor version of CMake used to create the ``CMakeCache.txt`` file"
    },
    {
      "Id": "CMAKE_CACHE_PATCH_VERSION",
      "Summary": "Patch version of CMake used to create the ``CMakeCache.txt`` file"
    },
    {
      "Id": "CMAKE_CACHEFILE_DIR",
      "Summary": "The directory with the ``CMakeCache.txt`` file."
    },
    {
      "Id": "CMAKE_CFG_INTDIR",
      "Summary": "Build-time reference to per-configuration output subdirectory."
    },
    {
      "Id": "CMAKE_COMMAND",
      "Summary": "The full path to the ``cmake(1)`` executable."
    },
    {
      "Id": "CMAKE_CPACK_COMMAND",
      "Summary": "Full path to ``cpack(1)`` command installed with CMake."
    },
    {
      "Id": "CMAKE_CROSSCOMPILING",
      "Summary": "Intended to indicate whether CMake is cross compiling, but note limitations discussed below."
    },
    {
      "Id": "CMAKE_CROSSCOMPILING_EMULATOR",
      "Summary": "This variable is only used when ``CMAKE_CROSSCOMPILING`` is on."
    },
    {
      "Id": "CMAKE_CTEST_COMMAND",
      "Summary": "Full path to ``ctest(1)`` command installed with CMake."
    },
    {
      "Id": "CMAKE_CURRENT_BINARY_DIR",
      "Summary": "The path to the binary directory currently being processed."
    },
    {
      "Id": "CMAKE_CURRENT_FUNCTION",
      "Summary": "When executing code inside a ``function()``, this variable contains the name of the current function."
    },
    {
      "Id": "CMAKE_CURRENT_FUNCTION_LIST_DIR",
      "Summary": "When executing code inside a ``function()``, this variable contains the full directory of the listfile that defined the current function."
    },
    {
      "Id": "CMAKE_CURRENT_FUNCTION_LIST_FILE",
      "Summary": "When executing code inside a ``function()``, this variable contains the full path to the listfile that defined the current function."
    },
    {
      "Id": "CMAKE_CURRENT_FUNCTION_LIST_LINE",
      "Summary": "When executing code inside a ``function()``, this variable contains the line number in the listfile where the current function was defined."
    },
    {
      "Id": "CMAKE_CURRENT_LIST_DIR",
      "Summary": "Full directory of the listfile currently being processed."
    },
    {
      "Id": "CMAKE_CURRENT_LIST_FILE",
      "Summary": "Full path to the listfile currently being processed."
    },
    {
      "Id": "CMAKE_CURRENT_LIST_LINE",
      "Summary": "The line number of the current file being processed."
    },
    {
      "Id": "CMAKE_CURRENT_SOURCE_DIR",
      "Summary": "The path to the source directory currently being processed."
    },
    {
      "Id": "CMAKE_DEBUG_TARGET_PROPERTIES",
      "Summary": "Enables tracing output for target properties."
    },
    {
      "Id": "CMAKE_DIRECTORY_LABELS",
      "Summary": "Specify labels for the current directory."
    },
    {
      "Id": "CMAKE_DL_LIBS",
      "Summary": "Name of library containing ``dlopen`` and ``dlclose``."
    },
    {
      "Id": "CMAKE_DOTNET_TARGET_FRAMEWORK",
      "Summary": "Default value for ``DOTNET_TARGET_FRAMEWORK`` property\tof targets."
    },
    {
      "Id": "CMAKE_DOTNET_TARGET_FRAMEWORK_VERSION",
      "Summary": "Default value for ``DOTNET_TARGET_FRAMEWORK_VERSION`` property of targets."
    },
    {
      "Id": "CMAKE_EDIT_COMMAND",
      "Summary": "Full path to ``cmake-gui(1)`` or ``ccmake(1)``."
    },
    {
      "Id": "CMAKE_EXECUTABLE_SUFFIX",
      "Summary": "The suffix for executables on this platform."
    },
    {
      "Id": "CMAKE_EXECUTABLE_SUFFIX_<LANG>",
      "Summary": "The suffix to use for the end of an executable filename of ``<LANG>`` compiler target architecture, if any."
    },
    {
      "Id": "CMAKE_EXTRA_GENERATOR",
      "Summary": "The extra generator used to build the project."
    },
    {
      "Id": "CMAKE_EXTRA_SHARED_LIBRARY_SUFFIXES",
      "Summary": "Additional suffixes for shared libraries."
    },
    {
      "Id": "CMAKE_FIND_DEBUG_MODE",
      "Summary": "Print extra find call information for the following commands to standard error:"
    },
    {
      "Id": "CMAKE_FIND_PACKAGE_NAME",
      "Summary": "Defined by the ``find_package()`` command while loading a find module to record the caller-specified package name."
    },
    {
      "Id": "CMAKE_FIND_PACKAGE_SORT_DIRECTION",
      "Summary": "The sorting direction used by ``CMAKE_FIND_PACKAGE_SORT_ORDER``."
    },
    {
      "Id": "CMAKE_FIND_PACKAGE_SORT_ORDER",
      "Summary": "The default order for sorting packages found using ``find_package()``."
    },
    {
      "Id": "CMAKE_GENERATOR",
      "Summary": "The generator used to build the project."
    },
    {
      "Id": "CMAKE_GENERATOR_INSTANCE",
      "Summary": "Generator-specific instance specification provided by user."
    },
    {
      "Id": "CMAKE_GENERATOR_PLATFORM",
      "Summary": "Generator-specific target platform specification provided by user."
    },
    {
      "Id": "CMAKE_GENERATOR_TOOLSET",
      "Summary": "Native build system toolset specification provided by user."
    },
    {
      "Id": "CMAKE_IMPORT_LIBRARY_PREFIX",
      "Summary": "The prefix for import libraries that you link to."
    },
    {
      "Id": "CMAKE_IMPORT_LIBRARY_SUFFIX",
      "Summary": "The suffix for import libraries that you link to."
    },
    {
      "Id": "CMAKE_JOB_POOL_COMPILE",
      "Summary": "This variable is used to initialize the ``JOB_POOL_COMPILE`` property on all the targets."
    },
    {
      "Id": "CMAKE_JOB_POOL_LINK",
      "Summary": "This variable is used to initialize the ``JOB_POOL_LINK`` property on all the targets."
    },
    {
      "Id": "CMAKE_JOB_POOL_PRECOMPILE_HEADER",
      "Summary": "This variable is used to initialize the ``JOB_POOL_PRECOMPILE_HEADER`` property on all the targets."
    },
    {
      "Id": "CMAKE_JOB_POOLS",
      "Summary": "If the ``JOB_POOLS`` global property is not set, the value of this variable is used in its place."
    },
    {
      "Id": "CMAKE_<LANG>_COMPILER_AR",
      "Summary": "A wrapper around ``ar`` adding the appropriate ``--plugin`` option for the compiler."
    },
    {
      "Id": "CMAKE_<LANG>_COMPILER_FRONTEND_VARIANT",
      "Summary": "Identification string of the compiler frontend variant."
    },
    {
      "Id": "CMAKE_<LANG>_COMPILER_RANLIB",
      "Summary": "A wrapper around ``ranlib`` adding the appropriate ``--plugin`` option for the compiler."
    },
    {
      "Id": "CMAKE_<LANG>_LINK_LIBRARY_SUFFIX",
      "Summary": "Language-specific suffix for libraries that you link to."
    },
    {
      "Id": "CMAKE_LINK_LIBRARY_SUFFIX",
      "Summary": "The suffix for libraries that you link to."
    },
    {
      "Id": "CMAKE_LINK_SEARCH_END_STATIC",
      "Summary": "End a link line such that static system libraries are used."
    },
    {
      "Id": "CMAKE_LINK_SEARCH_START_STATIC",
      "Summary": "Assume the linker looks for static libraries by default."
    },
    {
      "Id": "CMAKE_MAJOR_VERSION",
      "Summary": "First version number component of the ``CMAKE_VERSION`` variable."
    },
    {
      "Id": "CMAKE_MAKE_PROGRAM",
      "Summary": "Tool that can launch the native build system."
    },
    {
      "Id": "CMAKE_MATCH_COUNT",
      "Summary": "The number of matches with the last regular expression."
    },
    {
      "Id": "CMAKE_MATCH_<n>",
      "Summary": "Capture group ``<n>`` matched by the last regular expression, for groups 0 through 9."
    },
    {
      "Id": "CMAKE_MINIMUM_REQUIRED_VERSION",
      "Summary": "The ``<min>`` version of CMake given to the most recent call to the ``cmake_minimum_required(VERSION)`` command in the current variable scope or any parent variable scope."
    },
    {
      "Id": "CMAKE_MINOR_VERSION",
      "Summary": "Second version number component of the ``CMAKE_VERSION`` variable."
    },
    {
      "Id": "CMAKE_NETRC",
      "Summary": "This variable is used to initialize the ``NETRC`` option for the ``file(DOWNLOAD)`` and ``file(UPLOAD)`` commands."
    },
    {
      "Id": "CMAKE_NETRC_FILE",
      "Summary": "This variable is used to initialize the ``NETRC_FILE`` option for the ``file(DOWNLOAD)`` and ``file(UPLOAD)`` commands."
    },
    {
      "Id": "CMAKE_PARENT_LIST_FILE",
      "Summary": "Full path to the CMake file that included the current one."
    },
    {
      "Id": "CMAKE_PATCH_VERSION",
      "Summary": "Third version number component of the ``CMAKE_VERSION`` variable."
    },
    {
      "Id": "CMAKE_PROJECT_DESCRIPTION",
      "Summary": "The description of the top level project."
    },
    {
      "Id": "CMAKE_PROJECT_HOMEPAGE_URL",
      "Summary": "The homepage URL of the top level project."
    },
    {
      "Id": "CMAKE_PROJECT_NAME",
      "Summary": "The name of the top level project."
    },
    {
      "Id": "CMAKE_PROJECT_VERSION",
      "Summary": "The version of the top level project."
    },
    {
      "Id": "CMAKE_PROJECT_VERSION_MAJOR",
      "Summary": "The major version of the top level project."
    },
    {
      "Id": "CMAKE_PROJECT_VERSION_MINOR",
      "Summary": "The minor version of the top level project."
    },
    {
      "Id": "CMAKE_PROJECT_VERSION_PATCH",
      "Summary": "The patch version of the top level project."
    },
    {
      "Id": "CMAKE_PROJECT_VERSION_TWEAK",
      "Summary": "The tweak version of the top level project."
    },
    {
      "Id": "CMAKE_RANLIB",
      "Summary": "Name of randomizing tool for static libraries."
    },
    {
      "Id": "CMAKE_ROOT",
      "Summary": "Install directory for running cmake."
    },
    {
      "Id": "CMAKE_RULE_MESSAGES",
      "Summary": "Specify whether to report a message for each make rule."
    },
    {
      "Id": "CMAKE_SCRIPT_MODE_FILE",
      "Summary": "Full path to the ``cmake(1)`` ``-P`` script file currently being processed."
    },
    {
      "Id": "CMAKE_SHARED_LIBRARY_PREFIX",
      "Summary": "The prefix for shared libraries that you link to."
    },
    {
      "Id": "CMAKE_SHARED_LIBRARY_SUFFIX",
      "Summary": "The suffix for shared libraries that you link to."
    },
    {
      "Id": "CMAKE_SHARED_MODULE_PREFIX",
      "Summary": "The prefix for loadable modules that you link to."
    },
    {
      "Id": "CMAKE_SHARED_MODULE_SUFFIX",
      "Summary": "The suffix for shared libraries that you link to."
    },
    {
      "Id": "CMAKE_SIZEOF_VOID_P",
      "Summary": "Size of a ``void`` pointer."
    },
    {
      "Id": "CMAKE_SKIP_INSTALL_RULES",
      "Summary": "Whether to disable generation of installation rules."
    },
    {
      "Id": "CMAKE_SKIP_RPATH",
      "Summary": "If true, do not add run time path information."
    },
    {
      "Id": "CMAKE_SOURCE_DIR",
      "Summary": "The path to the top level of the source tree."
    },
    {
      "Id": "CMAKE_STATIC_LIBRARY_PREFIX",
      "Summary": "The prefix for static libraries that you link to."
    },
    {
      "Id": "CMAKE_STATIC_LIBRARY_SUFFIX",
      "Summary": "The suffix for static libraries that you link to."
    },
    {
      "Id": "CMAKE_Swift_MODULE_DIRECTORY",
      "Summary": "Swift module output directory."
    },
    {
      "Id": "CMAKE_Swift_NUM_THREADS",
      "Summary": "Number of threads for parallel compilation for Swift targets."
    },
    {
      "Id": "CMAKE_TOOLCHAIN_FILE",
      "Summary": "Path to toolchain file supplied to ``cmake(1)``."
    },
    {
      "Id": "CMAKE_TWEAK_VERSION",
      "Summary": "Defined to ``0`` for compatibility with code written for older CMake versions that may have defined higher values."
    },
    {
      "Id": "CMAKE_VERBOSE_MAKEFILE",
      "Summary": "Enable verbose output from Makefile builds."
    },
    {
      "Id": "CMAKE_VERSION",
      "Summary": "The CMake version string as three non-negative integer components separated by ``.`` and possibly followed by ``-`` and other information."
    },
    {
      "Id": "CMAKE_VS_DEVENV_COMMAND",
      "Summary": "The generators for ``Visual Studio 9 2008`` and above set this variable to the ``devenv.com`` command installed with the corresponding Visual Studio version."
    },
    {
      "Id": "CMAKE_VS_MSBUILD_COMMAND",
      "Summary": "The generators for ``Visual Studio 10 2010`` and above set this variable to the ``MSBuild.exe`` command installed with the corresponding Visual Studio version."
    },
    {
      "Id": "CMAKE_VS_NsightTegra_VERSION",
      "Summary": "When using a Visual Studio generator with the ``CMAKE_SYSTEM_NAME`` variable set to ``Android``, this variable contains the version number of the installed NVIDIA Nsight Tegra Visual Studio Edition."
    },
    {
      "Id": "CMAKE_VS_PLATFORM_NAME",
      "Summary": "Visual Studio target platform name used by the current generator."
    },
    {
      "Id": "CMAKE_VS_PLATFORM_NAME_DEFAULT",
      "Summary": "Default for the Visual Studio target platform name for the current generator without considering the value of the ``CMAKE_GENERATOR_PLATFORM`` variable."
    },
    {
      "Id": "CMAKE_VS_PLATFORM_TOOLSET",
      "Summary": "Visual Studio Platform Toolset name."
    },
    {
      "Id": "CMAKE_VS_PLATFORM_TOOLSET_CUDA",
      "Summary": "NVIDIA CUDA Toolkit version whose Visual Studio toolset to use."
    },
    {
      "Id": "CMAKE_VS_PLATFORM_TOOLSET_CUDA_CUSTOM_DIR",
      "Summary": "Path to standalone NVIDIA CUDA Toolkit (eg. extracted from installer)."
    },
    {
      "Id": "CMAKE_VS_PLATFORM_TOOLSET_HOST_ARCHITECTURE",
      "Summary": "Visual Studio preferred tool architecture."
    },
    {
      "Id": "CMAKE_VS_PLATFORM_TOOLSET_VERSION",
      "Summary": "Visual Studio Platform Toolset version."
    },
    {
      "Id": "CMAKE_VS_TARGET_FRAMEWORK_VERSION",
      "Summary": "Visual Studio target framework version."
    },
    {
      "Id": "CMAKE_VS_TARGET_FRAMEWORK_IDENTIFIER",
      "Summary": "Visual Studio target framework identifier."
    },
    {
      "Id": "CMAKE_VS_TARGET_FRAMEWORK_TARGETS_VERSION",
      "Summary": "Visual Studio target framework targets version."
    },
    {
      "Id": "CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION",
      "Summary": "Visual Studio Windows Target Platform Version."
    },
    {
      "Id": "CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION_MAXIMUM",
      "Summary": "Override the :`Windows 10 SDK Maximum Version for VS 2015` and beyond."
    },
    {
      "Id": "CMAKE_XCODE_BUILD_SYSTEM",
      "Summary": "Xcode build system selection."
    },
    {
      "Id": "CMAKE_XCODE_PLATFORM_TOOLSET",
      "Summary": "Xcode compiler selection."
    },
    {
      "Id": "<PROJECT-NAME>_BINARY_DIR",
      "Summary": "Top level binary directory for the named project."
    },
    {
      "Id": "<PROJECT-NAME>_DESCRIPTION",
      "Summary": "Value given to the ``DESCRIPTION`` option of the most recent call to the ``project()`` command with project name ``<PROJECT-NAME>``, if any."
    },
    {
      "Id": "<PROJECT-NAME>_HOMEPAGE_URL",
      "Summary": "Value given to the ``HOMEPAGE_URL`` option of the most recent call to the ``project()`` command with project name ``<PROJECT-NAME>``, if any."
    },
    {
      "Id": "<PROJECT-NAME>_IS_TOP_LEVEL",
      "Summary": "A boolean variable indicating whether the named project was called in a top level ``CMakeLists.txt`` file."
    },
    {
      "Id": "<PROJECT-NAME>_SOURCE_DIR",
      "Summary": "Top level source directory for the named project."
    },
    {
      "Id": "<PROJECT-NAME>_VERSION",
      "Summary": "Value given to the ``VERSION`` option of the most recent call to the ``project()`` command with project name ``<PROJECT-NAME>``, if any."
    },
    {
      "Id": "<PROJECT-NAME>_VERSION_MAJOR",
      "Summary": "First version number component of the ``<PROJECT-NAME>_VERSION`` variable as set by the ``project()`` command."
    },
    {
      "Id": "<PROJECT-NAME>_VERSION_MINOR",
      "Summary": "Second version number component of the ``<PROJECT-NAME>_VERSION`` variable as set by the ``project()`` command."
    },
    {
      "Id": "<PROJECT-NAME>_VERSION_PATCH",
      "Summary": "Third version number component of the ``<PROJECT-NAME>_VERSION`` variable as set by the ``project()`` command."
    },
    {
      "Id": "<PROJECT-NAME>_VERSION_TWEAK",
      "Summary": "Fourth version number component of the ``<PROJECT-NAME>_VERSION`` variable as set by the ``project()`` command."
    },
    {
      "Id": "PROJECT_BINARY_DIR",
      "Summary": "Full path to build directory for project."
    },
    {
      "Id": "PROJECT_DESCRIPTION",
      "Summary": "Short project description given to the project command."
    },
    {
      "Id": "PROJECT_HOMEPAGE_URL",
      "Summary": "The homepage URL of the project."
    },
    {
      "Id": "PROJECT_IS_TOP_LEVEL",
      "Summary": "A boolean variable indicating whether the most recently called ``project()`` command in the current scope or above was in the top level ``CMakeLists.txt`` file."
    },
    {
      "Id": "PROJECT_NAME",
      "Summary": "Name of the project given to the project command."
    },
    {
      "Id": "PROJECT_SOURCE_DIR",
      "Summary": "This is the source directory of the last call to the ``project()`` command made in the current directory scope or one of its parents."
    },
    {
      "Id": "PROJECT_VERSION",
      "Summary": "Value given to the ``VERSION`` option of the most recent call to the ``project()`` command, if any."
    },
    {
      "Id": "PROJECT_VERSION_MAJOR",
      "Summary": "First version number component of the ``PROJECT_VERSION`` variable as set by the ``project()`` command."
    },
    {
      "Id": "PROJECT_VERSION_MINOR",
      "Summary": "Second version number component of the ``PROJECT_VERSION`` variable as set by the ``project()`` command."
    },
    {
      "Id": "PROJECT_VERSION_PATCH",
      "Summary": "Third version number component of the ``PROJECT_VERSION`` variable as set by the ``project()`` command."
    },
    {
      "Id": "PROJECT_VERSION_TWEAK",
      "Summary": "Fourth version number component of the ``PROJECT_VERSION`` variable as set by the ``project()`` command."
    },
    {
      "Id": "BUILD_SHARED_LIBS",
      "Summary": "Global flag to cause ``add_library()`` to create shared libraries if on."
    },
    {
      "Id": "CMAKE_ABSOLUTE_DESTINATION_FILES",
      "Summary": "List of files which have been installed using an ``ABSOLUTE DESTINATION`` path."
    },
    {
      "Id": "CMAKE_APPBUNDLE_PATH",
      "Summary": ":`Semicolon-separated list <CMake Language Lists>` of directories specifying a search path for macOS application bundles used by the ``find_program()``, and ``find_package()`` commands."
    },
    {
      "Id": "CMAKE_AUTOMOC_RELAXED_MODE",
      "Summary": "Switch between strict and relaxed automoc mode."
    },
    {
      "Id": "CMAKE_BACKWARDS_COMPATIBILITY",
      "Summary": "Deprecated."
    },
    {
      "Id": "CMAKE_BUILD_TYPE",
      "Summary": "Specifies the build type on single-configuration generators (e.g. :`Makefile Generators` or ``Ninja``)."
    },
    {
      "Id": "CMAKE_CLANG_VFS_OVERLAY",
      "Summary": "When cross compiling for windows with clang-cl, this variable can be an absolute path pointing to a clang virtual file system yaml file, which will enable clang-cl to resolve windows header names on a case sensitive file system."
    },
    {
      "Id": "CMAKE_CODEBLOCKS_COMPILER_ID",
      "Summary": "Change the compiler id in the generated CodeBlocks project files."
    },
    {
      "Id": "CMAKE_CODEBLOCKS_EXCLUDE_EXTERNAL_FILES",
      "Summary": "Change the way the CodeBlocks generator creates project files."
    },
    {
      "Id": "CMAKE_CODELITE_USE_TARGETS",
      "Summary": "Change the way the CodeLite generator creates projectfiles."
    },
    {
      "Id": "CMAKE_COLOR_MAKEFILE",
      "Summary": "Enables color output when using the :`Makefile Generators`."
    },
    {
      "Id": "CMAKE_CONFIGURATION_TYPES",
      "Summary": "Specifies the available build types (configurations) on multi-config generators (e.g. :`Visual Studio <Visual Studio Generators>`, ``Xcode``, or ``Ninja Multi-Config``)."
    },
    {
      "Id": "CMAKE_DEPENDS_IN_PROJECT_ONLY",
      "Summary": "When set to ``TRUE`` in a directory, the build system produced by the :`Makefile Generators` is set up to only consider dependencies on source files that appear either in the source or in the binary directories."
    },
    {
      "Id": "CMAKE_DISABLE_FIND_PACKAGE_<PackageName>",
      "Summary": "Variable for disabling ``find_package()`` calls."
    },
    {
      "Id": "CMAKE_ECLIPSE_GENERATE_LINKED_RESOURCES",
      "Summary": "This cache variable is used by the Eclipse project generator."
    },
    {
      "Id": "CMAKE_ECLIPSE_GENERATE_SOURCE_PROJECT",
      "Summary": "This cache variable is used by the Eclipse project generator."
    },
    {
      "Id": "CMAKE_ECLIPSE_MAKE_ARGUMENTS",
      "Summary": "This cache variable is used by the Eclipse project generator."
    },
    {
      "Id": "CMAKE_ECLIPSE_RESOURCE_ENCODING",
      "Summary": "This cache variable tells the ``Eclipse CDT4`` project generator to set the resource encoding to the given value in generated project files."
    },
    {
      "Id": "CMAKE_ECLIPSE_VERSION",
      "Summary": "This cache variable is used by the Eclipse project generator."
    },
    {
      "Id": "CMAKE_ERROR_DEPRECATED",
      "Summary": "Whether to issue errors for deprecated functionality."
    },
    {
      "Id": "CMAKE_ERROR_ON_ABSOLUTE_INSTALL_DESTINATION",
      "Summary": "Ask ``cmake_install.cmake`` script to error out as soon as a file with absolute ``INSTALL DESTINATION`` is encountered."
    },
    {
      "Id": "CMAKE_EXECUTE_PROCESS_COMMAND_ECHO",
      "Summary": "If this variable is set to ``STDERR``, ``STDOUT`` or ``NONE`` then commands in ``execute_process()`` calls will be printed to either stderr or stdout or not at all."
    },
    {
      "Id": "CMAKE_EXPORT_COMPILE_COMMANDS",
      "Summary": "Enable/Disable output of compile commands during generation."
    },
    {
      "Id": "CMAKE_EXPORT_PACKAGE_REGISTRY",
      "Summary": "Enables the ``export(PACKAGE)`` command when ``CMP0090`` is set to ``NEW``."
    },
    {
      "Id": "CMAKE_EXPORT_NO_PACKAGE_REGISTRY",
      "Summary": "Disable the ``export(PACKAGE)`` command when ``CMP0090`` is not set to ``NEW``."
    },
    {
      "Id": "CMAKE_FIND_APPBUNDLE",
      "Summary": "This variable affects how ``find_*`` commands choose between macOS Application Bundles and unix-style package components."
    },
    {
      "Id": "CMAKE_FIND_FRAMEWORK",
      "Summary": "This variable affects how ``find_*`` commands choose between macOS Frameworks and unix-style package components."
    },
    {
      "Id": "CMAKE_FIND_LIBRARY_CUSTOM_LIB_SUFFIX",
      "Summary": "Specify a ``<suffix>`` to tell the ``find_library()`` command to search in a ``lib<suffix>`` directory before each ``lib`` directory that would normally be searched."
    },
    {
      "Id": "CMAKE_FIND_LIBRARY_PREFIXES",
      "Summary": "Prefixes to prepend when looking for libraries."
    },
    {
      "Id": "CMAKE_FIND_LIBRARY_SUFFIXES",
      "Summary": "Suffixes to append when looking for libraries."
    },
    {
      "Id": "CMAKE_FIND_NO_INSTALL_PREFIX",
      "Summary": "Exclude the values of the ``CMAKE_INSTALL_PREFIX`` and ``CMAKE_STAGING_PREFIX`` variables from ``CMAKE_SYSTEM_PREFIX_PATH``."
    },
    {
      "Id": "CMAKE_FIND_PACKAGE_NO_PACKAGE_REGISTRY",
      "Summary": "By default this variable is not set."
    },
    {
      "Id": "CMAKE_FIND_PACKAGE_NO_SYSTEM_PACKAGE_REGISTRY",
      "Summary": "By default this variable is not set."
    },
    {
      "Id": "CMAKE_FIND_PACKAGE_PREFER_CONFIG",
      "Summary": "Tell ``find_package()`` to try \"Config\" mode before \"Module\" mode if no mode was specified."
    },
    {
      "Id": "CMAKE_FIND_PACKAGE_RESOLVE_SYMLINKS",
      "Summary": "Set to ``TRUE`` to tell ``find_package()`` calls to resolve symbolic links in the value of ``<PackageName>_DIR``."
    },
    {
      "Id": "CMAKE_FIND_PACKAGE_WARN_NO_MODULE",
      "Summary": "Tell ``find_package()`` to warn if called without an explicit mode."
    },
    {
      "Id": "CMAKE_FIND_ROOT_PATH",
      "Summary": ":`Semicolon-separated list <CMake Language Lists>` of root paths to search on the filesystem."
    },
    {
      "Id": "CMAKE_FIND_ROOT_PATH_MODE_INCLUDE",
      "Summary": "This variable controls whether the ``CMAKE_FIND_ROOT_PATH`` and ``CMAKE_SYSROOT`` are used by ``find_file()`` and ``find_path()``."
    },
    {
      "Id": "CMAKE_FIND_ROOT_PATH_MODE_LIBRARY",
      "Summary": "This variable controls whether the ``CMAKE_FIND_ROOT_PATH`` and ``CMAKE_SYSROOT`` are used by ``find_library()``."
    },
    {
      "Id": "CMAKE_FIND_ROOT_PATH_MODE_PACKAGE",
      "Summary": "This variable controls whether the ``CMAKE_FIND_ROOT_PATH`` and ``CMAKE_SYSROOT`` are used by ``find_package()``."
    },
    {
      "Id": "CMAKE_FIND_ROOT_PATH_MODE_PROGRAM",
      "Summary": "This variable controls whether the ``CMAKE_FIND_ROOT_PATH`` and ``CMAKE_SYSROOT`` are used by ``find_program()``."
    },
    {
      "Id": "CMAKE_FIND_USE_CMAKE_ENVIRONMENT_PATH",
      "Summary": "Controls the default behavior of the following commands for whether or not to search paths provided by cmake-specific environment variables:"
    },
    {
      "Id": "CMAKE_FIND_USE_CMAKE_PATH",
      "Summary": "Controls the default behavior of the following commands for whether or not to search paths provided by cmake-specific cache variables:"
    },
    {
      "Id": "CMAKE_FIND_USE_CMAKE_SYSTEM_PATH",
      "Summary": "Controls the default behavior of the following commands for whether or not to search paths provided by platform-specific cmake variables:"
    },
    {
      "Id": "CMAKE_FIND_USE_PACKAGE_REGISTRY",
      "Summary": "Controls the default behavior of the ``find_package()`` command for whether or not to search paths provided by the :`User Package Registry`."
    },
    {
      "Id": "CMAKE_FIND_USE_PACKAGE_ROOT_PATH",
      "Summary": "Controls the default behavior of the following commands for whether or not to search paths provided by ``<PackageName>_ROOT`` variables:"
    },
    {
      "Id": "CMAKE_FIND_USE_SYSTEM_ENVIRONMENT_PATH",
      "Summary": "Controls the default behavior of the following commands for whether or not to search paths provided by standard system environment variables:"
    },
    {
      "Id": "CMAKE_FIND_USE_SYSTEM_PACKAGE_REGISTRY",
      "Summary": "Controls searching the :`System Package Registry` by the ``find_package()`` command."
    },
    {
      "Id": "CMAKE_FRAMEWORK_PATH",
      "Summary": ":`Semicolon-separated list <CMake Language Lists>` of directories specifying a search path for macOS frameworks used by the ``find_library()``, ``find_package()``, ``find_path()``, and ``find_file()`` commands."
    },
    {
      "Id": "CMAKE_IGNORE_PATH",
      "Summary": ":`Semicolon-separated list <CMake Language Lists>` of directories to be *ignored* by the ``find_program()``, ``find_library()``, ``find_file()``, and ``find_path()`` commands."
    },
    {
      "Id": "CMAKE_INCLUDE_DIRECTORIES_BEFORE",
      "Summary": "Whether to append or prepend directories by default in ``include_directories()``."
    },
    {
      "Id": "CMAKE_INCLUDE_DIRECTORIES_PROJECT_BEFORE",
      "Summary": "Whether to force prepending of project include directories."
    },
    {
      "Id": "CMAKE_INCLUDE_PATH",
      "Summary": ":`Semicolon-separated list <CMake Language Lists>` of directories specifying a search path for the ``find_file()`` and ``find_path()`` commands."
    },
    {
      "Id": "CMAKE_INSTALL_DEFAULT_COMPONENT_NAME",
      "Summary": "Default component used in ``install()`` commands."
    },
    {
      "Id": "CMAKE_INSTALL_DEFAULT_DIRECTORY_PERMISSIONS",
      "Summary": "Default permissions for directories created implicitly during installation of files by ``install()`` and ``file(INSTALL)``."
    },
    {
      "Id": "CMAKE_INSTALL_MESSAGE",
      "Summary": "Specify verbosity of installation script code generated by the ``install()`` command (using the ``file(INSTALL)`` command)."
    },
    {
      "Id": "CMAKE_INSTALL_PREFIX",
      "Summary": "Install directory used by ``install()``."
    },
    {
      "Id": "CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT",
      "Summary": "CMake sets this variable to a ``TRUE`` value when the ``CMAKE_INSTALL_PREFIX`` has just been initialized to its default value, typically on the first run of CMake within a new build tree."
    },
    {
      "Id": "CMAKE_LIBRARY_PATH",
      "Summary": ":`Semicolon-separated list <CMake Language Lists>` of directories specifying a search path for the ``find_library()`` command."
    },
    {
      "Id": "CMAKE_LINK_DIRECTORIES_BEFORE",
      "Summary": "Whether to append or prepend directories by default in ``link_directories()``."
    },
    {
      "Id": "CMAKE_MFC_FLAG",
      "Summary": "Use the MFC library for an executable or dll."
    },
    {
      "Id": "CMAKE_MAXIMUM_RECURSION_DEPTH",
      "Summary": "Maximum recursion depth for CMake scripts."
    },
    {
      "Id": "CMAKE_MESSAGE_CONTEXT",
      "Summary": "When enabled by the ``cmake`` ``--log-context`` command line option or the ``CMAKE_MESSAGE_CONTEXT_SHOW`` variable, the ``message()`` command converts the ``CMAKE_MESSAGE_CONTEXT`` list into a dot-separated string surrounded by square brackets and prepends it to each line for messages of log levels ``NOTICE`` and below."
    },
    {
      "Id": "CMAKE_MESSAGE_CONTEXT_SHOW",
      "Summary": "Setting this variable to true enables showing a context with each line logged by the ``message()`` command (see ``CMAKE_MESSAGE_CONTEXT`` for how the context itself is specified)."
    },
    {
      "Id": "CMAKE_MESSAGE_INDENT",
      "Summary": "The ``message()`` command joins the strings from this list and for log levels of ``NOTICE`` and below, it prepends the resultant string to each line of the message."
    },
    {
      "Id": "CMAKE_MESSAGE_LOG_LEVEL",
      "Summary": "When set, this variable specifies the logging level used by the ``message()`` command."
    },
    {
      "Id": "CMAKE_MODULE_PATH",
      "Summary": ":`Semicolon-separated list <CMake Language Lists>` of directories specifying a search path for CMake modules to be loaded by the ``include()`` or ``find_package()`` commands before checking the default modules that come with CMake."
    },
    {
      "Id": "CMAKE_POLICY_DEFAULT_CMP<NNNN>",
      "Summary": "Default for CMake Policy ``CMP<NNNN>`` when it is otherwise left unset."
    },
    {
      "Id": "CMAKE_POLICY_WARNING_CMP<NNNN>",
      "Summary": "Explicitly enable or disable the warning when CMake Policy ``CMP<NNNN>`` has not been set explicitly by ``cmake_policy()`` or implicitly by ``cmake_minimum_required()``."
    },
    {
      "Id": "CMAKE_PREFIX_PATH",
      "Summary": ":`Semicolon-separated list <CMake Language Lists>` of directories specifying installation *prefixes* to be searched by the ``find_package()``, ``find_program()``, ``find_library()``, ``find_file()``, and ``find_path()`` commands."
    },
    {
      "Id": "CMAKE_PROGRAM_PATH",
      "Summary": ":`Semicolon-separated list <CMake Language Lists>` of directories specifying a search path for the ``find_program()`` command."
    },
    {
      "Id": "CMAKE_PROJECT_INCLUDE",
      "Summary": "A CMake language file or module to be included as the last step of all ``project()`` command calls."
    },
    {
      "Id": "CMAKE_PROJECT_INCLUDE_BEFORE",
      "Summary": "A CMake language file or module to be included as the first step of all ``project()`` command calls."
    },
    {
      "Id": "CMAKE_PROJECT_<PROJECT-NAME>_INCLUDE",
      "Summary": "A CMake language file or module to be included as the last step of any ``project()`` command calls that specify ``<PROJECT-NAME>`` as the project name."
    },
    {
      "Id": "CMAKE_PROJECT_<PROJECT-NAME>_INCLUDE_BEFORE",
      "Summary": "A CMake language file or module to be included as the first step of any ``project()`` command calls that specify ``<PROJECT-NAME>`` as the project name."
    },
    {
      "Id": "CMAKE_REQUIRE_FIND_PACKAGE_<PackageName>",
      "Summary": "Variable for making ``find_package()`` call ``REQUIRED``."
    },
    {
      "Id": "CMAKE_SKIP_INSTALL_ALL_DEPENDENCY",
      "Summary": "Don't make the ``install`` target depend on the ``all`` target."
    },
    {
      "Id": "CMAKE_STAGING_PREFIX",
      "Summary": "This variable may be set to a path to install to when cross-compiling."
    },
    {
      "Id": "CMAKE_SUBLIME_TEXT_2_ENV_SETTINGS",
      "Summary": "This variable contains a list of env vars as a list of tokens with the syntax ``var=value``."
    },
    {
      "Id": "CMAKE_SUBLIME_TEXT_2_EXCLUDE_BUILD_TREE",
      "Summary": "If this variable evaluates to ``ON`` at the end of the top-level ``CMakeLists.txt`` file, the ``Sublime Text 2`` extra generator excludes the build tree from the ``.sublime-project`` if it is inside the source tree."
    },
    {
      "Id": "CMAKE_SUPPRESS_REGENERATION",
      "Summary": "If ``CMAKE_SUPPRESS_REGENERATION`` is ``OFF``, which is default, then CMake adds a special target on which all other targets depend that checks the build system and optionally re-runs CMake to regenerate the build system when the target specification source changes."
    },
    {
      "Id": "CMAKE_SYSROOT",
      "Summary": "Path to pass to the compiler in the ``--sysroot`` flag."
    },
    {
      "Id": "CMAKE_SYSROOT_COMPILE",
      "Summary": "Path to pass to the compiler in the ``--sysroot`` flag when compiling source files."
    },
    {
      "Id": "CMAKE_SYSROOT_LINK",
      "Summary": "Path to pass to the compiler in the ``--sysroot`` flag when linking."
    },
    {
      "Id": "CMAKE_SYSTEM_APPBUNDLE_PATH",
      "Summary": "Search path for macOS application bundles used by the ``find_program()``, and ``find_package()`` commands."
    },
    {
      "Id": "CMAKE_SYSTEM_FRAMEWORK_PATH",
      "Summary": "Search path for macOS frameworks used by the ``find_library()``, ``find_package()``, ``find_path()``, and ``find_file()`` commands."
    },
    {
      "Id": "CMAKE_SYSTEM_IGNORE_PATH",
      "Summary": ":`Semicolon-separated list <CMake Language Lists>` of directories to be *ignored* by the ``find_program()``, ``find_library()``, ``find_file()``, and ``find_path()`` commands."
    },
    {
      "Id": "CMAKE_SYSTEM_INCLUDE_PATH",
      "Summary": ":`Semicolon-separated list <CMake Language Lists>` of directories specifying a search path for the ``find_file()`` and ``find_path()`` commands."
    },
    {
      "Id": "CMAKE_SYSTEM_LIBRARY_PATH",
      "Summary": ":`Semicolon-separated list <CMake Language Lists>` of directories specifying a search path for the ``find_library()`` command."
    },
    {
      "Id": "CMAKE_SYSTEM_PREFIX_PATH",
      "Summary": ":`Semicolon-separated list <CMake Language Lists>` of directories specifying installation *prefixes* to be searched by the ``find_package()``, ``find_program()``, ``find_library()``, ``find_file()``, and ``find_path()`` commands."
    },
    {
      "Id": "CMAKE_SYSTEM_PROGRAM_PATH",
      "Summary": ":`Semicolon-separated list <CMake Language Lists>` of directories specifying a search path for the ``find_program()`` command."
    },
    {
      "Id": "CMAKE_TLS_CAINFO",
      "Summary": "Specify the default value for the ``file(DOWNLOAD)`` and ``file(UPLOAD)`` commands' ``TLS_CAINFO`` options."
    },
    {
      "Id": "CMAKE_TLS_VERIFY",
      "Summary": "Specify the default value for the ``file(DOWNLOAD)`` and ``file(UPLOAD)`` commands' ``TLS_VERIFY`` options."
    },
    {
      "Id": "CMAKE_USER_MAKE_RULES_OVERRIDE",
      "Summary": "Specify a CMake file that overrides platform information."
    },
    {
      "Id": "CMAKE_WARN_DEPRECATED",
      "Summary": "Whether to issue warnings for deprecated functionality."
    },
    {
      "Id": "CMAKE_WARN_ON_ABSOLUTE_INSTALL_DESTINATION",
      "Summary": "Ask ``cmake_install.cmake`` script to warn each time a file with absolute ``INSTALL DESTINATION`` is encountered."
    },
    {
      "Id": "CMAKE_XCODE_GENERATE_SCHEME",
      "Summary": "If enabled, the ``Xcode`` generator will generate schema files."
    },
    {
      "Id": "CMAKE_XCODE_GENERATE_TOP_LEVEL_PROJECT_ONLY",
      "Summary": "If enabled, the ``Xcode`` generator will generate only a single Xcode project file for the topmost ``project()`` command instead of generating one for every ``project()`` command."
    },
    {
      "Id": "CMAKE_XCODE_LINK_BUILD_PHASE_MODE",
      "Summary": "This variable is used to initialize the ``XCODE_LINK_BUILD_PHASE_MODE`` property on targets."
    },
    {
      "Id": "CMAKE_XCODE_SCHEME_ADDRESS_SANITIZER",
      "Summary": "Whether to enable ``Address Sanitizer`` in the Diagnostics section of the generated Xcode scheme."
    },
    {
      "Id": "CMAKE_XCODE_SCHEME_ADDRESS_SANITIZER_USE_AFTER_RETURN",
      "Summary": "Whether to enable ``Detect use of stack after return`` in the Diagnostics section of the generated Xcode scheme."
    },
    {
      "Id": "CMAKE_XCODE_SCHEME_DEBUG_DOCUMENT_VERSIONING",
      "Summary": "Whether to enable ``Allow debugging when using document Versions Browser`` in the Options section of the generated Xcode scheme."
    },
    {
      "Id": "CMAKE_XCODE_SCHEME_DISABLE_MAIN_THREAD_CHECKER",
      "Summary": "Whether to disable the ``Main Thread Checker`` in the Diagnostics section of the generated Xcode scheme."
    },
    {
      "Id": "CMAKE_XCODE_SCHEME_DYNAMIC_LIBRARY_LOADS",
      "Summary": "Whether to enable ``Dynamic Library Loads`` in the Diagnostics section of the generated Xcode scheme."
    },
    {
      "Id": "CMAKE_XCODE_SCHEME_DYNAMIC_LINKER_API_USAGE",
      "Summary": "Whether to enable ``Dynamic Linker API usage`` in the Diagnostics section of the generated Xcode scheme."
    },
    {
      "Id": "CMAKE_XCODE_SCHEME_ENVIRONMENT",
      "Summary": "Specify environment variables that should be added to the Arguments section of the generated Xcode scheme."
    },
    {
      "Id": "CMAKE_XCODE_SCHEME_GUARD_MALLOC",
      "Summary": "Whether to enable ``Guard Malloc`` in the Diagnostics section of the generated Xcode scheme."
    },
    {
      "Id": "CMAKE_XCODE_SCHEME_MAIN_THREAD_CHECKER_STOP",
      "Summary": "Whether to enable the ``Main Thread Checker`` option ``Pause on issues`` in the Diagnostics section of the generated Xcode scheme."
    },
    {
      "Id": "CMAKE_XCODE_SCHEME_MALLOC_GUARD_EDGES",
      "Summary": "Whether to enable ``Malloc Guard Edges`` in the Diagnostics section of the generated Xcode scheme."
    },
    {
      "Id": "CMAKE_XCODE_SCHEME_MALLOC_SCRIBBLE",
      "Summary": "Whether to enable ``Malloc Scribble`` in the Diagnostics section of the generated Xcode scheme."
    },
    {
      "Id": "CMAKE_XCODE_SCHEME_MALLOC_STACK",
      "Summary": "Whether to enable ``Malloc Stack`` in the Diagnostics section of the generated Xcode scheme."
    },
    {
      "Id": "CMAKE_XCODE_SCHEME_THREAD_SANITIZER",
      "Summary": "Whether to enable ``Thread Sanitizer`` in the Diagnostics section of the generated Xcode scheme."
    },
    {
      "Id": "CMAKE_XCODE_SCHEME_THREAD_SANITIZER_STOP",
      "Summary": "Whether to enable ``Thread Sanitizer - Pause on issues`` in the Diagnostics section of the generated Xcode scheme."
    },
    {
      "Id": "CMAKE_XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER",
      "Summary": "Whether to enable ``Undefined Behavior Sanitizer`` in the Diagnostics section of the generated Xcode scheme."
    },
    {
      "Id": "CMAKE_XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER_STOP",
      "Summary": "Whether to enable ``Undefined Behavior Sanitizer`` option ``Pause on issues`` in the Diagnostics section of the generated Xcode scheme."
    },
    {
      "Id": "CMAKE_XCODE_SCHEME_WORKING_DIRECTORY",
      "Summary": "Specify the ``Working Directory`` of the *Run* and *Profile* actions in the generated Xcode scheme."
    },
    {
      "Id": "CMAKE_XCODE_SCHEME_ZOMBIE_OBJECTS",
      "Summary": "Whether to enable ``Zombie Objects`` in the Diagnostics section of the generated Xcode scheme."
    },
    {
      "Id": "<PackageName>_ROOT",
      "Summary": "Calls to ``find_package(<PackageName>)`` will search in prefixes specified by the ``<PackageName>_ROOT`` CMake variable, where ``<PackageName>`` is the name given to the ``find_package()`` call and ``_ROOT`` is literal."
    },
    {
      "Id": "ANDROID",
      "Summary": "Set to ``1`` when the target system (``CMAKE_SYSTEM_NAME``) is ``Android``."
    },
    {
      "Id": "APPLE",
      "Summary": "Set to ``True`` when the target system is an Apple platform (macOS, iOS, tvOS or watchOS)."
    },
    {
      "Id": "BORLAND",
      "Summary": "``True`` if the Borland compiler is being used."
    },
    {
      "Id": "CMAKE_ANDROID_NDK_VERSION",
      "Summary": "When :`Cross Compiling for Android with the NDK` and using an Android NDK version 11 or higher, this variable is provided by CMake to report the NDK version number."
    },
    {
      "Id": "CMAKE_CL_64",
      "Summary": "Discouraged."
    },
    {
      "Id": "CMAKE_COMPILER_2005",
      "Summary": "Using the Visual Studio 2005 compiler from Microsoft"
    },
    {
      "Id": "CMAKE_HOST_APPLE",
      "Summary": "``True`` for Apple macOS operating systems."
    },
    {
      "Id": "CMAKE_HOST_SOLARIS",
      "Summary": "``True`` for Oracle Solaris operating systems."
    },
    {
      "Id": "CMAKE_HOST_SYSTEM",
      "Summary": "Composite Name of OS CMake is being run on."
    },
    {
      "Id": "CMAKE_HOST_SYSTEM_NAME",
      "Summary": "Name of the OS CMake is running on."
    },
    {
      "Id": "CMAKE_HOST_SYSTEM_PROCESSOR",
      "Summary": "The name of the CPU CMake is running on."
    },
    {
      "Id": "CMAKE_HOST_SYSTEM_VERSION",
      "Summary": "The OS version CMake is running on."
    },
    {
      "Id": "CMAKE_HOST_UNIX",
      "Summary": "``True`` for UNIX and UNIX like operating systems."
    },
    {
      "Id": "CMAKE_HOST_WIN32",
      "Summary": "``True`` if the host system is running Windows, including Windows 64-bit and MSYS."
    },
    {
      "Id": "CMAKE_LIBRARY_ARCHITECTURE",
      "Summary": "Target architecture library directory name, if detected."
    },
    {
      "Id": "CMAKE_LIBRARY_ARCHITECTURE_REGEX",
      "Summary": "Regex matching possible target architecture library directory names."
    },
    {
      "Id": "CMAKE_OBJECT_PATH_MAX",
      "Summary": "Maximum object file full-path length allowed by native build tools."
    },
    {
      "Id": "CMAKE_SYSTEM",
      "Summary": "Composite name of operating system CMake is compiling for."
    },
    {
      "Id": "CMAKE_SYSTEM_NAME",
      "Summary": "The name of the operating system for which CMake is to build."
    },
    {
      "Id": "CMAKE_SYSTEM_PROCESSOR",
      "Summary": "When not cross-compiling, this variable has the same value as the ``CMAKE_HOST_SYSTEM_PROCESSOR`` variable."
    },
    {
      "Id": "CMAKE_SYSTEM_VERSION",
      "Summary": "The version of the operating system for which CMake is to build."
    },
    {
      "Id": "CYGWIN",
      "Summary": "``True`` for Cygwin."
    },
    {
      "Id": "GHS-MULTI",
      "Summary": "``True`` when using ``Green Hills MULTI`` generator."
    },
    {
      "Id": "IOS",
      "Summary": "Set to ``1`` when the target system (``CMAKE_SYSTEM_NAME``) is ``iOS``."
    },
    {
      "Id": "MINGW",
      "Summary": "``True`` when using MinGW"
    },
    {
      "Id": "MSVC",
      "Summary": "Set to ``true`` when the compiler is some version of Microsoft Visual C++ or another compiler simulating the Visual C++ ``cl`` command-line syntax."
    },
    {
      "Id": "MSVC10",
      "Summary": "Discouraged."
    },
    {
      "Id": "MSVC11",
      "Summary": "Discouraged."
    },
    {
      "Id": "MSVC12",
      "Summary": "Discouraged."
    },
    {
      "Id": "MSVC14",
      "Summary": "Discouraged."
    },
    {
      "Id": "MSVC60",
      "Summary": "Discouraged."
    },
    {
      "Id": "MSVC70",
      "Summary": "Discouraged."
    },
    {
      "Id": "MSVC71",
      "Summary": "Discouraged."
    },
    {
      "Id": "MSVC80",
      "Summary": "Discouraged."
    },
    {
      "Id": "MSVC90",
      "Summary": "Discouraged."
    },
    {
      "Id": "MSVC_IDE",
      "Summary": "``True`` when using the Microsoft Visual C++ IDE."
    },
    {
      "Id": "MSVC_TOOLSET_VERSION",
      "Summary": "The toolset version of Microsoft Visual C/C++ being used if any."
    },
    {
      "Id": "MSVC_VERSION",
      "Summary": "The version of Microsoft Visual C/C++ being used if any."
    },
    {
      "Id": "MSYS",
      "Summary": "``True`` when using the ``MSYS Makefiles`` generator."
    },
    {
      "Id": "UNIX",
      "Summary": "Set to ``True`` when the target system is UNIX or UNIX-like (e.g. ``APPLE`` and ``CYGWIN``)."
    },
    {
      "Id": "WIN32",
      "Summary": "Set to ``True`` when the target system is Windows, including Win64."
    },
    {
      "Id": "WINCE",
      "Summary": "True when the ``CMAKE_SYSTEM_NAME`` variable is set to ``WindowsCE``."
    },
    {
      "Id": "WINDOWS_PHONE",
      "Summary": "True when the ``CMAKE_SYSTEM_NAME`` variable is set to ``WindowsPhone``."
    },
    {
      "Id": "WINDOWS_STORE",
      "Summary": "True when the ``CMAKE_SYSTEM_NAME`` variable is set to ``WindowsStore``."
    },
    {
      "Id": "XCODE",
      "Summary": "``True`` when using ``Xcode`` generator."
    },
    {
      "Id": "XCODE_VERSION",
      "Summary": "Version of Xcode (``Xcode`` generator only)."
    },
    {
      "Id": "CMAKE_AIX_EXPORT_ALL_SYMBOLS",
      "Summary": "Default value for ``AIX_EXPORT_ALL_SYMBOLS`` target property."
    },
    {
      "Id": "CMAKE_ANDROID_ANT_ADDITIONAL_OPTIONS",
      "Summary": "Default value for the ``ANDROID_ANT_ADDITIONAL_OPTIONS`` target property."
    },
    {
      "Id": "CMAKE_ANDROID_API",
      "Summary": "When :`Cross Compiling for Android with NVIDIA Nsight Tegra Visual Studio Edition`, this variable may be set to specify the default value for the ``ANDROID_API`` target property."
    },
    {
      "Id": "CMAKE_ANDROID_API_MIN",
      "Summary": "Default value for the ``ANDROID_API_MIN`` target property."
    },
    {
      "Id": "CMAKE_ANDROID_ARCH",
      "Summary": "When :`Cross Compiling for Android with NVIDIA Nsight Tegra Visual Studio Edition`, this variable may be set to specify the default value for the ``ANDROID_ARCH`` target property."
    },
    {
      "Id": "CMAKE_ANDROID_ARCH_ABI",
      "Summary": "When :`Cross Compiling for Android`, this variable specifies the target architecture and ABI to be used."
    },
    {
      "Id": "CMAKE_ANDROID_ARM_MODE",
      "Summary": "When :`Cross Compiling for Android` and ``CMAKE_ANDROID_ARCH_ABI`` is set to one of the ``armeabi`` architectures, set ``CMAKE_ANDROID_ARM_MODE`` to ``ON`` to target 32-bit ARM processors (``-marm``)."
    },
    {
      "Id": "CMAKE_ANDROID_ARM_NEON",
      "Summary": "When :`Cross Compiling for Android` and ``CMAKE_ANDROID_ARCH_ABI`` is set to ``armeabi-v7a`` set ``CMAKE_ANDROID_ARM_NEON`` to ``ON`` to target ARM NEON devices."
    },
    {
      "Id": "CMAKE_ANDROID_ASSETS_DIRECTORIES",
      "Summary": "Default value for the ``ANDROID_ASSETS_DIRECTORIES`` target property."
    },
    {
      "Id": "CMAKE_ANDROID_EXCEPTIONS",
      "Summary": "When :`Cross Compiling for Android with the NDK`, this variable may be set to specify whether exceptions are enabled."
    },
    {
      "Id": "CMAKE_ANDROID_GUI",
      "Summary": "Default value for the ``ANDROID_GUI`` target property of executables."
    },
    {
      "Id": "CMAKE_ANDROID_JAR_DEPENDENCIES",
      "Summary": "Default value for the ``ANDROID_JAR_DEPENDENCIES`` target property."
    },
    {
      "Id": "CMAKE_ANDROID_JAR_DIRECTORIES",
      "Summary": "Default value for the ``ANDROID_JAR_DIRECTORIES`` target property."
    },
    {
      "Id": "CMAKE_ANDROID_JAVA_SOURCE_DIR",
      "Summary": "Default value for the ``ANDROID_JAVA_SOURCE_DIR`` target property."
    },
    {
      "Id": "CMAKE_ANDROID_NATIVE_LIB_DEPENDENCIES",
      "Summary": "Default value for the ``ANDROID_NATIVE_LIB_DEPENDENCIES`` target property."
    },
    {
      "Id": "CMAKE_ANDROID_NATIVE_LIB_DIRECTORIES",
      "Summary": "Default value for the ``ANDROID_NATIVE_LIB_DIRECTORIES`` target property."
    },
    {
      "Id": "CMAKE_ANDROID_NDK",
      "Summary": "When :`Cross Compiling for Android with the NDK`, this variable holds the absolute path to the root directory of the NDK."
    },
    {
      "Id": "CMAKE_ANDROID_NDK_DEPRECATED_HEADERS",
      "Summary": "When :`Cross Compiling for Android with the NDK`, this variable may be set to specify whether to use the deprecated per-api-level headers instead of the unified headers."
    },
    {
      "Id": "CMAKE_ANDROID_NDK_TOOLCHAIN_HOST_TAG",
      "Summary": "When :`Cross Compiling for Android with the NDK`, this variable provides the NDK's \"host tag\" used to construct the path to prebuilt toolchains that run on the host."
    },
    {
      "Id": "CMAKE_ANDROID_NDK_TOOLCHAIN_VERSION",
      "Summary": "When :`Cross Compiling for Android with the NDK`, this variable may be set to specify the version of the toolchain to be used as the compiler."
    },
    {
      "Id": "CMAKE_ANDROID_PROCESS_MAX",
      "Summary": "Default value for the ``ANDROID_PROCESS_MAX`` target property."
    },
    {
      "Id": "CMAKE_ANDROID_PROGUARD",
      "Summary": "Default value for the ``ANDROID_PROGUARD`` target property."
    },
    {
      "Id": "CMAKE_ANDROID_PROGUARD_CONFIG_PATH",
      "Summary": "Default value for the ``ANDROID_PROGUARD_CONFIG_PATH`` target property."
    },
    {
      "Id": "CMAKE_ANDROID_RTTI",
      "Summary": "When :`Cross Compiling for Android with the NDK`, this variable may be set to specify whether RTTI is enabled."
    },
    {
      "Id": "CMAKE_ANDROID_SECURE_PROPS_PATH",
      "Summary": "Default value for the ``ANDROID_SECURE_PROPS_PATH`` target property."
    },
    {
      "Id": "CMAKE_ANDROID_SKIP_ANT_STEP",
      "Summary": "Default value for the ``ANDROID_SKIP_ANT_STEP`` target property."
    },
    {
      "Id": "CMAKE_ANDROID_STANDALONE_TOOLCHAIN",
      "Summary": "When :`Cross Compiling for Android with a Standalone Toolchain`, this variable holds the absolute path to the root directory of the toolchain."
    },
    {
      "Id": "CMAKE_ANDROID_STL_TYPE",
      "Summary": "When :`Cross Compiling for Android with NVIDIA Nsight Tegra Visual Studio Edition`, this variable may be set to specify the default value for the ``ANDROID_STL_TYPE`` target property."
    },
    {
      "Id": "CMAKE_APPLE_SILICON_PROCESSOR",
      "Summary": "On Apple Silicon hosts running macOS, set this variable to tell CMake what architecture to use for ``CMAKE_HOST_SYSTEM_PROCESSOR``."
    },
    {
      "Id": "CMAKE_ARCHIVE_OUTPUT_DIRECTORY",
      "Summary": "Where to put all the :`ARCHIVE <Archive Output Artifacts>` target files when built."
    },
    {
      "Id": "CMAKE_ARCHIVE_OUTPUT_DIRECTORY_<CONFIG>",
      "Summary": "Where to put all the :`ARCHIVE <Archive Output Artifacts>` target files when built for a specific configuration."
    },
    {
      "Id": "CMAKE_AUTOGEN_ORIGIN_DEPENDS",
      "Summary": "Switch for forwarding origin target dependencies to the corresponding ``_autogen`` targets."
    },
    {
      "Id": "CMAKE_AUTOGEN_PARALLEL",
      "Summary": "Number of parallel ``moc`` or ``uic`` processes to start when using ``AUTOMOC`` and ``AUTOUIC``."
    },
    {
      "Id": "CMAKE_AUTOGEN_VERBOSE",
      "Summary": "Sets the verbosity of ``AUTOMOC``, ``AUTOUIC`` and ``AUTORCC``."
    },
    {
      "Id": "CMAKE_AUTOMOC",
      "Summary": "Whether to handle ``moc`` automatically for Qt targets."
    },
    {
      "Id": "CMAKE_AUTOMOC_COMPILER_PREDEFINES",
      "Summary": "This variable is used to initialize the ``AUTOMOC_COMPILER_PREDEFINES`` property on all the targets."
    },
    {
      "Id": "CMAKE_AUTOMOC_DEPEND_FILTERS",
      "Summary": "Filter definitions used by ``CMAKE_AUTOMOC`` to extract file names from source code as additional dependencies for the ``moc`` file."
    },
    {
      "Id": "CMAKE_AUTOMOC_MACRO_NAMES",
      "Summary": ":`Semicolon-separated list <CMake Language Lists>` list of macro names used by ``CMAKE_AUTOMOC`` to determine if a C++ file needs to be processed by ``moc``."
    },
    {
      "Id": "CMAKE_AUTOMOC_MOC_OPTIONS",
      "Summary": "Additional options for ``moc`` when using ``CMAKE_AUTOMOC``."
    },
    {
      "Id": "CMAKE_AUTOMOC_PATH_PREFIX",
      "Summary": "Whether to generate the ``-p`` path prefix option for ``moc`` on ``AUTOMOC`` enabled Qt targets."
    },
    {
      "Id": "CMAKE_AUTORCC",
      "Summary": "Whether to handle ``rcc`` automatically for Qt targets."
    },
    {
      "Id": "CMAKE_AUTORCC_OPTIONS",
      "Summary": "Additional options for ``rcc`` when using ``CMAKE_AUTORCC``."
    },
    {
      "Id": "CMAKE_AUTOUIC",
      "Summary": "Whether to handle ``uic`` automatically for Qt targets."
    },
    {
      "Id": "CMAKE_AUTOUIC_OPTIONS",
      "Summary": "Additional options for ``uic`` when using ``CMAKE_AUTOUIC``."
    },
    {
      "Id": "CMAKE_AUTOUIC_SEARCH_PATHS",
      "Summary": "Search path list used by ``CMAKE_AUTOUIC`` to find included ``.ui`` files."
    },
    {
      "Id": "CMAKE_BUILD_RPATH",
      "Summary": ":`Semicolon-separated list <CMake Language Lists>` specifying runtime path (``RPATH``) entries to add to binaries linked in the build tree (for platforms that support it)."
    },
    {
      "Id": "CMAKE_BUILD_RPATH_USE_ORIGIN",
      "Summary": "Whether to use relative paths for the build ``RPATH``."
    },
    {
      "Id": "CMAKE_BUILD_WITH_INSTALL_NAME_DIR",
      "Summary": "Whether to use ``INSTALL_NAME_DIR`` on targets in the build tree."
    },
    {
      "Id": "CMAKE_BUILD_WITH_INSTALL_RPATH",
      "Summary": "Use the install path for the ``RPATH``."
    },
    {
      "Id": "CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY",
      "Summary": "Output directory for MS debug symbol ``.pdb`` files generated by the compiler while building source files."
    },
    {
      "Id": "CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY_<CONFIG>",
      "Summary": "Per-configuration output directory for MS debug symbol ``.pdb`` files generated by the compiler while building source files."
    },
    {
      "Id": "CMAKE_<CONFIG>_POSTFIX",
      "Summary": "Default filename postfix for libraries under configuration ``<CONFIG>``."
    },
    {
      "Id": "CMAKE_CROSS_CONFIGS",
      "Summary": "Specifies a :`semicolon-separated list <CMake Language Lists>` of configurations available from all ``build-<Config>.ninja`` files in the ``Ninja Multi-Config`` generator."
    },
    {
      "Id": "CMAKE_CTEST_ARGUMENTS",
      "Summary": "Set this to a :`semicolon-separated list <CMake Language Lists>` of command-line arguments to pass to ``ctest(1)`` when running tests through the ``test`` (or ``RUN_TESTS``) target of the generated build system."
    },
    {
      "Id": "CMAKE_CUDA_RESOLVE_DEVICE_SYMBOLS",
      "Summary": "Default value for ``CUDA_RESOLVE_DEVICE_SYMBOLS`` target property."
    },
    {
      "Id": "CMAKE_CUDA_RUNTIME_LIBRARY",
      "Summary": "Select the CUDA runtime library for use when compiling and linking CUDA."
    },
    {
      "Id": "CMAKE_CUDA_SEPARABLE_COMPILATION",
      "Summary": "Default value for ``CUDA_SEPARABLE_COMPILATION`` target property."
    },
    {
      "Id": "CMAKE_DEBUG_POSTFIX",
      "Summary": "See variable ``CMAKE_<CONFIG>_POSTFIX``."
    },
    {
      "Id": "CMAKE_DEFAULT_BUILD_TYPE",
      "Summary": "Specifies the configuration to use by default in a ``build.ninja`` file in the ``Ninja Multi-Config`` generator."
    },
    {
      "Id": "CMAKE_DEFAULT_CONFIGS",
      "Summary": "Specifies a :`semicolon-separated list <CMake Language Lists>` of configurations to build for a target in ``build.ninja`` if no ``:<Config>`` suffix is specified in the ``Ninja Multi-Config`` generator."
    },
    {
      "Id": "CMAKE_DISABLE_PRECOMPILE_HEADERS",
      "Summary": "Default value for ``DISABLE_PRECOMPILE_HEADERS`` of targets."
    },
    {
      "Id": "CMAKE_DEPENDS_USE_COMPILER",
      "Summary": "For the :`Makefile Generators`, source dependencies are now, for a selection of compilers, generated by the compiler itself."
    },
    {
      "Id": "CMAKE_ENABLE_EXPORTS",
      "Summary": "Specify whether executables export symbols for loadable modules."
    },
    {
      "Id": "CMAKE_EXE_LINKER_FLAGS",
      "Summary": "Linker flags to be used to create executables."
    },
    {
      "Id": "CMAKE_EXE_LINKER_FLAGS_<CONFIG>",
      "Summary": "Flags to be used when linking an executable."
    },
    {
      "Id": "CMAKE_EXE_LINKER_FLAGS_<CONFIG>_INIT",
      "Summary": "Value used to initialize the ``CMAKE_EXE_LINKER_FLAGS_<CONFIG>`` cache entry the first time a build tree is configured."
    },
    {
      "Id": "CMAKE_EXE_LINKER_FLAGS_INIT",
      "Summary": "Value used to initialize the ``CMAKE_EXE_LINKER_FLAGS`` cache entry the first time a build tree is configured."
    },
    {
      "Id": "CMAKE_FOLDER",
      "Summary": "Set the folder name."
    },
    {
      "Id": "CMAKE_FRAMEWORK",
      "Summary": "Default value for ``FRAMEWORK`` of targets."
    },
    {
      "Id": "CMAKE_FRAMEWORK_MULTI_CONFIG_POSTFIX_<CONFIG>",
      "Summary": "Default framework filename postfix under configuration ``<CONFIG>`` when using a multi-config generator."
    },
    {
      "Id": "CMAKE_Fortran_FORMAT",
      "Summary": "Set to ``FIXED`` or ``FREE`` to indicate the Fortran source layout."
    },
    {
      "Id": "CMAKE_Fortran_MODULE_DIRECTORY",
      "Summary": "Fortran module output directory."
    },
    {
      "Id": "CMAKE_Fortran_PREPROCESS",
      "Summary": "Default value for ``Fortran_PREPROCESS`` of targets."
    },
    {
      "Id": "CMAKE_GHS_NO_SOURCE_GROUP_FILE",
      "Summary": "``ON`` / ``OFF`` boolean to control if the project file for a target should be one single file or multiple files."
    },
    {
      "Id": "CMAKE_GLOBAL_AUTOGEN_TARGET",
      "Summary": "Switch to enable generation of a global ``autogen`` target."
    },
    {
      "Id": "CMAKE_GLOBAL_AUTOGEN_TARGET_NAME",
      "Summary": "Change the name of the global ``autogen`` target."
    },
    {
      "Id": "CMAKE_GLOBAL_AUTORCC_TARGET",
      "Summary": "Switch to enable generation of a global ``autorcc`` target."
    },
    {
      "Id": "CMAKE_GLOBAL_AUTORCC_TARGET_NAME",
      "Summary": "Change the name of the global ``autorcc`` target."
    },
    {
      "Id": "CMAKE_GNUtoMS",
      "Summary": "Convert GNU import libraries (``.dll.a``) to MS format (``.lib``)."
    },
    {
      "Id": "CMAKE_INCLUDE_CURRENT_DIR",
      "Summary": "Automatically add the current source and build directories to the include path."
    },
    {
      "Id": "CMAKE_INCLUDE_CURRENT_DIR_IN_INTERFACE",
      "Summary": "Automatically add the current source and build directories to the ``INTERFACE_INCLUDE_DIRECTORIES`` target property."
    },
    {
      "Id": "CMAKE_INSTALL_NAME_DIR",
      "Summary": "Directory name for installed targets on Apple platforms."
    },
    {
      "Id": "CMAKE_INSTALL_REMOVE_ENVIRONMENT_RPATH",
      "Summary": "Sets the default for whether toolchain-defined rpaths should be removed during installation."
    },
    {
      "Id": "CMAKE_INSTALL_RPATH",
      "Summary": "The rpath to use for installed targets."
    },
    {
      "Id": "CMAKE_INSTALL_RPATH_USE_LINK_PATH",
      "Summary": "Add paths to linker search and installed rpath."
    },
    {
      "Id": "CMAKE_INTERPROCEDURAL_OPTIMIZATION",
      "Summary": "Default value for ``INTERPROCEDURAL_OPTIMIZATION`` of targets."
    },
    {
      "Id": "CMAKE_INTERPROCEDURAL_OPTIMIZATION_<CONFIG>",
      "Summary": "Default value for ``INTERPROCEDURAL_OPTIMIZATION_<CONFIG>`` of targets."
    },
    {
      "Id": "CMAKE_IOS_INSTALL_COMBINED",
      "Summary": "Default value for ``IOS_INSTALL_COMBINED`` of targets."
    },
    {
      "Id": "CMAKE_<LANG>_CLANG_TIDY",
      "Summary": "Default value for ``<LANG>_CLANG_TIDY`` target property when ``<LANG>`` is ``C``, ``CXX``, ``OBJC`` or ``OBJCXX``."
    },
    {
      "Id": "CMAKE_<LANG>_COMPILER_LAUNCHER",
      "Summary": "Default value for ``<LANG>_COMPILER_LAUNCHER`` target property."
    },
    {
      "Id": "CMAKE_<LANG>_CPPCHECK",
      "Summary": "Default value for ``<LANG>_CPPCHECK`` target property."
    },
    {
      "Id": "CMAKE_<LANG>_CPPLINT",
      "Summary": "Default value for ``<LANG>_CPPLINT`` target property."
    },
    {
      "Id": "CMAKE_<LANG>_INCLUDE_WHAT_YOU_USE",
      "Summary": "Default value for ``<LANG>_INCLUDE_WHAT_YOU_USE`` target property."
    },
    {
      "Id": "CMAKE_<LANG>_LINKER_LAUNCHER",
      "Summary": "Default value for ``<LANG>_LINKER_LAUNCHER`` target property."
    },
    {
      "Id": "CMAKE_<LANG>_LINK_LIBRARY_FILE_FLAG",
      "Summary": "Language-specific flag to be used to link a library specified by a path to its file."
    },
    {
      "Id": "CMAKE_<LANG>_LINK_LIBRARY_FLAG",
      "Summary": "Flag to be used to link a library into a shared library or executable."
    },
    {
      "Id": "CMAKE_<LANG>_LINK_WHAT_YOU_USE_FLAG",
      "Summary": "Linker flag to be used to configure linker so that all specified libraries on the command line will be linked into the target."
    },
    {
      "Id": "CMAKE_<LANG>_VISIBILITY_PRESET",
      "Summary": "Default value for the ``<LANG>_VISIBILITY_PRESET`` target property when a target is created."
    },
    {
      "Id": "CMAKE_LIBRARY_OUTPUT_DIRECTORY",
      "Summary": "Where to put all the :`LIBRARY <Library Output Artifacts>` target files when built."
    },
    {
      "Id": "CMAKE_LIBRARY_OUTPUT_DIRECTORY_<CONFIG>",
      "Summary": "Where to put all the :`LIBRARY <Library Output Artifacts>` target files when built for a specific configuration."
    },
    {
      "Id": "CMAKE_LIBRARY_PATH_FLAG",
      "Summary": "The flag to be used to add a library search path to a compiler."
    },
    {
      "Id": "CMAKE_LINK_DEF_FILE_FLAG",
      "Summary": "Linker flag to be used to specify a ``.def`` file for dll creation."
    },
    {
      "Id": "CMAKE_LINK_DEPENDS_NO_SHARED",
      "Summary": "Whether to skip link dependencies on shared library files."
    },
    {
      "Id": "CMAKE_LINK_INTERFACE_LIBRARIES",
      "Summary": "Default value for ``LINK_INTERFACE_LIBRARIES`` of targets."
    },
    {
      "Id": "CMAKE_LINK_LIBRARY_FILE_FLAG",
      "Summary": "Flag to be used to link a library specified by a path to its file."
    },
    {
      "Id": "CMAKE_LINK_LIBRARY_FLAG",
      "Summary": "Flag to be used to link a library into an executable."
    },
    {
      "Id": "CMAKE_LINK_WHAT_YOU_USE",
      "Summary": "Default value for ``LINK_WHAT_YOU_USE`` target property."
    },
    {
      "Id": "CMAKE_LINK_WHAT_YOU_USE_CHECK",
      "Summary": "Defines the command executed after the link step to check libraries usage."
    },
    {
      "Id": "CMAKE_MACOSX_BUNDLE",
      "Summary": "Default value for ``MACOSX_BUNDLE`` of targets."
    },
    {
      "Id": "CMAKE_MACOSX_RPATH",
      "Summary": "Whether to use rpaths on macOS and iOS."
    },
    {
      "Id": "CMAKE_MAP_IMPORTED_CONFIG_<CONFIG>",
      "Summary": "Default value for ``MAP_IMPORTED_CONFIG_<CONFIG>`` of targets."
    },
    {
      "Id": "CMAKE_MODULE_LINKER_FLAGS",
      "Summary": "Linker flags to be used to create modules."
    },
    {
      "Id": "CMAKE_MODULE_LINKER_FLAGS_<CONFIG>",
      "Summary": "Flags to be used when linking a module."
    },
    {
      "Id": "CMAKE_MODULE_LINKER_FLAGS_<CONFIG>_INIT",
      "Summary": "Value used to initialize the ``CMAKE_MODULE_LINKER_FLAGS_<CONFIG>`` cache entry the first time a build tree is configured."
    },
    {
      "Id": "CMAKE_MODULE_LINKER_FLAGS_INIT",
      "Summary": "Value used to initialize the ``CMAKE_MODULE_LINKER_FLAGS`` cache entry the first time a build tree is configured."
    },
    {
      "Id": "CMAKE_MSVCIDE_RUN_PATH",
      "Summary": "Extra PATH locations that should be used when executing ``add_custom_command()`` or ``add_custom_target()`` when using the ``Visual Studio 9 2008`` (or above) generator."
    },
    {
      "Id": "CMAKE_MSVC_RUNTIME_LIBRARY",
      "Summary": "Select the MSVC runtime library for use by compilers targeting the MSVC ABI."
    },
    {
      "Id": "CMAKE_NINJA_OUTPUT_PATH_PREFIX",
      "Summary": "Set output files path prefix for the ``Ninja`` generator."
    },
    {
      "Id": "CMAKE_NO_BUILTIN_CHRPATH",
      "Summary": "Do not use the builtin binary editor to fix runtime library search paths on installation."
    },
    {
      "Id": "CMAKE_NO_SYSTEM_FROM_IMPORTED",
      "Summary": "Default value for ``NO_SYSTEM_FROM_IMPORTED`` of targets."
    },
    {
      "Id": "CMAKE_OPTIMIZE_DEPENDENCIES",
      "Summary": "Initializes the ``OPTIMIZE_DEPENDENCIES`` target property."
    },
    {
      "Id": "CMAKE_OSX_ARCHITECTURES",
      "Summary": "Target specific architectures for macOS and iOS."
    },
    {
      "Id": "CMAKE_OSX_DEPLOYMENT_TARGET",
      "Summary": "Specify the minimum version of the target platform (e.g. macOS or iOS) on which the target binaries are to be deployed."
    },
    {
      "Id": "CMAKE_OSX_SYSROOT",
      "Summary": "Specify the location or name of the macOS platform SDK to be used."
    },
    {
      "Id": "CMAKE_PCH_WARN_INVALID",
      "Summary": "This variable is used to initialize the ``PCH_WARN_INVALID`` property of targets when they are created."
    },
    {
      "Id": "CMAKE_PCH_INSTANTIATE_TEMPLATES",
      "Summary": "This variable is used to initialize the ``PCH_INSTANTIATE_TEMPLATES`` property of targets when they are created."
    },
    {
      "Id": "CMAKE_PDB_OUTPUT_DIRECTORY",
      "Summary": "Output directory for MS debug symbol ``.pdb`` files generated by the linker for executable and shared library targets."
    },
    {
      "Id": "CMAKE_PDB_OUTPUT_DIRECTORY_<CONFIG>",
      "Summary": "Per-configuration output directory for MS debug symbol ``.pdb`` files generated by the linker for executable and shared library targets."
    },
    {
      "Id": "CMAKE_POSITION_INDEPENDENT_CODE",
      "Summary": "Default value for ``POSITION_INDEPENDENT_CODE`` of targets."
    },
    {
      "Id": "CMAKE_RUNTIME_OUTPUT_DIRECTORY",
      "Summary": "Where to put all the :`RUNTIME <Runtime Output Artifacts>` target files when built."
    },
    {
      "Id": "CMAKE_RUNTIME_OUTPUT_DIRECTORY_<CONFIG>",
      "Summary": "Where to put all the :`RUNTIME <Runtime Output Artifacts>` target files when built for a specific configuration."
    },
    {
      "Id": "CMAKE_SHARED_LINKER_FLAGS",
      "Summary": "Linker flags to be used to create shared libraries."
    },
    {
      "Id": "CMAKE_SHARED_LINKER_FLAGS_<CONFIG>",
      "Summary": "Flags to be used when linking a shared library."
    },
    {
      "Id": "CMAKE_SHARED_LINKER_FLAGS_<CONFIG>_INIT",
      "Summary": "Value used to initialize the ``CMAKE_SHARED_LINKER_FLAGS_<CONFIG>`` cache entry the first time a build tree is configured."
    },
    {
      "Id": "CMAKE_SHARED_LINKER_FLAGS_INIT",
      "Summary": "Value used to initialize the ``CMAKE_SHARED_LINKER_FLAGS`` cache entry the first time a build tree is configured."
    },
    {
      "Id": "CMAKE_SKIP_BUILD_RPATH",
      "Summary": "Do not include RPATHs in the build tree."
    },
    {
      "Id": "CMAKE_SKIP_INSTALL_RPATH",
      "Summary": "Do not include RPATHs in the install tree."
    },
    {
      "Id": "CMAKE_STATIC_LINKER_FLAGS",
      "Summary": "Flags to be used to create static libraries."
    },
    {
      "Id": "CMAKE_STATIC_LINKER_FLAGS_<CONFIG>",
      "Summary": "Flags to be used to create static libraries."
    },
    {
      "Id": "CMAKE_STATIC_LINKER_FLAGS_<CONFIG>_INIT",
      "Summary": "Value used to initialize the ``CMAKE_STATIC_LINKER_FLAGS_<CONFIG>`` cache entry the first time a build tree is configured."
    },
    {
      "Id": "CMAKE_STATIC_LINKER_FLAGS_INIT",
      "Summary": "Value used to initialize the ``CMAKE_STATIC_LINKER_FLAGS`` cache entry the first time a build tree is configured."
    },
    {
      "Id": "CMAKE_TRY_COMPILE_CONFIGURATION",
      "Summary": "Build configuration used for ``try_compile()`` and ``try_run()`` projects."
    },
    {
      "Id": "CMAKE_TRY_COMPILE_PLATFORM_VARIABLES",
      "Summary": "List of variables that the ``try_compile()`` command source file signature must propagate into the test project in order to target the same platform as the host project."
    },
    {
      "Id": "CMAKE_TRY_COMPILE_TARGET_TYPE",
      "Summary": "Type of target generated for ``try_compile()`` calls using the source file signature."
    },
    {
      "Id": "CMAKE_UNITY_BUILD",
      "Summary": "This variable is used to initialize the ``UNITY_BUILD`` property of targets when they are created."
    },
    {
      "Id": "CMAKE_UNITY_BUILD_BATCH_SIZE",
      "Summary": "This variable is used to initialize the ``UNITY_BUILD_BATCH_SIZE`` property of targets when they are created."
    },
    {
      "Id": "CMAKE_UNITY_BUILD_UNIQUE_ID",
      "Summary": "This variable is used to initialize the ``UNITY_BUILD_UNIQUE_ID`` property of targets when they are created."
    },
    {
      "Id": "CMAKE_USE_RELATIVE_PATHS",
      "Summary": "This variable has no effect."
    },
    {
      "Id": "CMAKE_VISIBILITY_INLINES_HIDDEN",
      "Summary": "Default value for the ``VISIBILITY_INLINES_HIDDEN`` target property when a target is created."
    },
    {
      "Id": "CMAKE_VS_GLOBALS",
      "Summary": "List of ``Key=Value`` records to be set per target as target properties ``VS_GLOBAL_<variable>`` with ``variable=Key`` and value ``Value``."
    },
    {
      "Id": "CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD",
      "Summary": "Include ``INSTALL`` target to default build."
    },
    {
      "Id": "CMAKE_VS_INCLUDE_PACKAGE_TO_DEFAULT_BUILD",
      "Summary": "Include ``PACKAGE`` target to default build."
    },
    {
      "Id": "CMAKE_VS_JUST_MY_CODE_DEBUGGING",
      "Summary": "Enable Just My Code with Visual Studio debugger."
    },
    {
      "Id": "CMAKE_VS_SDK_EXCLUDE_DIRECTORIES",
      "Summary": "This variable allows to override Visual Studio default Exclude Directories."
    },
    {
      "Id": "CMAKE_VS_SDK_EXECUTABLE_DIRECTORIES",
      "Summary": "This variable allows to override Visual Studio default Executable Directories."
    },
    {
      "Id": "CMAKE_VS_SDK_INCLUDE_DIRECTORIES",
      "Summary": "This variable allows to override Visual Studio default Include Directories."
    },
    {
      "Id": "CMAKE_VS_SDK_LIBRARY_DIRECTORIES",
      "Summary": "This variable allows to override Visual Studio default Library Directories."
    },
    {
      "Id": "CMAKE_VS_SDK_LIBRARY_WINRT_DIRECTORIES",
      "Summary": "This variable allows to override Visual Studio default Library WinRT Directories."
    },
    {
      "Id": "CMAKE_VS_SDK_REFERENCE_DIRECTORIES",
      "Summary": "This variable allows to override Visual Studio default Reference Directories."
    },
    {
      "Id": "CMAKE_VS_SDK_SOURCE_DIRECTORIES",
      "Summary": "This variable allows to override Visual Studio default Source Directories."
    },
    {
      "Id": "CMAKE_VS_WINRT_BY_DEFAULT",
      "Summary": "Inform :`Visual Studio Generators` for VS 2010 and above that the target platform enables WinRT compilation by default and it needs to be explicitly disabled if ``/ZW`` or ``VS_WINRT_COMPONENT`` is omitted (as opposed to enabling it when either of those options is present)"
    },
    {
      "Id": "CMAKE_WIN32_EXECUTABLE",
      "Summary": "Default value for ``WIN32_EXECUTABLE`` of targets."
    },
    {
      "Id": "CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS",
      "Summary": "Default value for ``WINDOWS_EXPORT_ALL_SYMBOLS`` target property."
    },
    {
      "Id": "CMAKE_XCODE_ATTRIBUTE_<an-attribute>",
      "Summary": "Set Xcode target attributes directly."
    },
    {
      "Id": "EXECUTABLE_OUTPUT_PATH",
      "Summary": "Old executable location variable."
    },
    {
      "Id": "LIBRARY_OUTPUT_PATH",
      "Summary": "Old library location variable."
    },
    {
      "Id": "CMAKE_COMPILER_IS_GNUCC",
      "Summary": "True if the ``C`` compiler is GNU."
    },
    {
      "Id": "CMAKE_COMPILER_IS_GNUCXX",
      "Summary": "True if the C++ (``CXX``) compiler is GNU."
    },
    {
      "Id": "CMAKE_COMPILER_IS_GNUG77",
      "Summary": "True if the ``Fortran`` compiler is GNU."
    },
    {
      "Id": "CMAKE_CUDA_ARCHITECTURES",
      "Summary": "Default value for ``CUDA_ARCHITECTURES`` property of targets."
    },
    {
      "Id": "CMAKE_CUDA_COMPILE_FEATURES",
      "Summary": "List of features known to the CUDA compiler"
    },
    {
      "Id": "CMAKE_CUDA_EXTENSIONS",
      "Summary": "Default value for ``CUDA_EXTENSIONS`` target property if set when a target is created."
    },
    {
      "Id": "CMAKE_CUDA_HOST_COMPILER",
      "Summary": "When ``CMAKE_CUDA_COMPILER_ID`` is ``NVIDIA``, ``CMAKE_CUDA_HOST_COMPILER`` selects the compiler executable to use when compiling host code for ``CUDA`` language files."
    },
    {
      "Id": "CMAKE_CUDA_STANDARD",
      "Summary": "Default value for ``CUDA_STANDARD`` target property if set when a target is created."
    },
    {
      "Id": "CMAKE_CUDA_STANDARD_REQUIRED",
      "Summary": "Default value for ``CUDA_STANDARD_REQUIRED`` target property if set when a target is created."
    },
    {
      "Id": "CMAKE_CUDA_TOOLKIT_INCLUDE_DIRECTORIES",
      "Summary": "When the ``CUDA`` language has been enabled, this provides a :`semicolon-separated list <CMake Language Lists>` of include directories provided by the CUDA Toolkit."
    },
    {
      "Id": "CMAKE_CXX_COMPILE_FEATURES",
      "Summary": "List of features known to the C++ compiler"
    },
    {
      "Id": "CMAKE_CXX_EXTENSIONS",
      "Summary": "Default value for ``CXX_EXTENSIONS`` target property if set when a target is created."
    },
    {
      "Id": "CMAKE_CXX_STANDARD",
      "Summary": "Default value for ``CXX_STANDARD`` target property if set when a target is created."
    },
    {
      "Id": "CMAKE_CXX_STANDARD_REQUIRED",
      "Summary": "Default value for ``CXX_STANDARD_REQUIRED`` target property if set when a target is created."
    },
    {
      "Id": "CMAKE_C_COMPILE_FEATURES",
      "Summary": "List of features known to the C compiler"
    },
    {
      "Id": "CMAKE_C_EXTENSIONS",
      "Summary": "Default value for ``C_EXTENSIONS`` target property if set when a target is created."
    },
    {
      "Id": "CMAKE_C_STANDARD",
      "Summary": "Default value for ``C_STANDARD`` target property if set when a target is created."
    },
    {
      "Id": "CMAKE_C_STANDARD_REQUIRED",
      "Summary": "Default value for ``C_STANDARD_REQUIRED`` target property if set when a target is created."
    },
    {
      "Id": "CMAKE_Fortran_MODDIR_DEFAULT",
      "Summary": "Fortran default module output directory."
    },
    {
      "Id": "CMAKE_Fortran_MODDIR_FLAG",
      "Summary": "Fortran flag for module output directory."
    },
    {
      "Id": "CMAKE_Fortran_MODOUT_FLAG",
      "Summary": "Fortran flag to enable module output."
    },
    {
      "Id": "CMAKE_HIP_ARCHITECTURES",
      "Summary": "Default value for ``HIP_ARCHITECTURES`` property of targets."
    },
    {
      "Id": "CMAKE_HIP_EXTENSIONS",
      "Summary": "Default value for ``HIP_EXTENSIONS`` target property if set when a target is created."
    },
    {
      "Id": "CMAKE_HIP_STANDARD",
      "Summary": "Default value for ``HIP_STANDARD`` target property if set when a target is created."
    },
    {
      "Id": "CMAKE_HIP_STANDARD_REQUIRED",
      "Summary": "Default value for ``HIP_STANDARD_REQUIRED`` target property if set when a target is created."
    },
    {
      "Id": "CMAKE_ISPC_HEADER_DIRECTORY",
      "Summary": "ISPC generated header output directory."
    },
    {
      "Id": "CMAKE_ISPC_HEADER_SUFFIX",
      "Summary": "Output suffix to be used for ISPC generated headers."
    },
    {
      "Id": "CMAKE_ISPC_INSTRUCTION_SETS",
      "Summary": "Default value for ``ISPC_INSTRUCTION_SETS`` property of targets."
    },
    {
      "Id": "CMAKE_<LANG>_ANDROID_TOOLCHAIN_MACHINE",
      "Summary": "When :`Cross Compiling for Android` this variable contains the toolchain binutils machine name (e.g. ``gcc -dumpmachine``)."
    },
    {
      "Id": "CMAKE_<LANG>_ANDROID_TOOLCHAIN_PREFIX",
      "Summary": "When :`Cross Compiling for Android` this variable contains the absolute path prefixing the toolchain GNU compiler and its binutils."
    },
    {
      "Id": "CMAKE_<LANG>_ANDROID_TOOLCHAIN_SUFFIX",
      "Summary": "When :`Cross Compiling for Android` this variable contains the host platform suffix of the toolchain GNU compiler and its binutils."
    },
    {
      "Id": "CMAKE_<LANG>_ARCHIVE_APPEND",
      "Summary": "Rule variable to append to a static archive."
    },
    {
      "Id": "CMAKE_<LANG>_ARCHIVE_CREATE",
      "Summary": "Rule variable to create a new static archive."
    },
    {
      "Id": "CMAKE_<LANG>_ARCHIVE_FINISH",
      "Summary": "Rule variable to finish an existing static archive."
    },
    {
      "Id": "CMAKE_<LANG>_BYTE_ORDER",
      "Summary": "Byte order of ``<LANG>`` compiler target architecture, if known."
    },
    {
      "Id": "CMAKE_<LANG>_COMPILER",
      "Summary": "The full path to the compiler for ``LANG``."
    },
    {
      "Id": "CMAKE_<LANG>_COMPILER_EXTERNAL_TOOLCHAIN",
      "Summary": "The external toolchain for cross-compiling, if supported."
    },
    {
      "Id": "CMAKE_<LANG>_COMPILER_ID",
      "Summary": "Compiler identification string."
    },
    {
      "Id": "CMAKE_<LANG>_COMPILER_LOADED",
      "Summary": "Defined to true if the language is enabled."
    },
    {
      "Id": "CMAKE_<LANG>_COMPILER_PREDEFINES_COMMAND",
      "Summary": "Command that outputs the compiler pre definitions."
    },
    {
      "Id": "CMAKE_<LANG>_COMPILER_TARGET",
      "Summary": "The target for cross-compiling, if supported."
    },
    {
      "Id": "CMAKE_<LANG>_COMPILER_VERSION",
      "Summary": "Compiler version string."
    },
    {
      "Id": "CMAKE_<LANG>_COMPILE_OBJECT",
      "Summary": "Rule variable to compile a single object file."
    },
    {
      "Id": "CMAKE_<LANG>_CREATE_SHARED_LIBRARY",
      "Summary": "Rule variable to create a shared library."
    },
    {
      "Id": "CMAKE_<LANG>_CREATE_SHARED_MODULE",
      "Summary": "Rule variable to create a shared module."
    },
    {
      "Id": "CMAKE_<LANG>_CREATE_STATIC_LIBRARY",
      "Summary": "Rule variable to create a static library."
    },
    {
      "Id": "CMAKE_<LANG>_EXTENSIONS",
      "Summary": "The variations are:"
    },
    {
      "Id": "CMAKE_<LANG>_EXTENSIONS_DEFAULT",
      "Summary": "Compiler's default extensions mode."
    },
    {
      "Id": "CMAKE_<LANG>_FLAGS",
      "Summary": "Flags for all build types."
    },
    {
      "Id": "CMAKE_<LANG>_FLAGS_<CONFIG>",
      "Summary": "Flags for language ``<LANG>`` when building for the ``<CONFIG>`` configuration."
    },
    {
      "Id": "CMAKE_<LANG>_FLAGS_<CONFIG>_INIT",
      "Summary": "Value used to initialize the ``CMAKE_<LANG>_FLAGS_<CONFIG>`` cache entry the first time a build tree is configured for language ``<LANG>``."
    },
    {
      "Id": "CMAKE_<LANG>_FLAGS_DEBUG",
      "Summary": "This variable is the ``Debug`` variant of the ``CMAKE_<LANG>_FLAGS_<CONFIG>`` variable."
    },
    {
      "Id": "CMAKE_<LANG>_FLAGS_DEBUG_INIT",
      "Summary": "This variable is the ``Debug`` variant of the ``CMAKE_<LANG>_FLAGS_<CONFIG>_INIT`` variable."
    },
    {
      "Id": "CMAKE_<LANG>_FLAGS_INIT",
      "Summary": "Value used to initialize the ``CMAKE_<LANG>_FLAGS`` cache entry the first time a build tree is configured for language ``<LANG>``."
    },
    {
      "Id": "CMAKE_<LANG>_FLAGS_MINSIZEREL",
      "Summary": "This variable is the ``MinSizeRel`` variant of the ``CMAKE_<LANG>_FLAGS_<CONFIG>`` variable."
    },
    {
      "Id": "CMAKE_<LANG>_FLAGS_MINSIZEREL_INIT",
      "Summary": "This variable is the ``MinSizeRel`` variant of the ``CMAKE_<LANG>_FLAGS_<CONFIG>_INIT`` variable."
    },
    {
      "Id": "CMAKE_<LANG>_FLAGS_RELEASE",
      "Summary": "This variable is the ``Release`` variant of the ``CMAKE_<LANG>_FLAGS_<CONFIG>`` variable."
    },
    {
      "Id": "CMAKE_<LANG>_FLAGS_RELEASE_INIT",
      "Summary": "This variable is the ``Release`` variant of the ``CMAKE_<LANG>_FLAGS_<CONFIG>_INIT`` variable."
    },
    {
      "Id": "CMAKE_<LANG>_FLAGS_RELWITHDEBINFO",
      "Summary": "This variable is the ``RelWithDebInfo`` variant of the ``CMAKE_<LANG>_FLAGS_<CONFIG>`` variable."
    },
    {
      "Id": "CMAKE_<LANG>_FLAGS_RELWITHDEBINFO_INIT",
      "Summary": "This variable is the ``RelWithDebInfo`` variant of the ``CMAKE_<LANG>_FLAGS_<CONFIG>_INIT`` variable."
    },
    {
      "Id": "CMAKE_<LANG>_IGNORE_EXTENSIONS",
      "Summary": "File extensions that should be ignored by the build."
    },
    {
      "Id": "CMAKE_<LANG>_IMPLICIT_INCLUDE_DIRECTORIES",
      "Summary": "Directories implicitly searched by the compiler for header files."
    },
    {
      "Id": "CMAKE_<LANG>_IMPLICIT_LINK_DIRECTORIES",
      "Summary": "Implicit linker search path detected for language ``<LANG>``."
    },
    {
      "Id": "CMAKE_<LANG>_IMPLICIT_LINK_FRAMEWORK_DIRECTORIES",
      "Summary": "Implicit linker framework search path detected for language ``<LANG>``."
    },
    {
      "Id": "CMAKE_<LANG>_IMPLICIT_LINK_LIBRARIES",
      "Summary": "Implicit link libraries and flags detected for language ``<LANG>``."
    },
    {
      "Id": "CMAKE_<LANG>_LIBRARY_ARCHITECTURE",
      "Summary": "Target architecture library directory name detected for ``<LANG>``."
    },
    {
      "Id": "CMAKE_<LANG>_LINK_EXECUTABLE",
      "Summary": "Rule variable to link an executable."
    },
    {
      "Id": "CMAKE_<LANG>_LINKER_PREFERENCE",
      "Summary": "Preference value for linker language selection."
    },
    {
      "Id": "CMAKE_<LANG>_LINKER_PREFERENCE_PROPAGATES",
      "Summary": "True if ``CMAKE_<LANG>_LINKER_PREFERENCE`` propagates across targets."
    },
    {
      "Id": "CMAKE_<LANG>_LINKER_WRAPPER_FLAG",
      "Summary": "Defines the syntax of compiler driver option to pass options to the linker tool."
    },
    {
      "Id": "CMAKE_<LANG>_LINKER_WRAPPER_FLAG_SEP",
      "Summary": "This variable is used with ``CMAKE_<LANG>_LINKER_WRAPPER_FLAG`` variable to format ``LINKER:`` prefix in the link options (see ``add_link_options()`` and ``target_link_options()``)."
    },
    {
      "Id": "CMAKE_<LANG>_OUTPUT_EXTENSION",
      "Summary": "Extension for the output of a compile for a single file."
    },
    {
      "Id": "CMAKE_<LANG>_SIMULATE_ID",
      "Summary": "Identification string of the \"simulated\" compiler."
    },
    {
      "Id": "CMAKE_<LANG>_SIMULATE_VERSION",
      "Summary": "Version string of \"simulated\" compiler."
    },
    {
      "Id": "CMAKE_<LANG>_SIZEOF_DATA_PTR",
      "Summary": "Size of pointer-to-data types for language ``<LANG>``."
    },
    {
      "Id": "CMAKE_<LANG>_SOURCE_FILE_EXTENSIONS",
      "Summary": "Extensions of source files for the given language."
    },
    {
      "Id": "CMAKE_<LANG>_STANDARD",
      "Summary": "The variations are:"
    },
    {
      "Id": "CMAKE_<LANG>_STANDARD_DEFAULT",
      "Summary": "The compiler's default standard for the language ``<LANG>``."
    },
    {
      "Id": "CMAKE_<LANG>_STANDARD_INCLUDE_DIRECTORIES",
      "Summary": "Include directories to be used for every source file compiled with the ``<LANG>`` compiler."
    },
    {
      "Id": "CMAKE_<LANG>_STANDARD_LIBRARIES",
      "Summary": "Libraries linked into every executable and shared library linked for language ``<LANG>``."
    },
    {
      "Id": "CMAKE_<LANG>_STANDARD_REQUIRED",
      "Summary": "The variations are:"
    },
    {
      "Id": "CMAKE_OBJC_EXTENSIONS",
      "Summary": "Default value for ``OBJC_EXTENSIONS`` target property if set when a target is created."
    },
    {
      "Id": "CMAKE_OBJC_STANDARD",
      "Summary": "Default value for ``OBJC_STANDARD`` target property if set when a target is created."
    },
    {
      "Id": "CMAKE_OBJC_STANDARD_REQUIRED",
      "Summary": "Default value for ``OBJC_STANDARD_REQUIRED`` target property if set when a target is created."
    },
    {
      "Id": "CMAKE_OBJCXX_EXTENSIONS",
      "Summary": "Default value for ``OBJCXX_EXTENSIONS`` target property if set when a target is created."
    },
    {
      "Id": "CMAKE_OBJCXX_STANDARD",
      "Summary": "Default value for ``OBJCXX_STANDARD`` target property if set when a target is created."
    },
    {
      "Id": "CMAKE_OBJCXX_STANDARD_REQUIRED",
      "Summary": "Default value for ``OBJCXX_STANDARD_REQUIRED`` target property if set when a target is created."
    },
    {
      "Id": "CMAKE_Swift_LANGUAGE_VERSION",
      "Summary": "Set to the Swift language version number."
    },
    {
      "Id": "CMAKE_USER_MAKE_RULES_OVERRIDE_<LANG>",
      "Summary": "Specify a CMake file that overrides platform information for ``<LANG>``."
    },
    {
      "Id": "CTEST_BINARY_DIRECTORY",
      "Summary": "Specify the CTest ``BuildDirectory`` setting in a ``ctest(1)`` dashboard client script."
    },
    {
      "Id": "CTEST_BUILD_COMMAND",
      "Summary": "Specify the CTest ``MakeCommand`` setting in a ``ctest(1)`` dashboard client script."
    },
    {
      "Id": "CTEST_BUILD_NAME",
      "Summary": "Specify the CTest ``BuildName`` setting in a ``ctest(1)`` dashboard client script."
    },
    {
      "Id": "CTEST_BZR_COMMAND",
      "Summary": "Specify the CTest ``BZRCommand`` setting in a ``ctest(1)`` dashboard client script."
    },
    {
      "Id": "CTEST_BZR_UPDATE_OPTIONS",
      "Summary": "Specify the CTest ``BZRUpdateOptions`` setting in a ``ctest(1)`` dashboard client script."
    },
    {
      "Id": "CTEST_CHANGE_ID",
      "Summary": "Specify the CTest ``ChangeId`` setting in a ``ctest(1)`` dashboard client script."
    },
    {
      "Id": "CTEST_CHECKOUT_COMMAND",
      "Summary": "Tell the ``ctest_start()`` command how to checkout or initialize the source directory in a ``ctest(1)`` dashboard client script."
    },
    {
      "Id": "CTEST_CONFIGURATION_TYPE",
      "Summary": "Specify the CTest ``DefaultCTestConfigurationType`` setting in a ``ctest(1)`` dashboard client script."
    },
    {
      "Id": "CTEST_CONFIGURE_COMMAND",
      "Summary": "Specify the CTest ``ConfigureCommand`` setting in a ``ctest(1)`` dashboard client script."
    },
    {
      "Id": "CTEST_COVERAGE_COMMAND",
      "Summary": "Specify the CTest ``CoverageCommand`` setting in a ``ctest(1)`` dashboard client script."
    },
    {
      "Id": "CTEST_COVERAGE_EXTRA_FLAGS",
      "Summary": "Specify the CTest ``CoverageExtraFlags`` setting in a ``ctest(1)`` dashboard client script."
    },
    {
      "Id": "CTEST_CURL_OPTIONS",
      "Summary": "Specify the CTest ``CurlOptions`` setting in a ``ctest(1)`` dashboard client script."
    },
    {
      "Id": "CTEST_CUSTOM_COVERAGE_EXCLUDE",
      "Summary": "A list of regular expressions which will be used to exclude files by their path from coverage output by the ``ctest_coverage()`` command."
    },
    {
      "Id": "CTEST_CUSTOM_ERROR_EXCEPTION",
      "Summary": "A list of regular expressions which will be used to exclude when detecting error messages in build outputs by the ``ctest_test()`` command."
    },
    {
      "Id": "CTEST_CUSTOM_ERROR_MATCH",
      "Summary": "A list of regular expressions which will be used to detect error messages in build outputs by the ``ctest_test()`` command."
    },
    {
      "Id": "CTEST_CUSTOM_ERROR_POST_CONTEXT",
      "Summary": "The number of lines to include as context which follow an error message by the ``ctest_test()`` command."
    },
    {
      "Id": "CTEST_CUSTOM_ERROR_PRE_CONTEXT",
      "Summary": "The number of lines to include as context which precede an error message by the ``ctest_test()`` command."
    },
    {
      "Id": "CTEST_CUSTOM_MAXIMUM_FAILED_TEST_OUTPUT_SIZE",
      "Summary": "When saving a failing test's output, this is the maximum size, in bytes, that will be collected by the ``ctest_test()`` command."
    },
    {
      "Id": "CTEST_CUSTOM_MAXIMUM_NUMBER_OF_ERRORS",
      "Summary": "The maximum number of errors in a single build step which will be detected."
    },
    {
      "Id": "CTEST_CUSTOM_MAXIMUM_NUMBER_OF_WARNINGS",
      "Summary": "The maximum number of warnings in a single build step which will be detected."
    },
    {
      "Id": "CTEST_CUSTOM_MAXIMUM_PASSED_TEST_OUTPUT_SIZE",
      "Summary": "When saving a passing test's output, this is the maximum size, in bytes, that will be collected by the ``ctest_test()`` command."
    },
    {
      "Id": "CTEST_CUSTOM_MEMCHECK_IGNORE",
      "Summary": "A list of regular expressions to use to exclude tests during the ``ctest_memcheck()`` command."
    },
    {
      "Id": "CTEST_CUSTOM_POST_MEMCHECK",
      "Summary": "A list of commands to run at the end of the ``ctest_memcheck()`` command."
    },
    {
      "Id": "CTEST_CUSTOM_POST_TEST",
      "Summary": "A list of commands to run at the end of the ``ctest_test()`` command."
    },
    {
      "Id": "CTEST_CUSTOM_PRE_MEMCHECK",
      "Summary": "A list of commands to run at the start of the ``ctest_memcheck()`` command."
    },
    {
      "Id": "CTEST_CUSTOM_PRE_TEST",
      "Summary": "A list of commands to run at the start of the ``ctest_test()`` command."
    },
    {
      "Id": "CTEST_CUSTOM_TESTS_IGNORE",
      "Summary": "A list of regular expressions to use to exclude tests during the ``ctest_test()`` command."
    },
    {
      "Id": "CTEST_CUSTOM_WARNING_EXCEPTION",
      "Summary": "A list of regular expressions which will be used to exclude when detecting warning messages in build outputs by the ``ctest_build()`` command."
    },
    {
      "Id": "CTEST_CUSTOM_WARNING_MATCH",
      "Summary": "A list of regular expressions which will be used to detect warning messages in build outputs by the ``ctest_build()`` command."
    },
    {
      "Id": "CTEST_CVS_CHECKOUT",
      "Summary": "Deprecated."
    },
    {
      "Id": "CTEST_CVS_COMMAND",
      "Summary": "Specify the CTest ``CVSCommand`` setting in a ``ctest(1)`` dashboard client script."
    },
    {
      "Id": "CTEST_CVS_UPDATE_OPTIONS",
      "Summary": "Specify the CTest ``CVSUpdateOptions`` setting in a ``ctest(1)`` dashboard client script."
    },
    {
      "Id": "CTEST_DROP_LOCATION",
      "Summary": "Specify the CTest ``DropLocation`` setting in a ``ctest(1)`` dashboard client script."
    },
    {
      "Id": "CTEST_DROP_METHOD",
      "Summary": "Specify the CTest ``DropMethod`` setting in a ``ctest(1)`` dashboard client script."
    },
    {
      "Id": "CTEST_DROP_SITE",
      "Summary": "Specify the CTest ``DropSite`` setting in a ``ctest(1)`` dashboard client script."
    },
    {
      "Id": "CTEST_DROP_SITE_CDASH",
      "Summary": "Specify the CTest ``IsCDash`` setting in a ``ctest(1)`` dashboard client script."
    },
    {
      "Id": "CTEST_DROP_SITE_PASSWORD",
      "Summary": "Specify the CTest ``DropSitePassword`` setting in a ``ctest(1)`` dashboard client script."
    },
    {
      "Id": "CTEST_DROP_SITE_USER",
      "Summary": "Specify the CTest ``DropSiteUser`` setting in a ``ctest(1)`` dashboard client script."
    },
    {
      "Id": "CTEST_EXTRA_COVERAGE_GLOB",
      "Summary": "A list of regular expressions which will be used to find files which should be covered by the ``ctest_coverage()`` command."
    },
    {
      "Id": "CTEST_GIT_COMMAND",
      "Summary": "Specify the CTest ``GITCommand`` setting in a ``ctest(1)`` dashboard client script."
    },
    {
      "Id": "CTEST_GIT_INIT_SUBMODULES",
      "Summary": "Specify the CTest ``GITInitSubmodules`` setting in a ``ctest(1)`` dashboard client script."
    },
    {
      "Id": "CTEST_GIT_UPDATE_CUSTOM",
      "Summary": "Specify the CTest ``GITUpdateCustom`` setting in a ``ctest(1)`` dashboard client script."
    },
    {
      "Id": "CTEST_GIT_UPDATE_OPTIONS",
      "Summary": "Specify the CTest ``GITUpdateOptions`` setting in a ``ctest(1)`` dashboard client script."
    },
    {
      "Id": "CTEST_HG_COMMAND",
      "Summary": "Specify the CTest ``HGCommand`` setting in a ``ctest(1)`` dashboard client script."
    },
    {
      "Id": "CTEST_HG_UPDATE_OPTIONS",
      "Summary": "Specify the CTest ``HGUpdateOptions`` setting in a ``ctest(1)`` dashboard client script."
    },
    {
      "Id": "CTEST_LABELS_FOR_SUBPROJECTS",
      "Summary": "Specify the CTest ``LabelsForSubprojects`` setting in a ``ctest(1)`` dashboard client script."
    },
    {
      "Id": "CTEST_MEMORYCHECK_COMMAND",
      "Summary": "Specify the CTest ``MemoryCheckCommand`` setting in a ``ctest(1)`` dashboard client script."
    },
    {
      "Id": "CTEST_MEMORYCHECK_COMMAND_OPTIONS",
      "Summary": "Specify the CTest ``MemoryCheckCommandOptions`` setting in a ``ctest(1)`` dashboard client script."
    },
    {
      "Id": "CTEST_MEMORYCHECK_SANITIZER_OPTIONS",
      "Summary": "Specify the CTest ``MemoryCheckSanitizerOptions`` setting in a ``ctest(1)`` dashboard client script."
    },
    {
      "Id": "CTEST_MEMORYCHECK_SUPPRESSIONS_FILE",
      "Summary": "Specify the CTest ``MemoryCheckSuppressionFile`` setting in a ``ctest(1)`` dashboard client script."
    },
    {
      "Id": "CTEST_MEMORYCHECK_TYPE",
      "Summary": "Specify the CTest ``MemoryCheckType`` setting in a ``ctest(1)`` dashboard client script."
    },
    {
      "Id": "CTEST_NIGHTLY_START_TIME",
      "Summary": "Specify the CTest ``NightlyStartTime`` setting in a ``ctest(1)`` dashboard client script."
    },
    {
      "Id": "CTEST_P4_CLIENT",
      "Summary": "Specify the CTest ``P4Client`` setting in a ``ctest(1)`` dashboard client script."
    },
    {
      "Id": "CTEST_P4_COMMAND",
      "Summary": "Specify the CTest ``P4Command`` setting in a ``ctest(1)`` dashboard client script."
    },
    {
      "Id": "CTEST_P4_OPTIONS",
      "Summary": "Specify the CTest ``P4Options`` setting in a ``ctest(1)`` dashboard client script."
    },
    {
      "Id": "CTEST_P4_UPDATE_OPTIONS",
      "Summary": "Specify the CTest ``P4UpdateOptions`` setting in a ``ctest(1)`` dashboard client script."
    },
    {
      "Id": "CTEST_RESOURCE_SPEC_FILE",
      "Summary": "Specify the CTest ``ResourceSpecFile`` setting in a ``ctest(1)`` dashboard client script."
    },
    {
      "Id": "CTEST_RUN_CURRENT_SCRIPT",
      "Summary": "Setting this to 0 prevents ``ctest(1)`` from being run again when it reaches the end of a script run by calling ``ctest -S``."
    },
    {
      "Id": "CTEST_SCP_COMMAND",
      "Summary": "Legacy option."
    },
    {
      "Id": "CTEST_SCRIPT_DIRECTORY",
      "Summary": "The directory containing the top-level CTest script."
    },
    {
      "Id": "CTEST_SITE",
      "Summary": "Specify the CTest ``Site`` setting in a ``ctest(1)`` dashboard client script."
    },
    {
      "Id": "CTEST_SUBMIT_URL",
      "Summary": "Specify the CTest ``SubmitURL`` setting in a ``ctest(1)`` dashboard client script."
    },
    {
      "Id": "CTEST_SOURCE_DIRECTORY",
      "Summary": "Specify the CTest ``SourceDirectory`` setting in a ``ctest(1)`` dashboard client script."
    },
    {
      "Id": "CTEST_SVN_COMMAND",
      "Summary": "Specify the CTest ``SVNCommand`` setting in a ``ctest(1)`` dashboard client script."
    },
    {
      "Id": "CTEST_SVN_OPTIONS",
      "Summary": "Specify the CTest ``SVNOptions`` setting in a ``ctest(1)`` dashboard client script."
    },
    {
      "Id": "CTEST_SVN_UPDATE_OPTIONS",
      "Summary": "Specify the CTest ``SVNUpdateOptions`` setting in a ``ctest(1)`` dashboard client script."
    },
    {
      "Id": "CTEST_TEST_LOAD",
      "Summary": "Specify the ``TestLoad`` setting in the :`CTest Test Step` of a ``ctest(1)`` dashboard client script."
    },
    {
      "Id": "CTEST_TEST_TIMEOUT",
      "Summary": "Specify the CTest ``TimeOut`` setting in a ``ctest(1)`` dashboard client script."
    },
    {
      "Id": "CTEST_TRIGGER_SITE",
      "Summary": "Legacy option."
    },
    {
      "Id": "CTEST_UPDATE_COMMAND",
      "Summary": "Specify the CTest ``UpdateCommand`` setting in a ``ctest(1)`` dashboard client script."
    },
    {
      "Id": "CTEST_UPDATE_OPTIONS",
      "Summary": "Specify the CTest ``UpdateOptions`` setting in a ``ctest(1)`` dashboard client script."
    },
    {
      "Id": "CTEST_UPDATE_VERSION_ONLY",
      "Summary": "Specify the CTest :`UpdateVersionOnly <UpdateVersionOnly>` setting in a ``ctest(1)`` dashboard client script."
    },
    {
      "Id": "CTEST_UPDATE_VERSION_OVERRIDE",
      "Summary": "Specify the CTest :`UpdateVersionOverride <UpdateVersionOverride>` setting in a ``ctest(1)`` dashboard client script."
    },
    {
      "Id": "CTEST_USE_LAUNCHERS",
      "Summary": "Specify the CTest ``UseLaunchers`` setting in a ``ctest(1)`` dashboard client script."
    },
    {
      "Id": "CPACK_ABSOLUTE_DESTINATION_FILES",
      "Summary": "List of files which have been installed using an ``ABSOLUTE DESTINATION`` path."
    },
    {
      "Id": "CPACK_COMPONENT_INCLUDE_TOPLEVEL_DIRECTORY",
      "Summary": "Boolean toggle to include/exclude top level directory (component case)."
    },
    {
      "Id": "CPACK_CUSTOM_INSTALL_VARIABLES",
      "Summary": "CPack variables (set via e.g. ``cpack -D``, ``CPackConfig.cmake`` or ``CPACK_PROJECT_CONFIG_FILE`` scripts) are not directly visible in installation scripts."
    },
    {
      "Id": "CPACK_ERROR_ON_ABSOLUTE_INSTALL_DESTINATION",
      "Summary": "Ask CPack to error out as soon as a file with absolute ``INSTALL DESTINATION`` is encountered."
    },
    {
      "Id": "CPACK_INCLUDE_TOPLEVEL_DIRECTORY",
      "Summary": "Boolean toggle to include/exclude top level directory."
    },
    {
      "Id": "CPACK_INSTALL_DEFAULT_DIRECTORY_PERMISSIONS",
      "Summary": "Default permissions for implicitly created directories during packaging."
    },
    {
      "Id": "CPACK_PACKAGING_INSTALL_PREFIX",
      "Summary": "The prefix used in the built package."
    },
    {
      "Id": "CPACK_SET_DESTDIR",
      "Summary": "Boolean toggle to make CPack use ``DESTDIR`` mechanism when packaging."
    },
    {
      "Id": "CPACK_WARN_ON_ABSOLUTE_INSTALL_DESTINATION",
      "Summary": "Ask CPack to warn each time a file with absolute ``INSTALL DESTINATION`` is encountered."
    },
    {
      "Id": "CACHE",
      "Summary": "Operator to read cache variables."
    },
    {
      "Id": "ENV",
      "Summary": "Operator to read environment variables."
    },
    {
      "Id": "CMAKE_HOME_DIRECTORY",
      "Summary": "Path to top of source tree."
    },
    {
      "Id": "CMAKE_INTERNAL_PLATFORM_ABI",
      "Summary": "An internal variable subject to change."
    },
    {
      "Id": "CMAKE_<LANG>_COMPILER_ABI",
      "Summary": "An internal variable subject to change."
    },
    {
      "Id": "CMAKE_<LANG>_COMPILER_ARCHITECTURE_ID",
      "Summary": "An internal variable subject to change."
    },
    {
      "Id": "CMAKE_<LANG>_COMPILER_VERSION_INTERNAL",
      "Summary": "An internal variable subject to change."
    },
    {
      "Id": "CMAKE_<LANG>_PLATFORM_ID",
      "Summary": "An internal variable subject to change."
    },
    {
      "Id": "CMAKE_NOT_USING_CONFIG_FLAGS",
      "Summary": "Skip ``_BUILD_TYPE`` flags if true."
    },
    {
      "Id": "CMAKE_VS_INTEL_Fortran_PROJECT_VERSION",
      "Summary": "When generating for ``Visual Studio 9 2008`` or greater with the Intel Fortran plugin installed, this specifies the ``.vfproj`` project file format version."
    }
  ],
  "Commands": [
    {
      "Id": "break",
      "Summary": "Break from an enclosing foreach or while loop.",
      "Signatures": [
        "break()"
      ],
      "Parameters": []
    },
    {
      "Id": "cmake_host_system_information",
      "Summary": "Query host system specific information.",
      "Signatures": [
        "cmake_host_system_information(RESULT <variable> QUERY <key> ...)"
      ],
      "Parameters": [
        "NUMBER_OF_LOGICAL_CORES",
        "NUMBER_OF_PHYSICAL_CORES",
        "HOSTNAME",
        "FQDN",
        "TOTAL_VIRTUAL_MEMORY",
        "AVAILABLE_VIRTUAL_MEMORY",
        "TOTAL_PHYSICAL_MEMORY",
        "AVAILABLE_PHYSICAL_MEMORY",
        "IS_64BIT",
        "HAS_FPU",
        "HAS_MMX",
        "HAS_MMX_PLUS",
        "HAS_SSE",
        "HAS_SSE2",
        "HAS_SSE_FP",
        "HAS_SSE_MMX",
        "HAS_AMD_3DNOW",
        "HAS_AMD_3DNOW_PLUS",
        "HAS_IA64",
        "HAS_SERIAL_NUMBER",
        "PROCESSOR_SERIAL_NUMBER",
        "PROCESSOR_NAME",
        "PROCESSOR_DESCRIPTION",
        "OS_NAME",
        "OS_RELEASE",
        "OS_VERSION",
        "OS_PLATFORM",
        "DISTRIB_INFO"
      ]
    },
    {
      "Id": "cmake_language",
      "Summary": "Call meta-operations on CMake commands.",
      "Signatures": [
        "cmake_language(CALL <command> [<arg>...])",
        "cmake_language(EVAL CODE <code>...)",
        "cmake_language(DEFER <options>... CALL <command> [<arg>...])",
        "cmake_language(DEFER [DIRECTORY <dir>] GET_CALL_IDS <var>)",
        "cmake_language(DEFER [DIRECTORY <dir>] GET_CALL <id> <var>)",
        "cmake_language(DEFER [DIRECTORY <dir>] CANCEL_CALL <id>...)",
        "cmake_language(EVAL CODE \" cmake_language(DEFER CALL message [[${deferred_message}]])"
      ],
      "Parameters": []
    },
    {
      "Id": "cmake_minimum_required",
      "Summary": "Require a minimum version of cmake.",
      "Signatures": [
        "cmake_minimum_required(VERSION <min>[...<policy_max>] [FATAL_ERROR])"
      ],
      "Parameters": [
        "CMAKE_MINIMUM_REQUIRED_VERSION"
      ]
    },
    {
      "Id": "cmake_parse_arguments",
      "Summary": "Parse function or macro arguments.",
      "Signatures": [
        "cmake_parse_arguments(<prefix> <options> <one_value_keywords> <multi_value_keywords> <args>...)",
        "cmake_parse_arguments(PARSE_ARGV <N> <prefix> <options> <one_value_keywords> <multi_value_keywords>)"
      ],
      "Parameters": [
        "TARGETS",
        "MY_INSTALL_DESTINATION",
        "MY_INSTALL_OPTIONAL",
        "MY_INSTALL_FAST",
        "MY_INSTALL_TARGETS",
        "MY_INSTALL_UNPARSED_ARGUMENTS",
        "MY_INSTALL_KEYWORDS_MISSING_VALUES"
      ]
    },
    {
      "Id": "cmake_path",
      "Summary": "This command is for the manipulation of paths.",
      "Signatures": [
        "cmake_path(GET <path-var> ROOT_NAME <out-var>)",
        "cmake_path(GET <path-var> ROOT_DIRECTORY <out-var>)",
        "cmake_path(GET <path-var> ROOT_PATH <out-var>)",
        "cmake_path(GET <path-var> FILENAME <out-var>)",
        "cmake_path(GET <path-var> EXTENSION [LAST_ONLY] <out-var>)",
        "cmake_path(GET <path-var> STEM [LAST_ONLY] <out-var>)",
        "cmake_path(GET <path-var> RELATIVE_PART <out-var>)",
        "cmake_path(GET <path-var> PARENT_PATH <out-var>)",
        "cmake_path(HAS_ROOT_NAME <path-var> <out-var>)",
        "cmake_path(HAS_ROOT_DIRECTORY <path-var> <out-var>)",
        "cmake_path(HAS_ROOT_PATH <path-var> <out-var>)",
        "cmake_path(HAS_FILENAME <path-var> <out-var>)",
        "cmake_path(HAS_EXTENSION <path-var> <out-var>)",
        "cmake_path(HAS_STEM <path-var> <out-var>)",
        "cmake_path(HAS_RELATIVE_PART <path-var> <out-var>)",
        "cmake_path(HAS_PARENT_PATH <path-var> <out-var>)",
        "cmake_path(IS_ABSOLUTE <path-var> <out-var>)",
        "cmake_path(IS_RELATIVE <path-var> <out-var>)",
        "cmake_path(IS_PREFIX <path-var> <input> [NORMALIZE] <out-var>)",
        "cmake_path(COMPARE <input1> EQUAL <input2> <out-var>)",
        "cmake_path(COMPARE <input1> NOT_EQUAL <input2> <out-var>)",
        "cmake_path(SET <path-var> [NORMALIZE] <input>)",
        "cmake_path(APPEND <path-var> [<input>...] [OUTPUT_VARIABLE <out-var>])",
        "cmake_path(APPEND_STRING <path-var> [<input>...] [OUTPUT_VARIABLE <out-var>])",
        "cmake_path(REMOVE_FILENAME <path-var> [OUTPUT_VARIABLE <out-var>])",
        "cmake_path(REPLACE_FILENAME <path-var> <input> [OUTPUT_VARIABLE <out-var>])",
        "cmake_path(REMOVE_EXTENSION <path-var> [LAST_ONLY] [OUTPUT_VARIABLE <out-var>])",
        "cmake_path(REPLACE_EXTENSION <path-var> [LAST_ONLY] <input> [OUTPUT_VARIABLE <out-var>])",
        "cmake_path(NORMAL_PATH <path-var> [OUTPUT_VARIABLE <out-var>])",
        "cmake_path(RELATIVE_PATH <path-var> [BASE_DIRECTORY <input>] [OUTPUT_VARIABLE <out-var>])",
        "cmake_path(ABSOLUTE_PATH <path-var> [BASE_DIRECTORY <input>] [NORMALIZE] [OUTPUT_VARIABLE <out-var>])",
        "cmake_path(NATIVE_PATH <path-var> [NORMALIZE] <out-var>)",
        "cmake_path(CONVERT <input> TO_CMAKE_PATH_LIST <out-var> [NORMALIZE])",
        "cmake_path(CONVERT <input> TO_NATIVE_PATH_LIST <out-var> [NORMALIZE])",
        "cmake_path(HASH <path-var> <out-var>)"
      ],
      "Parameters": [
        "CMAKE_CURRENT_SOURCE_DIR"
      ]
    },
    {
      "Id": "cmake_policy",
      "Summary": "Manage CMake Policy settings.",
      "Signatures": [
        "cmake_policy(VERSION <min>[...<max>])",
        "cmake_policy(SET CMP<NNNN> NEW)",
        "cmake_policy(SET CMP<NNNN> OLD)",
        "cmake_policy(GET CMP<NNNN> <variable>)",
        "cmake_policy(PUSH)",
        "cmake_policy(POP)"
      ],
      "Parameters": []
    },
    {
      "Id": "configure_file",
      "Summary": "Copy a file to another location and modify its contents.",
      "Signatures": [
        "configure_file(<input> <output> [NO_SOURCE_PERMISSIONS | USE_SOURCE_PERMISSIONS | FILE_PERMISSIONS <permissions>...] [COPYONLY] [ESCAPE_QUOTES] [@ONLY] [NEWLINE_STYLE [UNIX|DOS|WIN32|LF|CRLF] ])"
      ],
      "Parameters": []
    },
    {
      "Id": "continue",
      "Summary": "Continue to the top of enclosing foreach or while loop.",
      "Signatures": [
        "continue()"
      ],
      "Parameters": []
    },
    {
      "Id": "else",
      "Summary": "Starts the else portion of an if block.",
      "Signatures": [
        "else([<condition>])"
      ],
      "Parameters": []
    },
    {
      "Id": "elseif",
      "Summary": "Starts an elseif portion of an if block.",
      "Signatures": [
        "elseif(<condition>)",
        "elseif(<constant>)",
        "elseif(<variable|string>)",
        "elseif(NOT <condition>)",
        "elseif(<cond1> AND <cond2>)",
        "elseif(<cond1> OR <cond2>)",
        "elseif(DEFINED <name>|CACHE{<name>}|ENV{<name>})",
        "elseif(<variable|string> IN_LIST <variable>)",
        "elseif(<variable|string> MATCHES regex)",
        "elseif(<variable|string> LESS <variable|string>)",
        "elseif(<variable|string> GREATER <variable|string>)",
        "elseif(<variable|string> EQUAL <variable|string>)",
        "elseif(<variable|string> LESS_EQUAL <variable|string>)",
        "elseif(<variable|string> GREATER_EQUAL <variable|string>)",
        "elseif(<variable|string> STRLESS <variable|string>)",
        "elseif(<variable|string> STRGREATER <variable|string>)",
        "elseif(<variable|string> STREQUAL <variable|string>)",
        "elseif(<variable|string> STRLESS_EQUAL <variable|string>)",
        "elseif(<variable|string> STRGREATER_EQUAL <variable|string>)",
        "elseif(<variable|string> VERSION_LESS <variable|string>)",
        "elseif(<variable|string> VERSION_GREATER <variable|string>)",
        "elseif(<variable|string> VERSION_EQUAL <variable|string>)",
        "elseif(<variable|string> VERSION_LESS_EQUAL <variable|string>)",
        "elseif(<variable|string> VERSION_GREATER_EQUAL <variable|string>)",
        "elseif(var1)",
        "elseif(var2)"
      ],
      "Parameters": []
    },
    {
      "Id": "endforeach",
      "Summary": "Ends a list of commands in a foreach block.",
      "Signatures": [
        "endforeach([<loop_var>])"
      ],
      "Parameters": []
    },
    {
      "Id": "endfunction",
      "Summary": "Ends a list of commands in a function block.",
      "Signatures": [
        "endfunction([<name>])"
      ],
      "Parameters": []
    },
    {
      "Id": "endif",
      "Summary": "Ends a list of commands in an if block.",
      "Signatures": [
        "endif([<condition>])"
      ],
      "Parameters": []
    },
    {
      "Id": "endmacro",
      "Summary": "Ends a list of commands in a macro block.",
      "Signatures": [
        "endmacro([<name>])"
      ],
      "Parameters": []
    },
    {
      "Id": "endwhile",
      "Summary": "Ends a list of commands in a while block.",
      "Signatures": [
        "endwhile([<condition>])"
      ],
      "Parameters": []
    },
    {
      "Id": "execute_process",
      "Summary": "Execute one or more child processes.",
      "Signatures": [
        "execute_process(COMMAND <cmd1> [<arguments>] [COMMAND <cmd2> [<arguments>]]... [WORKING_DIRECTORY <directory>] [TIMEOUT <seconds>] [RESULT_VARIABLE <variable>] [RESULTS_VARIABLE <variable>] [OUTPUT_VARIABLE <variable>] [ERROR_VARIABLE <variable>] [INPUT_FILE <file>] [OUTPUT_FILE <file>] [ERROR_FILE <file>] [OUTPUT_QUIET] [ERROR_QUIET] [COMMAND_ECHO <where>] [OUTPUT_STRIP_TRAILING_WHITESPACE] [ERROR_STRIP_TRAILING_WHITESPACE] [ENCODING <name>] [ECHO_OUTPUT_VARIABLE] [ECHO_ERROR_VARIABLE] [COMMAND_ERROR_IS_FATAL <ANY|LAST>])"
      ],
      "Parameters": []
    },
    {
      "Id": "file",
      "Summary": "File manipulation command.",
      "Signatures": [
        "file(READ <filename> <variable> [OFFSET <offset>] [LIMIT <max-in>] [HEX])",
        "file(STRINGS <filename> <variable> [<options>...])",
        "file(<HASH> <filename> <variable>)",
        "file(TIMESTAMP <filename> <variable> [<format>] [UTC])",
        "file(GET_RUNTIME_DEPENDENCIES [RESOLVED_DEPENDENCIES_VAR <deps_var>] [UNRESOLVED_DEPENDENCIES_VAR <unresolved_deps_var>] [CONFLICTING_DEPENDENCIES_PREFIX <conflicting_deps_prefix>] [EXECUTABLES [<executable_files>...]] [LIBRARIES [<library_files>...]] [MODULES [<module_files>...]] [DIRECTORIES [<directories>...]] [BUNDLE_EXECUTABLE <bundle_executable_file>] [PRE_INCLUDE_REGEXES [<regexes>...]] [PRE_EXCLUDE_REGEXES [<regexes>...]] [POST_INCLUDE_REGEXES [<regexes>...]] [POST_EXCLUDE_REGEXES [<regexes>...]] [POST_INCLUDE_FILES [<files>...]] [POST_EXCLUDE_FILES [<files>...]])",
        "file(WRITE <filename> <content>...)",
        "file(APPEND <filename> <content>...)",
        "file(TOUCH [<files>...])",
        "file(TOUCH_NOCREATE [<files>...])",
        "file(GENERATE OUTPUT output-file <INPUT input-file|CONTENT content> [CONDITION expression] [TARGET target] [NO_SOURCE_PERMISSIONS | USE_SOURCE_PERMISSIONS | FILE_PERMISSIONS <permissions>...] [NEWLINE_STYLE [UNIX|DOS|WIN32|LF|CRLF] ])",
        "file(CONFIGURE OUTPUT output-file CONTENT content [ESCAPE_QUOTES] [@ONLY] [NEWLINE_STYLE [UNIX|DOS|WIN32|LF|CRLF] ])",
        "file(GLOB <variable> [LIST_DIRECTORIES true|false] [RELATIVE <path>] [CONFIGURE_DEPENDS] [<globbing-expressions>...])",
        "file(GLOB_RECURSE <variable> [FOLLOW_SYMLINKS] [LIST_DIRECTORIES true|false] [RELATIVE <path>] [CONFIGURE_DEPENDS] [<globbing-expressions>...])",
        "file(MAKE_DIRECTORY [<directories>...])",
        "file(REMOVE [<files>...])",
        "file(REMOVE_RECURSE [<files>...])",
        "file(RENAME <oldname> <newname> [RESULT <result>] [NO_REPLACE])",
        "file(COPY_FILE <oldname> <newname> [RESULT <result>] [ONLY_IF_DIFFERENT])",
        "file(<COPY|INSTALL> <files>... DESTINATION <dir> [NO_SOURCE_PERMISSIONS | USE_SOURCE_PERMISSIONS] [FILE_PERMISSIONS <permissions>...] [DIRECTORY_PERMISSIONS <permissions>...] [FOLLOW_SYMLINK_CHAIN] [FILES_MATCHING] [[PATTERN <pattern> | REGEX <regex>] [EXCLUDE] [PERMISSIONS <permissions>...]] [...])",
        "file(SIZE <filename> <variable>)",
        "file(READ_SYMLINK <linkname> <variable>)",
        "file(CREATE_LINK <original> <linkname> [RESULT <result>] [COPY_ON_ERROR] [SYMBOLIC])",
        "file(CHMOD <files>... <directories>... [PERMISSIONS <permissions>...] [FILE_PERMISSIONS <permissions>...] [DIRECTORY_PERMISSIONS <permissions>...])",
        "file(CHMOD_RECURSE <files>... <directories>... [PERMISSIONS <permissions>...] [FILE_PERMISSIONS <permissions>...] [DIRECTORY_PERMISSIONS <permissions>...])",
        "file(REAL_PATH <path> <out-var> [BASE_DIRECTORY <dir>] [EXPAND_TILDE])",
        "file(RELATIVE_PATH <variable> <directory> <file>)",
        "file(TO_CMAKE_PATH \"<path>\" <variable>)",
        "file(TO_NATIVE_PATH \"<path>\" <variable>)",
        "file(DOWNLOAD <url> [<file>] [<options>...])",
        "file(UPLOAD <file> <url> [<options>...])",
        "file(LOCK <path> [DIRECTORY] [RELEASE] [GUARD <FUNCTION|FILE|PROCESS>] [RESULT_VARIABLE <variable>] [TIMEOUT <seconds>])",
        "file(ARCHIVE_CREATE OUTPUT <archive> PATHS <paths>... [FORMAT <format>] [COMPRESSION <compression> [COMPRESSION_LEVEL <compression-level>]] [MTIME <mtime>] [VERBOSE])",
        "file(ARCHIVE_EXTRACT INPUT <archive> [DESTINATION <dir>] [PATTERNS <patterns>...] [LIST_ONLY] [VERBOSE])"
      ],
      "Parameters": [
        "NEWLINE_CONSUME",
        "NO_HEX_CONVERSION",
        "CMP0009",
        "COPYONLY",
        "GROUP_READ",
        "WORLD_WRITE",
        "SHOW_PROGRESS",
        "0"
      ]
    },
    {
      "Id": "find_file",
      "Summary": "",
      "Signatures": [
        "find_file(<VAR> name1 [path1 path2 ...])",
        "find_file(<VAR> name | NAMES name1 [name2 ...] [HINTS [path | ENV var]... ] [PATHS [path | ENV var]... ] [PATH_SUFFIXES suffix1 [suffix2 ...]] [DOC \"cache documentation string\"] [NO_CACHE] [REQUIRED] [NO_DEFAULT_PATH] [NO_PACKAGE_ROOT_PATH] [NO_CMAKE_PATH] [NO_CMAKE_ENVIRONMENT_PATH] [NO_SYSTEM_ENVIRONMENT_PATH] [NO_CMAKE_SYSTEM_PATH] [CMAKE_FIND_ROOT_PATH_BOTH | ONLY_CMAKE_FIND_ROOT_PATH | NO_CMAKE_FIND_ROOT_PATH])",
        "find_file(<VAR> NAMES name PATHS paths... NO_DEFAULT_PATH)",
        "find_file(<VAR> NAMES name)"
      ],
      "Parameters": [
        "CMAKE_FIND_APPBUNDLE",
        "CMAKE_FIND_ROOT_PATH",
        "CMAKE_FIND_ROOT_PATH_MODE_INCLUDE"
      ]
    },
    {
      "Id": "find_library",
      "Summary": "",
      "Signatures": [
        "find_library(<VAR> name1 [path1 path2 ...])",
        "find_library(<VAR> name | NAMES name1 [name2 ...] [NAMES_PER_DIR] [HINTS [path | ENV var]... ] [PATHS [path | ENV var]... ] [PATH_SUFFIXES suffix1 [suffix2 ...]] [DOC \"cache documentation string\"] [NO_CACHE] [REQUIRED] [NO_DEFAULT_PATH] [NO_PACKAGE_ROOT_PATH] [NO_CMAKE_PATH] [NO_CMAKE_ENVIRONMENT_PATH] [NO_SYSTEM_ENVIRONMENT_PATH] [NO_CMAKE_SYSTEM_PATH] [CMAKE_FIND_ROOT_PATH_BOTH | ONLY_CMAKE_FIND_ROOT_PATH | NO_CMAKE_FIND_ROOT_PATH])",
        "find_library(<VAR> NAMES name PATHS paths... NO_DEFAULT_PATH)",
        "find_library(<VAR> NAMES name)"
      ],
      "Parameters": [
        "CMAKE_FIND_APPBUNDLE",
        "CMAKE_FIND_ROOT_PATH",
        "CMAKE_FIND_ROOT_PATH_MODE_LIBRARY",
        "FIND_LIBRARY_USE_LIBX32_PATHS"
      ]
    },
    {
      "Id": "find_package",
      "Summary": "Find a package (usually provided by something external to the project), and load its package-specific details.",
      "Signatures": [
        "find_package(<PackageName> [version] [EXACT] [QUIET] [MODULE] [REQUIRED] [[COMPONENTS] [components...]] [OPTIONAL_COMPONENTS components...] [NO_POLICY_SCOPE])",
        "find_package(<PackageName> [version] [EXACT] [QUIET] [REQUIRED] [[COMPONENTS] [components...]] [OPTIONAL_COMPONENTS components...] [CONFIG|NO_MODULE] [NO_POLICY_SCOPE] [NAMES name1 [name2 ...]] [CONFIGS config1 [config2 ...]] [HINTS path1 [path2 ... ]] [PATHS path1 [path2 ... ]] [PATH_SUFFIXES suffix1 [suffix2 ...]] [NO_DEFAULT_PATH] [NO_PACKAGE_ROOT_PATH] [NO_CMAKE_PATH] [NO_CMAKE_ENVIRONMENT_PATH] [NO_SYSTEM_ENVIRONMENT_PATH] [NO_CMAKE_PACKAGE_REGISTRY] [NO_CMAKE_BUILDS_PATH] # Deprecated; does nothing. [NO_CMAKE_SYSTEM_PATH] [NO_CMAKE_SYSTEM_PACKAGE_REGISTRY] [CMAKE_FIND_ROOT_PATH_BOTH | ONLY_CMAKE_FIND_ROOT_PATH | NO_CMAKE_FIND_ROOT_PATH])",
        "find_package(<PackageName> PATHS paths... NO_DEFAULT_PATH)",
        "find_package(<PackageName>)"
      ],
      "Parameters": [
        "CMAKE_LIBRARY_ARCHITECTURE",
        "CMAKE_FIND_FRAMEWORK",
        "CMAKE_FIND_ROOT_PATH",
        "CMAKE_FIND_ROOT_PATH_MODE_PACKAGE",
        "EXACT",
        "PACKAGE_FIND_NAME",
        "PACKAGE_FIND_VERSION",
        "PACKAGE_FIND_VERSION_MAJOR",
        "PACKAGE_FIND_VERSION_MINOR",
        "PACKAGE_FIND_VERSION_PATCH",
        "PACKAGE_FIND_VERSION_TWEAK",
        "PACKAGE_FIND_VERSION_COUNT",
        "PACKAGE_FIND_VERSION_RANGE",
        "PACKAGE_FIND_VERSION_RANGE_MIN",
        "PACKAGE_FIND_VERSION_RANGE_MAX",
        "PACKAGE_FIND_VERSION_MIN",
        "PACKAGE_FIND_VERSION_MIN_MAJOR",
        "PACKAGE_FIND_VERSION_MIN_MINOR",
        "PACKAGE_FIND_VERSION_MIN_PATCH",
        "PACKAGE_FIND_VERSION_MIN_TWEAK",
        "PACKAGE_FIND_VERSION_MIN_COUNT",
        "PACKAGE_FIND_VERSION_MAX",
        "PACKAGE_FIND_VERSION_MAX_MAJOR",
        "PACKAGE_FIND_VERSION_MAX_MINOR",
        "PACKAGE_FIND_VERSION_MAX_PATCH",
        "PACKAGE_FIND_VERSION_MAX_TWEAK",
        "PACKAGE_FIND_VERSION_MAX_COUNT",
        "PACKAGE_VERSION",
        "PACKAGE_VERSION_EXACT",
        "PACKAGE_VERSION_COMPATIBLE",
        "PACKAGE_VERSION_UNSUITABLE",
        "CMAKE_FIND_PACKAGE_SORT_DIRECTION",
        "CMAKE_FIND_PACKAGE_NAME"
      ]
    },
    {
      "Id": "find_path",
      "Summary": "",
      "Signatures": [
        "find_path(<VAR> name1 [path1 path2 ...])",
        "find_path(<VAR> name | NAMES name1 [name2 ...] [HINTS [path | ENV var]... ] [PATHS [path | ENV var]... ] [PATH_SUFFIXES suffix1 [suffix2 ...]] [DOC \"cache documentation string\"] [NO_CACHE] [REQUIRED] [NO_DEFAULT_PATH] [NO_PACKAGE_ROOT_PATH] [NO_CMAKE_PATH] [NO_CMAKE_ENVIRONMENT_PATH] [NO_SYSTEM_ENVIRONMENT_PATH] [NO_CMAKE_SYSTEM_PATH] [CMAKE_FIND_ROOT_PATH_BOTH | ONLY_CMAKE_FIND_ROOT_PATH | NO_CMAKE_FIND_ROOT_PATH])",
        "find_path(<VAR> NAMES name PATHS paths... NO_DEFAULT_PATH)",
        "find_path(<VAR> NAMES name)"
      ],
      "Parameters": [
        "CMAKE_FIND_APPBUNDLE",
        "CMAKE_FIND_ROOT_PATH",
        "CMAKE_FIND_ROOT_PATH_MODE_INCLUDE"
      ]
    },
    {
      "Id": "find_program",
      "Summary": "",
      "Signatures": [
        "find_program(<VAR> name1 [path1 path2 ...])",
        "find_program(<VAR> name | NAMES name1 [name2 ...] [NAMES_PER_DIR] [HINTS [path | ENV var]... ] [PATHS [path | ENV var]... ] [PATH_SUFFIXES suffix1 [suffix2 ...]] [DOC \"cache documentation string\"] [NO_CACHE] [REQUIRED] [NO_DEFAULT_PATH] [NO_PACKAGE_ROOT_PATH] [NO_CMAKE_PATH] [NO_CMAKE_ENVIRONMENT_PATH] [NO_SYSTEM_ENVIRONMENT_PATH] [NO_CMAKE_SYSTEM_PATH] [CMAKE_FIND_ROOT_PATH_BOTH | ONLY_CMAKE_FIND_ROOT_PATH | NO_CMAKE_FIND_ROOT_PATH])",
        "find_program(<VAR> NAMES name PATHS paths... NO_DEFAULT_PATH)",
        "find_program(<VAR> NAMES name)"
      ],
      "Parameters": [
        "CMAKE_FIND_APPBUNDLE",
        "CMAKE_FIND_ROOT_PATH",
        "CMAKE_FIND_ROOT_PATH_MODE_PROGRAM"
      ]
    },
    {
      "Id": "foreach",
      "Summary": "Evaluate a group of commands for each value in a list.",
      "Signatures": [
        "foreach(<loop_var> <items>)",
        "foreach(<loop_var> RANGE <stop>)",
        "foreach(<loop_var> RANGE <start> <stop> [<step>])",
        "foreach(<loop_var> IN [LISTS [<lists>]] [ITEMS [<items>]])",
        "foreach(<loop_var>... IN ZIP_LISTS <lists>)"
      ],
      "Parameters": [
        "CMP0124"
      ]
    },
    {
      "Id": "function",
      "Summary": "Start recording a function for later invocation as a command.",
      "Signatures": [
        "function(<name> [<arg1> ...])"
      ],
      "Parameters": []
    },
    {
      "Id": "get_cmake_property",
      "Summary": "Get a global property of the CMake instance.",
      "Signatures": [
        "get_cmake_property(<var> <property>)"
      ],
      "Parameters": []
    },
    {
      "Id": "get_directory_property",
      "Summary": "Get a property of ``DIRECTORY`` scope.",
      "Signatures": [
        "get_directory_property(<variable> [DIRECTORY <dir>] <prop-name>)",
        "get_directory_property(<variable> [DIRECTORY <dir>] DEFINITION <var-name>)"
      ],
      "Parameters": []
    },
    {
      "Id": "get_filename_component",
      "Summary": "Get a specific component of a full filename.",
      "Signatures": [
        "get_filename_component(<var> <FileName> <mode> [CACHE])",
        "get_filename_component(<var> <FileName> <mode> [BASE_DIR <dir>] [CACHE])",
        "get_filename_component(<var> <FileName> PROGRAM [PROGRAM_ARGS <arg_var>] [CACHE])"
      ],
      "Parameters": [
        "DIRECTORY",
        "NAME",
        "EXT",
        "NAME_WE",
        "LAST_EXT",
        "NAME_WLE",
        "PATH",
        "CMAKE_CURRENT_SOURCE_DIR",
        "ABSOLUTE",
        "REALPATH"
      ]
    },
    {
      "Id": "get_property",
      "Summary": "Get a property.",
      "Signatures": [
        "get_property(<variable> <GLOBAL | DIRECTORY [<dir>] | TARGET <target> | SOURCE <source> [DIRECTORY <dir> | TARGET_DIRECTORY <target>] | INSTALL <file> | TEST <test> | CACHE <entry> | VARIABLE > PROPERTY <name> [SET | DEFINED | BRIEF_DOCS | FULL_DOCS])"
      ],
      "Parameters": [
        "NOTFOUND"
      ]
    },
    {
      "Id": "if",
      "Summary": "Conditionally execute a group of commands.",
      "Signatures": [
        "if(<condition>)",
        "if(<constant>)",
        "if(<variable|string>)",
        "if(NOT <condition>)",
        "if(<cond1> AND <cond2>)",
        "if(<cond1> OR <cond2>)",
        "if((condition)",
        "if(COMMAND command-name)",
        "if(POLICY policy-id)",
        "if(TARGET target-name)",
        "if(TEST test-name)",
        "if(DEFINED <name>|CACHE{<name>}|ENV{<name>})",
        "if(<variable|string> IN_LIST <variable>)",
        "if(EXISTS path-to-file-or-directory)",
        "if(file1 IS_NEWER_THAN file2)",
        "if(IS_DIRECTORY path-to-directory)",
        "if(IS_SYMLINK file-name)",
        "if(IS_ABSOLUTE path)",
        "if(<variable|string> MATCHES regex)",
        "if(<variable|string> LESS <variable|string>)",
        "if(<variable|string> GREATER <variable|string>)",
        "if(<variable|string> EQUAL <variable|string>)",
        "if(<variable|string> LESS_EQUAL <variable|string>)",
        "if(<variable|string> GREATER_EQUAL <variable|string>)",
        "if(<variable|string> STRLESS <variable|string>)",
        "if(<variable|string> STRGREATER <variable|string>)",
        "if(<variable|string> STREQUAL <variable|string>)",
        "if(<variable|string> STRLESS_EQUAL <variable|string>)",
        "if(<variable|string> STRGREATER_EQUAL <variable|string>)",
        "if(<variable|string> VERSION_LESS <variable|string>)",
        "if(<variable|string> VERSION_GREATER <variable|string>)",
        "if(<variable|string> VERSION_EQUAL <variable|string>)",
        "if(<variable|string> VERSION_LESS_EQUAL <variable|string>)",
        "if(<variable|string> VERSION_GREATER_EQUAL <variable|string>)",
        "if(${var2})",
        "if(var1)",
        "if(var2)"
      ],
      "Parameters": []
    },
    {
      "Id": "include",
      "Summary": "Load and run CMake code from a file or module.",
      "Signatures": [
        "include(<file|module> [OPTIONAL] [RESULT_VARIABLE <var>] [NO_POLICY_SCOPE])"
      ],
      "Parameters": [
        "CMAKE_MODULE_PATH"
      ]
    },
    {
      "Id": "include_guard",
      "Summary": "Provides an include guard for the file currently being processed by CMake.",
      "Signatures": [
        "include_guard([DIRECTORY|GLOBAL])"
      ],
      "Parameters": [
        "CMAKE_CURRENT_LIST_FILE"
      ]
    },
    {
      "Id": "list",
      "Summary": "List operations.",
      "Signatures": [
        "list(LENGTH <list> <output variable>)",
        "list(GET <list> <element index> [<element index> ...] <output variable>)",
        "list(JOIN <list> <glue> <output variable>)",
        "list(SUBLIST <list> <begin> <length> <output variable>)",
        "list(FIND <list> <value> <output variable>)",
        "list(APPEND <list> [<element> ...])",
        "list(FILTER <list> <INCLUDE|EXCLUDE> REGEX <regular_expression>)",
        "list(INSERT <list> <element_index> <element> [<element> ...])",
        "list(POP_BACK <list> [<out-var>...])",
        "list(POP_FRONT <list> [<out-var>...])",
        "list(PREPEND <list> [<element> ...])",
        "list(REMOVE_ITEM <list> <value> [<value> ...])",
        "list(REMOVE_AT <list> <index> [<index> ...])",
        "list(REMOVE_DUPLICATES <list>)",
        "list(TRANSFORM <list> <ACTION> [<SELECTOR>] [OUTPUT_VARIABLE <output variable>])",
        "list(REVERSE <list>)",
        "list(SORT <list> [COMPARE <compare>] [CASE <case>] [ORDER <order>])"
      ],
      "Parameters": [
        "APPEND",
        "TOUPPER",
        "STRIP",
        "GENEX_STRIP",
        "REPLACE",
        "AT",
        "FOR",
        "REGEX"
      ]
    },
    {
      "Id": "macro",
      "Summary": "Start recording a macro for later invocation as a command",
      "Signatures": [
        "macro(<name> [<arg1> ...])"
      ],
      "Parameters": []
    },
    {
      "Id": "mark_as_advanced",
      "Summary": "Mark cmake cached variables as advanced.",
      "Signatures": [
        "mark_as_advanced([CLEAR|FORCE] <var1> ...)"
      ],
      "Parameters": []
    },
    {
      "Id": "math",
      "Summary": "Evaluate a mathematical expression.",
      "Signatures": [
        "math(EXPR <variable> \"<expression>\" [OUTPUT_FORMAT <format>])"
      ],
      "Parameters": []
    },
    {
      "Id": "message",
      "Summary": "Log a message.",
      "Signatures": [
        "message([<mode>] \"message text\" ...)",
        "message(<checkState> \"message\" ...)"
      ],
      "Parameters": [
        "FATAL_ERROR",
        "SEND_ERROR",
        "WARNING",
        "AUTHOR_WARNING",
        "DEPRECATION",
        "STATUS",
        "VERBOSE",
        "DEBUG",
        "TRACE",
        "CHECK_PASS"
      ]
    },
    {
      "Id": "option",
      "Summary": "Provide an option that the user can optionally select.",
      "Signatures": [
        "option(<variable> \"<help_text>\" [value])"
      ],
      "Parameters": []
    },
    {
      "Id": "return",
      "Summary": "Return from a file, directory or function.",
      "Signatures": [
        "return()"
      ],
      "Parameters": []
    },
    {
      "Id": "separate_arguments",
      "Summary": "Parse command-line arguments into a semicolon-separated list.",
      "Signatures": [
        "separate_arguments(<variable> <mode> [PROGRAM [SEPARATE_ARGS]] <args>)",
        "separate_arguments(<var>)"
      ],
      "Parameters": [
        "UNIX_COMMAND",
        "WINDOWS_COMMAND",
        "NATIVE_COMMAND"
      ]
    },
    {
      "Id": "set",
      "Summary": "Set a normal, cache, or environment variable to a given value.",
      "Signatures": [
        "set(<variable> <value>... [PARENT_SCOPE])",
        "set(<variable> <value>... CACHE <type> <docstring> [FORCE])",
        "set(ENV{<variable>} [<value>])"
      ],
      "Parameters": [
        "BOOL",
        "FILEPATH",
        "PATH",
        "STRING",
        "INTERNAL"
      ]
    },
    {
      "Id": "set_directory_properties",
      "Summary": "Set properties of the current directory and subdirectories.",
      "Signatures": [
        "set_directory_properties(PROPERTIES prop1 value1 [prop2 value2] ...)"
      ],
      "Parameters": []
    },
    {
      "Id": "set_property",
      "Summary": "Set a named property in a given scope.",
      "Signatures": [
        "set_property(<GLOBAL | DIRECTORY [<dir>] | TARGET [<target1> ...] | SOURCE [<src1> ...] [DIRECTORY <dirs> ...] [TARGET_DIRECTORY <targets> ...] | INSTALL [<file1> ...] | TEST [<test1> ...] | CACHE [<entry1> ...] > [APPEND] [APPEND_STRING] PROPERTY <name> [<value1> ...])"
      ],
      "Parameters": []
    },
    {
      "Id": "site_name",
      "Summary": "Set the given variable to the name of the computer.",
      "Signatures": [
        "site_name(variable)"
      ],
      "Parameters": []
    },
    {
      "Id": "string",
      "Summary": "String operations.",
      "Signatures": [
        "string(FIND <string> <substring> <output_variable> [REVERSE])",
        "string(REPLACE <match_string> <replace_string> <output_variable> <input> [<input>...])",
        "string(REGEX MATCH <regular_expression> <output_variable> <input> [<input>...])",
        "string(REGEX MATCHALL <regular_expression> <output_variable> <input> [<input>...])",
        "string(REGEX REPLACE <regular_expression> <replacement_expression> <output_variable> <input> [<input>...])",
        "string(APPEND <string_variable> [<input>...])",
        "string(PREPEND <string_variable> [<input>...])",
        "string(CONCAT <output_variable> [<input>...])",
        "string(JOIN <glue> <output_variable> [<input>...])",
        "string(TOLOWER <string> <output_variable>)",
        "string(TOUPPER <string> <output_variable>)",
        "string(LENGTH <string> <output_variable>)",
        "string(SUBSTRING <string> <begin> <length> <output_variable>)",
        "string(STRIP <string> <output_variable>)",
        "string(GENEX_STRIP <string> <output_variable>)",
        "string(REPEAT <string> <count> <output_variable>)",
        "string(COMPARE LESS <string1> <string2> <output_variable>)",
        "string(COMPARE GREATER <string1> <string2> <output_variable>)",
        "string(COMPARE EQUAL <string1> <string2> <output_variable>)",
        "string(COMPARE NOTEQUAL <string1> <string2> <output_variable>)",
        "string(COMPARE LESS_EQUAL <string1> <string2> <output_variable>)",
        "string(COMPARE GREATER_EQUAL <string1> <string2> <output_variable>)",
        "string(<HASH> <output_variable> <input>)",
        "string(ASCII <number> [<number> ...] <output_variable>)",
        "string(HEX <string> <output_variable>)",
        "string(CONFIGURE <string> <output_variable> [@ONLY] [ESCAPE_QUOTES])",
        "string(MAKE_C_IDENTIFIER <string> <output_variable>)",
        "string(RANDOM [LENGTH <length>] [ALPHABET <alphabet>] [RANDOM_SEED <seed>] <output_variable>)",
        "string(TIMESTAMP <output_variable> [<format_string>] [UTC])",
        "string(UUID <output_variable> NAMESPACE <namespace> NAME <name> TYPE <MD5|SHA1> [UPPER])",
        "string(JSON <out-var> [ERROR_VARIABLE <error-variable>] GET <json-string> <member|index> [<member|index> ...])",
        "string(JSON <out-var> [ERROR_VARIABLE <error-variable>] TYPE <json-string> <member|index> [<member|index> ...])",
        "string(JSON <out-var> [ERROR_VARIABLE <error-var>] MEMBER <json-string> [<member|index> ...] <index>)",
        "string(JSON <out-var> [ERROR_VARIABLE <error-variable>] LENGTH <json-string> <member|index> [<member|index> ...])",
        "string(JSON <out-var> [ERROR_VARIABLE <error-variable>] REMOVE <json-string> <member|index> [<member|index> ...])",
        "string(JSON <out-var> [ERROR_VARIABLE <error-variable>] SET <json-string> <member|index> [<member|index> ...] <value>)",
        "string(JSON <out-var> [ERROR_VARIABLE <error-var>] EQUAL <json-string1> <json-string2>)"
      ],
      "Parameters": [
        "MD5",
        "SHA1",
        "SHA224",
        "SHA256",
        "SHA384",
        "SHA512",
        "SHA3_224",
        "SHA3_256",
        "SHA3_384",
        "SHA3_512",
        "ARRAY"
      ]
    },
    {
      "Id": "unset",
      "Summary": "Unset a variable, cache variable, or environment variable.",
      "Signatures": [
        "unset(<variable> [CACHE | PARENT_SCOPE])",
        "unset(ENV{<variable>})"
      ],
      "Parameters": []
    },
    {
      "Id": "variable_watch",
      "Summary": "Watch the CMake variable for change.",
      "Signatures": [
        "variable_watch(<variable> [<command>])"
      ],
      "Parameters": []
    },
    {
      "Id": "while",
      "Summary": "Evaluate a group of commands while a condition is true",
      "Signatures": [
        "while(<condition>)",
        "while(<constant>)",
        "while(<variable|string>)",
        "while(NOT <condition>)",
        "while(<cond1> AND <cond2>)",
        "while(<cond1> OR <cond2>)",
        "while(DEFINED <name>|CACHE{<name>}|ENV{<name>})",
        "while(<variable|string> IN_LIST <variable>)",
        "while(<variable|string> MATCHES regex)",
        "while(<variable|string> LESS <variable|string>)",
        "while(<variable|string> GREATER <variable|string>)",
        "while(<variable|string> EQUAL <variable|string>)",
        "while(<variable|string> LESS_EQUAL <variable|string>)",
        "while(<variable|string> GREATER_EQUAL <variable|string>)",
        "while(<variable|string> STRLESS <variable|string>)",
        "while(<variable|string> STRGREATER <variable|string>)",
        "while(<variable|string> STREQUAL <variable|string>)",
        "while(<variable|string> STRLESS_EQUAL <variable|string>)",
        "while(<variable|string> STRGREATER_EQUAL <variable|string>)",
        "while(<variable|string> VERSION_LESS <variable|string>)",
        "while(<variable|string> VERSION_GREATER <variable|string>)",
        "while(<variable|string> VERSION_EQUAL <variable|string>)",
        "while(<variable|string> VERSION_LESS_EQUAL <variable|string>)",
        "while(<variable|string> VERSION_GREATER_EQUAL <variable|string>)",
        "while(var1)",
        "while(var2)"
      ],
      "Parameters": []
    },
    {
      "Id": "add_compile_definitions",
      "Summary": "Add preprocessor definitions to the compilation of source files.",
      "Signatures": [
        "add_compile_definitions(<definition> ...)"
      ],
      "Parameters": []
    },
    {
      "Id": "add_compile_options",
      "Summary": "Add options to the compilation of source files.",
      "Signatures": [
        "add_compile_options(<option> ...)"
      ],
      "Parameters": []
    },
    {
      "Id": "add_custom_command",
      "Summary": "Add a custom build rule to the generated build system.",
      "Signatures": [
        "add_custom_command(OUTPUT output1 [output2 ...] COMMAND command1 [ARGS] [args1...] [COMMAND command2 [ARGS] [args2...] ...] [MAIN_DEPENDENCY depend] [DEPENDS [depends...]] [BYPRODUCTS [files...]] [IMPLICIT_DEPENDS <lang1> depend1 [<lang2> depend2] ...] [WORKING_DIRECTORY dir] [COMMENT comment] [DEPFILE depfile] [JOB_POOL job_pool] [VERBATIM] [APPEND] [USES_TERMINAL] [COMMAND_EXPAND_LISTS])",
        "add_custom_command(TARGET <target> PRE_BUILD | PRE_LINK | POST_BUILD COMMAND command1 [ARGS] [args1...] [COMMAND command2 [ARGS] [args2...] ...] [BYPRODUCTS [files...]] [WORKING_DIRECTORY dir] [COMMENT comment] [VERBATIM] [USES_TERMINAL] [COMMAND_EXPAND_LISTS])"
      ],
      "Parameters": []
    },
    {
      "Id": "add_custom_target",
      "Summary": "Add a target with no output so it will always be built.",
      "Signatures": [
        "add_custom_target(Name [ALL] [command1 [args1...]] [COMMAND command2 [args2...] ...] [DEPENDS depend depend depend ... ] [BYPRODUCTS [files...]] [WORKING_DIRECTORY dir] [COMMENT comment] [JOB_POOL job_pool] [VERBATIM] [USES_TERMINAL] [COMMAND_EXPAND_LISTS] [SOURCES src1 [src2...]])"
      ],
      "Parameters": []
    },
    {
      "Id": "add_definitions",
      "Summary": "Add -D define flags to the compilation of source files.",
      "Signatures": [],
      "Parameters": []
    },
    {
      "Id": "add_dependencies",
      "Summary": "Add a dependency between top-level targets.",
      "Signatures": [
        "add_dependencies(<target> [<target-dependency>]...)"
      ],
      "Parameters": []
    },
    {
      "Id": "add_executable",
      "Summary": "Add an executable to the project using the specified source files.",
      "Signatures": [
        "add_executable(<name> [WIN32] [MACOSX_BUNDLE] [EXCLUDE_FROM_ALL] [source1] [source2 ...])",
        "add_executable(<name> IMPORTED [GLOBAL])",
        "add_executable(<name> ALIAS <target>)"
      ],
      "Parameters": [
        "RUNTIME_OUTPUT_DIRECTORY",
        "IMPORTED_LOCATION"
      ]
    },
    {
      "Id": "add_library",
      "Summary": "Add a library to the project using the specified source files.",
      "Signatures": [
        "add_library(<name> [STATIC | SHARED | MODULE] [EXCLUDE_FROM_ALL] [<source>...])",
        "add_library(<name> OBJECT [<source>...])",
        "add_library(... $<TARGET_OBJECTS:objlib> ...)",
        "add_library(<name> INTERFACE)",
        "add_library(<name> <type> IMPORTED [GLOBAL])",
        "add_library(<name> ALIAS <target>)"
      ],
      "Parameters": [
        "LIBRARY_OUTPUT_DIRECTORY",
        "RUNTIME_OUTPUT_DIRECTORY",
        "PRE_BUILD",
        "INTERFACE_",
        "STATIC",
        "OBJECT",
        "INTERFACE"
      ]
    },
    {
      "Id": "add_link_options",
      "Summary": "Add options to the link step for executable, shared library or module library targets in the current directory and below that are added after this command is invoked.",
      "Signatures": [
        "add_link_options(<option> ...)"
      ],
      "Parameters": []
    },
    {
      "Id": "add_subdirectory",
      "Summary": "Add a subdirectory to the build.",
      "Signatures": [
        "add_subdirectory(source_dir [binary_dir] [EXCLUDE_FROM_ALL])"
      ],
      "Parameters": []
    },
    {
      "Id": "add_test",
      "Summary": "Add a test to the project to be run by ``ctest(1)``.",
      "Signatures": [
        "add_test(NAME <name> COMMAND <command> [<arg>...] [CONFIGURATIONS <config>...] [WORKING_DIRECTORY <dir>] [COMMAND_EXPAND_LISTS])",
        "add_test(<name> <command> [<arg>...])"
      ],
      "Parameters": [
        "FAIL_REGULAR_EXPRESSION",
        "SKIP_REGULAR_EXPRESSION"
      ]
    },
    {
      "Id": "aux_source_directory",
      "Summary": "Find all source files in a directory.",
      "Signatures": [
        "aux_source_directory(<dir> <variable>)"
      ],
      "Parameters": []
    },
    {
      "Id": "build_command",
      "Summary": "Get a command line to build the current project.",
      "Signatures": [
        "build_command(<variable> [CONFIGURATION <config>] [PARALLEL_LEVEL <parallel>] [TARGET <target>] [PROJECT_NAME <projname>] # legacy, causes warning)",
        "build_command(<cachevariable> <makecommand>)"
      ],
      "Parameters": [
        "NEW"
      ]
    },
    {
      "Id": "create_test_sourcelist",
      "Summary": "Create a test driver and source list for building test programs.",
      "Signatures": [
        "create_test_sourcelist(sourceListName driverName test1 test2 test3 EXTRA_INCLUDE include.h FUNCTION function)"
      ],
      "Parameters": [
        "CMAKE_TESTDRIVER_BEFORE_TESTMAIN",
        "CMAKE_TESTDRIVER_AFTER_TESTMAIN"
      ]
    },
    {
      "Id": "define_property",
      "Summary": "Define and document custom properties.",
      "Signatures": [
        "define_property(<GLOBAL | DIRECTORY | TARGET | SOURCE | TEST | VARIABLE | CACHED_VARIABLE> PROPERTY <name> [INHERITED] BRIEF_DOCS <brief-doc> [docs...] FULL_DOCS <full-doc> [docs...])"
      ],
      "Parameters": [
        "HIP"
      ]
    },
    {
      "Id": "enable_testing",
      "Summary": "Enable testing for current directory and below.",
      "Signatures": [
        "enable_testing()"
      ],
      "Parameters": []
    },
    {
      "Id": "export",
      "Summary": "Export targets from the build tree for use by outside projects.",
      "Signatures": [
        "export(EXPORT <export-name> [NAMESPACE <namespace>] [FILE <filename>])",
        "export(TARGETS [target1 [target2 [...]]] [NAMESPACE <namespace>] [APPEND] FILE <filename> [EXPORT_LINK_INTERFACE_LIBRARIES])",
        "export(PACKAGE <PackageName>)",
        "export(TARGETS [target1 [target2 [...]]] [ANDROID_MK <filename>])"
      ],
      "Parameters": []
    },
    {
      "Id": "fltk_wrap_ui",
      "Summary": "Create FLTK user interfaces Wrappers.",
      "Signatures": [
        "fltk_wrap_ui(resultingLibraryName source1 source2 ... sourceN)"
      ],
      "Parameters": []
    },
    {
      "Id": "get_source_file_property",
      "Summary": "Get a property for a source file.",
      "Signatures": [
        "get_source_file_property(<variable> <file> [DIRECTORY <dir> | TARGET_DIRECTORY <target>] <property>)"
      ],
      "Parameters": []
    },
    {
      "Id": "get_target_property",
      "Summary": "Get a property from a target.",
      "Signatures": [
        "get_target_property(<VAR> target property)"
      ],
      "Parameters": []
    },
    {
      "Id": "get_test_property",
      "Summary": "Get a property of the test.",
      "Signatures": [
        "get_test_property(test property VAR)"
      ],
      "Parameters": []
    },
    {
      "Id": "include_directories",
      "Summary": "Add include directories to the build.",
      "Signatures": [
        "include_directories([AFTER|BEFORE] [SYSTEM] dir1 [dir2 ...])"
      ],
      "Parameters": [
        "CMAKE_INCLUDE_DIRECTORIES_BEFORE"
      ]
    },
    {
      "Id": "include_external_msproject",
      "Summary": "Include an external Microsoft project file in a workspace.",
      "Signatures": [
        "include_external_msproject(projectname location [TYPE projectTypeGUID] [GUID projectGUID] [PLATFORM platformName] dep1 dep2 ...)"
      ],
      "Parameters": []
    },
    {
      "Id": "include_regular_expression",
      "Summary": "Set the regular expression used for dependency checking.",
      "Signatures": [
        "include_regular_expression(regex_match [regex_complain])"
      ],
      "Parameters": []
    },
    {
      "Id": "install",
      "Summary": "Specify rules to run at install time.",
      "Signatures": [
        "install(TARGETS <target>... [...])",
        "install(IMPORTED_RUNTIME_ARTIFACTS <target>... [...])",
        "install({FILES | PROGRAMS} <file>... [...])",
        "install(DIRECTORY <dir>... [...])",
        "install(SCRIPT <file> [...])",
        "install(CODE <code> [...])",
        "install(EXPORT <export-name> [...])",
        "install(RUNTIME_DEPENDENCY_SET <set-name> [...])",
        "install(TARGETS targets... [EXPORT <export-name>] [RUNTIME_DEPENDENCIES args...|RUNTIME_DEPENDENCY_SET <set-name>] [[ARCHIVE|LIBRARY|RUNTIME|OBJECTS|FRAMEWORK|BUNDLE| PRIVATE_HEADER|PUBLIC_HEADER|RESOURCE] [DESTINATION <dir>] [PERMISSIONS permissions...] [CONFIGURATIONS [Debug|Release|...]] [COMPONENT <component>] [NAMELINK_COMPONENT <component>] [OPTIONAL] [EXCLUDE_FROM_ALL] [NAMELINK_ONLY|NAMELINK_SKIP] ] [...] [INCLUDES DESTINATION [<dir> ...]])",
        "install(RUNTIME_DEPENDENCY_SET)",
        "install(IMPORTED_RUNTIME_ARTIFACTS targets... [RUNTIME_DEPENDENCY_SET <set-name>] [[LIBRARY|RUNTIME|FRAMEWORK|BUNDLE] [DESTINATION <dir>] [PERMISSIONS permissions...] [CONFIGURATIONS [Debug|Release|...]] [COMPONENT <component>] [OPTIONAL] [EXCLUDE_FROM_ALL] ] [...])",
        "install(<FILES|PROGRAMS> files... TYPE <type> | DESTINATION <dir> [PERMISSIONS permissions...] [CONFIGURATIONS [Debug|Release|...]] [COMPONENT <component>] [RENAME <name>] [OPTIONAL] [EXCLUDE_FROM_ALL])",
        "install(DIRECTORY dirs... TYPE <type> | DESTINATION <dir> [FILE_PERMISSIONS permissions...] [DIRECTORY_PERMISSIONS permissions...] [USE_SOURCE_PERMISSIONS] [OPTIONAL] [MESSAGE_NEVER] [CONFIGURATIONS [Debug|Release|...]] [COMPONENT <component>] [EXCLUDE_FROM_ALL] [FILES_MATCHING] [[PATTERN <pattern> | REGEX <regex>] [EXCLUDE] [PERMISSIONS permissions...]] [...])",
        "install([[SCRIPT <file>] [CODE <code>]] [ALL_COMPONENTS | COMPONENT <component>] [EXCLUDE_FROM_ALL] [...])",
        "install(EXPORT <export-name> DESTINATION <dir> [NAMESPACE <namespace>] [[FILE <name>.cmake]| [PERMISSIONS permissions...] [CONFIGURATIONS [Debug|Release|...]] [EXPORT_LINK_INTERFACE_LIBRARIES] [COMPONENT <component>] [EXCLUDE_FROM_ALL])",
        "install(EXPORT_ANDROID_MK <export-name> DESTINATION <dir> [...])",
        "install(RUNTIME_DEPENDENCY_SET <set-name> [[LIBRARY|RUNTIME|FRAMEWORK] [DESTINATION <dir>] [PERMISSIONS permissions...] [CONFIGURATIONS [Debug|Release|...]] [COMPONENT <component>] [NAMELINK_COMPONENT <component>] [OPTIONAL] [EXCLUDE_FROM_ALL] ] [...] [PRE_INCLUDE_REGEXES regexes...] [PRE_EXCLUDE_REGEXES regexes...] [POST_INCLUDE_REGEXES regexes...] [POST_EXCLUDE_REGEXES regexes...] [POST_INCLUDE_FILES files...] [POST_EXCLUDE_FILES files...] [DIRECTORIES directories...])"
      ],
      "Parameters": [
        "DESTINATION",
        "PERMISSIONS",
        "CONFIGURATIONS",
        "COMPONENT",
        "EXCLUDE_FROM_ALL",
        "RENAME",
        "OPTIONAL",
        "RUNTIME_DEPENDENCIES",
        "MACOSX_BUNDLE",
        "WORLD_READ",
        "GROUP_EXECUTE",
        "BIN",
        "SBIN",
        "LIB",
        "INCLUDE",
        "SYSCONF",
        "SHAREDSTATE",
        "LOCALSTATE",
        "RUNSTATE",
        "DATA",
        "INFO",
        "LOCALE",
        "MAN",
        "DOC",
        "CMAKE_INSTALL_DATAROOTDIR",
        "PROGRAMS",
        "BUNDLE_EXECUTABLE"
      ]
    },
    {
      "Id": "link_directories",
      "Summary": "Add directories in which the linker will look for libraries.",
      "Signatures": [
        "link_directories([AFTER|BEFORE] directory1 [directory2 ...])"
      ],
      "Parameters": []
    },
    {
      "Id": "link_libraries",
      "Summary": "Link libraries to all targets added later.",
      "Signatures": [
        "link_libraries([item1 [item2 [...]]] [[debug|optimized|general] <item>] ...)"
      ],
      "Parameters": []
    },
    {
      "Id": "load_cache",
      "Summary": "Load in the values from another project's CMake cache.",
      "Signatures": [
        "load_cache(pathToBuildDirectory READ_WITH_PREFIX prefix entry1...)",
        "load_cache(pathToBuildDirectory [EXCLUDE entry1...] [INCLUDE_INTERNALS entry1...])"
      ],
      "Parameters": []
    },
    {
      "Id": "project",
      "Summary": "Set the name of the project.",
      "Signatures": [
        "project(<PROJECT-NAME> [<language-name>...])",
        "project(<PROJECT-NAME> [VERSION <major>[.<minor>[.<patch>[.<tweak>]]]] [DESCRIPTION <project-description-string>] [HOMEPAGE_URL <url-string>] [LANGUAGES <language-name>...])",
        "project(Project)"
      ],
      "Parameters": [
        "PROJECT_NAME",
        "PROJECT_SOURCE_DIR",
        "PROJECT_BINARY_DIR",
        "PROJECT_IS_TOP_LEVEL"
      ]
    },
    {
      "Id": "remove_definitions",
      "Summary": "Remove -D define flags added by ``add_definitions()``.",
      "Signatures": [],
      "Parameters": []
    },
    {
      "Id": "set_source_files_properties",
      "Summary": "Source files can have properties that affect how they are built.",
      "Signatures": [
        "set_source_files_properties(<files> ... [DIRECTORY <dirs> ...] [TARGET_DIRECTORY <targets> ...] PROPERTIES <prop1> <value1> [<prop2> <value2>] ...)"
      ],
      "Parameters": []
    },
    {
      "Id": "set_target_properties",
      "Summary": "Targets can have properties that affect how they are built.",
      "Signatures": [
        "set_target_properties(target1 target2 ... PROPERTIES prop1 value1 prop2 value2 ...)"
      ],
      "Parameters": []
    },
    {
      "Id": "set_tests_properties",
      "Summary": "Set a property of the tests.",
      "Signatures": [
        "set_tests_properties(test1 [test2...] PROPERTIES prop1 value1 prop2 value2)"
      ],
      "Parameters": []
    },
    {
      "Id": "source_group",
      "Summary": "Define a grouping for source files in IDE project generation.",
      "Signatures": [
        "source_group(<name> [FILES <src>...] [REGULAR_EXPRESSION <regex>])",
        "source_group(TREE <root> [PREFIX <prefix>] [FILES <src>...])",
        "source_group(TREE <root> PREFIX sources\\\\inc ...)",
        "source_group(<name> <regex>)",
        "source_group(<name> REGULAR_EXPRESSION <regex>)"
      ],
      "Parameters": [
        "TREE",
        "PREFIX",
        "REGULAR_EXPRESSION"
      ]
    },
    {
      "Id": "target_compile_definitions",
      "Summary": "Add compile definitions to a target.",
      "Signatures": [
        "target_compile_definitions(<target> <INTERFACE|PUBLIC|PRIVATE> [items1...] [<INTERFACE|PUBLIC|PRIVATE> [items2...] ...])"
      ],
      "Parameters": [
        "INTERFACE_COMPILE_DEFINITIONS"
      ]
    },
    {
      "Id": "target_compile_features",
      "Summary": "Add expected compiler features to a target.",
      "Signatures": [
        "target_compile_features(<target> <PRIVATE|PUBLIC|INTERFACE> <feature> [...])"
      ],
      "Parameters": [
        "CMAKE_CUDA_COMPILE_FEATURES",
        "INTERFACE_COMPILE_FEATURES"
      ]
    },
    {
      "Id": "target_compile_options",
      "Summary": "Add compile options to a target.",
      "Signatures": [
        "target_compile_options(<target> [BEFORE] <INTERFACE|PUBLIC|PRIVATE> [items1...] [<INTERFACE|PUBLIC|PRIVATE> [items2...] ...])"
      ],
      "Parameters": [
        "INTERFACE_COMPILE_OPTIONS"
      ]
    },
    {
      "Id": "target_include_directories",
      "Summary": "Add include directories to a target.",
      "Signatures": [
        "target_include_directories(<target> [SYSTEM] [AFTER|BEFORE] <INTERFACE|PUBLIC|PRIVATE> [items1...] [<INTERFACE|PUBLIC|PRIVATE> [items2...] ...])"
      ],
      "Parameters": [
        "INTERFACE_INCLUDE_DIRECTORIES",
        "INTERFACE_SYSTEM_INCLUDE_DIRECTORIES",
        "INSTALL_INTERFACE"
      ]
    },
    {
      "Id": "target_link_directories",
      "Summary": "Add link directories to a target.",
      "Signatures": [
        "target_link_directories(<target> [BEFORE] <INTERFACE|PUBLIC|PRIVATE> [items1...] [<INTERFACE|PUBLIC|PRIVATE> [items2...] ...])"
      ],
      "Parameters": [
        "INTERFACE_LINK_DIRECTORIES"
      ]
    },
    {
      "Id": "target_link_libraries",
      "Summary": "Specify libraries or flags to use when linking a given target and/or its dependents.",
      "Signatures": [
        "target_link_libraries(<target> ... <item>... ...)",
        "target_link_libraries(<target> <PRIVATE|PUBLIC|INTERFACE> <item>... [<PRIVATE|PUBLIC|INTERFACE> <item>...]...)",
        "target_link_libraries(<target> <item>...)",
        "target_link_libraries(<target> <LINK_PRIVATE|LINK_PUBLIC> <lib>... [<LINK_PRIVATE|LINK_PUBLIC> <lib>...]...)",
        "target_link_libraries(<target> LINK_INTERFACE_LIBRARIES <item>...)",
        "target_link_libraries(main3 PRIVATE a3 $<TARGET_OBJECTS:obj3> b3)",
        "target_link_libraries(iface_obj3 INTERFACE obj3 $<TARGET_OBJECTS:obj3>)"
      ],
      "Parameters": [
        "INTERFACE_LINK_LIBRARIES",
        "NEW",
        "LINK_INTERFACE_LIBRARIES",
        "PRIVATE",
        "CMP0022",
        "LINK_INTERFACE_LIBRARIES_DEBUG"
      ]
    },
    {
      "Id": "target_link_options",
      "Summary": "Add options to the link step for an executable, shared library or module library target.",
      "Signatures": [
        "target_link_options(<target> [BEFORE] <INTERFACE|PUBLIC|PRIVATE> [items1...] [<INTERFACE|PUBLIC|PRIVATE> [items2...] ...])"
      ],
      "Parameters": [
        "INTERFACE_LINK_OPTIONS"
      ]
    },
    {
      "Id": "target_precompile_headers",
      "Summary": "Add a list of header files to precompile.",
      "Signatures": [
        "target_precompile_headers(<target> <INTERFACE|PUBLIC|PRIVATE> [header1...] [<INTERFACE|PUBLIC|PRIVATE> [header2...] ...])",
        "target_precompile_headers(myTarget PUBLIC project_header.h PRIVATE [[\"other_header.h\"]] <unordered_map>)",
        "target_precompile_headers(<target> REUSE_FROM <other_target>)"
      ],
      "Parameters": [
        "INTERFACE_PRECOMPILE_HEADERS",
        "PRECOMPILE_HEADERS",
        "DISABLE_PRECOMPILE_HEADERS"
      ]
    },
    {
      "Id": "target_sources",
      "Summary": "Add sources to a target.",
      "Signatures": [
        "target_sources(<target> <INTERFACE|PUBLIC|PRIVATE> [items1...] [<INTERFACE|PUBLIC|PRIVATE> [items2...] ...])"
      ],
      "Parameters": [
        "INTERFACE_SOURCES"
      ]
    },
    {
      "Id": "try_compile",
      "Summary": "Try building some code.",
      "Signatures": [
        "try_compile(<resultVar> <bindir> <srcdir> <projectName> [<targetName>] [CMAKE_FLAGS <flags>...] [OUTPUT_VARIABLE <var>])",
        "try_compile(<resultVar> <bindir> <srcfile|SOURCES srcfile...> [CMAKE_FLAGS <flags>...] [COMPILE_DEFINITIONS <defs>...] [LINK_OPTIONS <options>...] [LINK_LIBRARIES <libs>...] [OUTPUT_VARIABLE <var>] [COPY_FILE <fileName> [COPY_FILE_ERROR <var>]] [<LANG>_STANDARD <std>] [<LANG>_STANDARD_REQUIRED <bool>] [<LANG>_EXTENSIONS <bool>])"
      ],
      "Parameters": [
        "FALSE",
        "CMAKE_TRY_COMPILE_TARGET_TYPE"
      ]
    },
    {
      "Id": "try_run",
      "Summary": "Try compiling and then running some code.",
      "Signatures": [
        "try_run(<runResultVar> <compileResultVar> <bindir> <srcfile> [CMAKE_FLAGS <flags>...] [COMPILE_DEFINITIONS <defs>...] [LINK_OPTIONS <options>...] [LINK_LIBRARIES <libs>...] [COMPILE_OUTPUT_VARIABLE <var>] [RUN_OUTPUT_VARIABLE <var>] [OUTPUT_VARIABLE <var>] [WORKING_DIRECTORY <var>] [ARGS <args>...])"
      ],
      "Parameters": [
        "CMAKE_CROSSCOMPILING_EMULATOR"
      ]
    },
    {
      "Id": "ctest_build",
      "Summary": "Perform the :`CTest Build Step` as a :`Dashboard Client`.",
      "Signatures": [
        "ctest_build([BUILD <build-dir>] [APPEND] [CONFIGURATION <config>] [PARALLEL_LEVEL <parallel>] [FLAGS <flags>] [PROJECT_NAME <project-name>] [TARGET <target-name>] [NUMBER_ERRORS <num-err-var>] [NUMBER_WARNINGS <num-warn-var>] [RETURN_VALUE <result-var>] [CAPTURE_CMAKE_ERROR <result-var>])"
      ],
      "Parameters": [
        "QUIET"
      ]
    },
    {
      "Id": "ctest_configure",
      "Summary": "Perform the :`CTest Configure Step` as a :`Dashboard Client`.",
      "Signatures": [
        "ctest_configure([BUILD <build-dir>] [SOURCE <source-dir>] [APPEND] [OPTIONS <options>] [RETURN_VALUE <result-var>] [QUIET] [CAPTURE_CMAKE_ERROR <result-var>])"
      ],
      "Parameters": []
    },
    {
      "Id": "ctest_coverage",
      "Summary": "Perform the :`CTest Coverage Step` as a :`Dashboard Client`.",
      "Signatures": [
        "ctest_coverage([BUILD <build-dir>] [APPEND] [LABELS <label>...] [RETURN_VALUE <result-var>] [CAPTURE_CMAKE_ERROR <result-var>] [QUIET])"
      ],
      "Parameters": []
    },
    {
      "Id": "ctest_empty_binary_directory",
      "Summary": "empties the binary directory",
      "Signatures": [
        "ctest_empty_binary_directory(directory)"
      ],
      "Parameters": []
    },
    {
      "Id": "ctest_memcheck",
      "Summary": "Perform the :`CTest MemCheck Step` as a :`Dashboard Client`.",
      "Signatures": [
        "ctest_memcheck([BUILD <build-dir>] [APPEND] [START <start-number>] [END <end-number>] [STRIDE <stride-number>] [EXCLUDE <exclude-regex>] [INCLUDE <include-regex>] [EXCLUDE_LABEL <label-exclude-regex>] [INCLUDE_LABEL <label-include-regex>] [EXCLUDE_FIXTURE <regex>] [EXCLUDE_FIXTURE_SETUP <regex>] [EXCLUDE_FIXTURE_CLEANUP <regex>] [PARALLEL_LEVEL <level>] [RESOURCE_SPEC_FILE <file>] [TEST_LOAD <threshold>] [SCHEDULE_RANDOM <ON|OFF>] [STOP_ON_FAILURE] [STOP_TIME <time-of-day>] [RETURN_VALUE <result-var>] [CAPTURE_CMAKE_ERROR <result-var>] [REPEAT <mode>:<n>] [OUTPUT_JUNIT <file>] [DEFECT_COUNT <defect-count-var>] [QUIET])"
      ],
      "Parameters": []
    },
    {
      "Id": "ctest_read_custom_files",
      "Summary": "read CTestCustom files.",
      "Signatures": [
        "ctest_read_custom_files(directory ...)"
      ],
      "Parameters": []
    },
    {
      "Id": "ctest_run_script",
      "Summary": "runs a ctest -S script",
      "Signatures": [
        "ctest_run_script([NEW_PROCESS] script_file_name script_file_name1 script_file_name2 ... [RETURN_VALUE var])"
      ],
      "Parameters": []
    },
    {
      "Id": "ctest_sleep",
      "Summary": "sleeps for some amount of time",
      "Signatures": [
        "ctest_sleep(<seconds>)",
        "ctest_sleep(<time1> <duration> <time2>)"
      ],
      "Parameters": []
    },
    {
      "Id": "ctest_start",
      "Summary": "Starts the testing for a given model",
      "Signatures": [
        "ctest_start(<model> [<source> [<binary>]] [GROUP <group>] [QUIET])",
        "ctest_start([<model> [<source> [<binary>]]] [GROUP <group>] APPEND [QUIET])"
      ],
      "Parameters": [
        "APPEND"
      ]
    },
    {
      "Id": "ctest_submit",
      "Summary": "Perform the :`CTest Submit Step` as a :`Dashboard Client`.",
      "Signatures": [
        "ctest_submit([PARTS <part>...] [FILES <file>...] [SUBMIT_URL <url>] [BUILD_ID <result-var>] [HTTPHEADER <header>] [RETRY_COUNT <count>] [RETRY_DELAY <delay>] [RETURN_VALUE <result-var>] [CAPTURE_CMAKE_ERROR <result-var>] [QUIET])",
        "ctest_submit(CDASH_UPLOAD <file> [CDASH_UPLOAD_TYPE <type>] [SUBMIT_URL <url>] [BUILD_ID <result-var>] [HTTPHEADER <header>] [RETRY_COUNT <count>] [RETRY_DELAY <delay>] [RETURN_VALUE <result-var>] [QUIET])"
      ],
      "Parameters": []
    },
    {
      "Id": "ctest_test",
      "Summary": "Perform the :`CTest Test Step` as a :`Dashboard Client`.",
      "Signatures": [
        "ctest_test([BUILD <build-dir>] [APPEND] [START <start-number>] [END <end-number>] [STRIDE <stride-number>] [EXCLUDE <exclude-regex>] [INCLUDE <include-regex>] [EXCLUDE_LABEL <label-exclude-regex>] [INCLUDE_LABEL <label-include-regex>] [EXCLUDE_FIXTURE <regex>] [EXCLUDE_FIXTURE_SETUP <regex>] [EXCLUDE_FIXTURE_CLEANUP <regex>] [PARALLEL_LEVEL <level>] [RESOURCE_SPEC_FILE <file>] [TEST_LOAD <threshold>] [SCHEDULE_RANDOM <ON|OFF>] [STOP_ON_FAILURE] [STOP_TIME <time-of-day>] [RETURN_VALUE <result-var>] [CAPTURE_CMAKE_ERROR <result-var>] [REPEAT <mode>:<n>] [OUTPUT_JUNIT <file>] [QUIET])"
      ],
      "Parameters": [
        "ATTACHED_FILES"
      ]
    },
    {
      "Id": "ctest_update",
      "Summary": "Perform the :`CTest Update Step` as a :`Dashboard Client`.",
      "Signatures": [
        "ctest_update([SOURCE <source-dir>] [RETURN_VALUE <result-var>] [CAPTURE_CMAKE_ERROR <result-var>] [QUIET])"
      ],
      "Parameters": []
    },
    {
      "Id": "ctest_upload",
      "Summary": "Upload files to a dashboard server as a :`Dashboard Client`.",
      "Signatures": [
        "ctest_upload(FILES <file>... [QUIET] [CAPTURE_CMAKE_ERROR <result-var>])"
      ],
      "Parameters": []
    },
    {
      "Id": "build_name",
      "Summary": "Sets the specified variable to a string representing the platform and compiler settings.",
      "Signatures": [
        "build_name(variable)"
      ],
      "Parameters": [
        "CMAKE_SYSTEM",
        "CMAKE_CXX_COMPILER"
      ]
    },
    {
      "Id": "exec_program",
      "Summary": "Run an executable program during the processing of the CMakeList.",
      "Signatures": [
        "exec_program(Executable [directory in which to run] [ARGS <arguments to executable>] [OUTPUT_VARIABLE <var>] [RETURN_VALUE <var>])"
      ],
      "Parameters": []
    },
    {
      "Id": "export_library_dependencies",
      "Summary": "Create a file named ``<file>`` that can be included into a CMake listfile with the INCLUDE command.",
      "Signatures": [
        "export_library_dependencies(<file> [APPEND])"
      ],
      "Parameters": []
    },
    {
      "Id": "install_files",
      "Summary": "This command has been superseded by the ``install()`` command.",
      "Signatures": [
        "install_files(<dir> extension file file ...)",
        "install_files(<dir> regexp)",
        "install_files(<dir> FILES file file ...)"
      ],
      "Parameters": []
    },
    {
      "Id": "install_programs",
      "Summary": "This command has been superseded by the ``install()`` command.",
      "Signatures": [
        "install_programs(<dir> file1 file2 [file3 ...])",
        "install_programs(<dir> FILES file1 [file2 ...])",
        "install_programs(<dir> regexp)"
      ],
      "Parameters": []
    },
    {
      "Id": "install_targets",
      "Summary": "This command has been superseded by the ``install()`` command.",
      "Signatures": [
        "install_targets(<dir> [RUNTIME_DIRECTORY dir] target target)"
      ],
      "Parameters": []
    },
    {
      "Id": "load_command",
      "Summary": "The given locations are searched for a library whose name is cmCOMMAND_NAME.",
      "Signatures": [
        "load_command(COMMAND_NAME <loc1> [loc2 ...])"
      ],
      "Parameters": []
    },
    {
      "Id": "make_directory",
      "Summary": "Creates the specified directory.",
      "Signatures": [
        "make_directory(directory)"
      ],
      "Parameters": []
    },
    {
      "Id": "output_required_files",
      "Summary": "Outputs a list of all the source files that are required by the specified ``srcfile``.",
      "Signatures": [
        "output_required_files(srcfile outputfile)"
      ],
      "Parameters": []
    },
    {
      "Id": "qt_wrap_cpp",
      "Summary": "Manually create Qt Wrappers.",
      "Signatures": [
        "qt_wrap_cpp(resultingLibraryName DestName SourceLists ...)"
      ],
      "Parameters": []
    },
    {
      "Id": "qt_wrap_ui",
      "Summary": "Manually create Qt user interfaces Wrappers.",
      "Signatures": [
        "qt_wrap_ui(resultingLibraryName HeadersDestName SourcesDestName SourceLists ...)"
      ],
      "Parameters": []
    },
    {
      "Id": "remove",
      "Summary": "Removes ``VALUE`` from the variable ``VAR``.",
      "Signatures": [
        "remove(VAR VALUE VALUE ...)"
      ],
      "Parameters": []
    },
    {
      "Id": "subdir_depends",
      "Summary": "Does not do anything.",
      "Signatures": [
        "subdir_depends(subdir dep1 dep2 ...)"
      ],
      "Parameters": []
    },
    {
      "Id": "subdirs",
      "Summary": "Add a list of subdirectories to the build.",
      "Signatures": [
        "subdirs(dir1 dir2 ...[EXCLUDE_FROM_ALL exclude_dir1 exclude_dir2 ...] [PREORDER])"
      ],
      "Parameters": []
    },
    {
      "Id": "use_mangled_mesa",
      "Summary": "The path to mesa includes, should contain ``gl_mangle.h``.",
      "Signatures": [
        "use_mangled_mesa(PATH_TO_MESA OUTPUT_DIRECTORY)"
      ],
      "Parameters": []
    },
    {
      "Id": "utility_source",
      "Summary": "When a third-party utility's source is included in the distribution, this command specifies its location and name.",
      "Signatures": [
        "utility_source(cache_entry executable_name path_to_source [file1 file2 ...])"
      ],
      "Parameters": []
    },
    {
      "Id": "variable_requires",
      "Summary": "The first argument (``TEST_VARIABLE``) is the name of the variable to be tested, if that variable is false nothing else is done.",
      "Signatures": [
        "variable_requires(TEST_VARIABLE RESULT_VARIABLE REQUIRED_VARIABLE1 REQUIRED_VARIABLE2 ...)"
      ],
      "Parameters": []
    },
    {
      "Id": "write_file",
      "Summary": "The first argument is the file name, the rest of the arguments are messages to write.",
      "Signatures": [
        "write_file(filename \"message to write\"... [APPEND])"
      ],
      "Parameters": []
    }
  ],
  "Modules": [
    {
      "Id": "AndroidTestUtilities",
      "Summary": "Create a test that automatically loads specified data onto an Android device."
    },
    {
      "Id": "BundleUtilities",
      "Summary": "Functions to help assemble a standalone bundle application."
    },
    {
      "Id": "CheckCCompilerFlag",
      "Summary": "Check whether the C compiler supports a given flag."
    },
    {
      "Id": "CheckCompilerFlag",
      "Summary": "Check whether the compiler supports a given flag."
    },
    {
      "Id": "CheckCSourceCompiles",
      "Summary": "Check if given C source compiles and links into an executable."
    },
    {
      "Id": "CheckCSourceRuns",
      "Summary": "Check if given C source compiles and links into an executable and can subsequently be run."
    },
    {
      "Id": "CheckCXXCompilerFlag",
      "Summary": "Check whether the CXX compiler supports a given flag."
    },
    {
      "Id": "CheckCXXSourceCompiles",
      "Summary": "Check if given C++ source compiles and links into an executable."
    },
    {
      "Id": "CheckCXXSourceRuns",
      "Summary": "Check if given C++ source compiles and links into an executable and can subsequently be run."
    },
    {
      "Id": "CheckCXXSymbolExists",
      "Summary": "Check if a symbol exists as a function, variable, or macro in ``C++``."
    },
    {
      "Id": "CheckFortranCompilerFlag",
      "Summary": "Check whether the Fortran compiler supports a given flag."
    },
    {
      "Id": "CheckFortranFunctionExists",
      "Summary": "Check if a Fortran function exists."
    },
    {
      "Id": "CheckFortranSourceCompiles",
      "Summary": "Check if given Fortran source compiles and links into an executable."
    },
    {
      "Id": "CheckFortranSourceRuns",
      "Summary": "Check if given Fortran source compiles and links into an executable and can subsequently be run."
    },
    {
      "Id": "CheckFunctionExists",
      "Summary": "Check if a C function can be linked"
    },
    {
      "Id": "CheckIncludeFileCXX",
      "Summary": "Provides a macro to check if a header file can be included in ``CXX``."
    },
    {
      "Id": "CheckIncludeFile",
      "Summary": "Provides a macro to check if a header file can be included in ``C``."
    },
    {
      "Id": "CheckIncludeFiles",
      "Summary": "Provides a macro to check if a list of one or more header files can be included together."
    },
    {
      "Id": "CheckIPOSupported",
      "Summary": "Check whether the compiler supports an interprocedural optimization (IPO/LTO)."
    },
    {
      "Id": "CheckLanguage",
      "Summary": "Check if a language can be enabled"
    },
    {
      "Id": "CheckLibraryExists",
      "Summary": "Check if the function exists."
    },
    {
      "Id": "CheckLinkerFlag",
      "Summary": "Check whether the compiler supports a given link flag."
    },
    {
      "Id": "CheckOBJCCompilerFlag",
      "Summary": "Check whether the Objective-C compiler supports a given flag."
    },
    {
      "Id": "CheckOBJCSourceCompiles",
      "Summary": "Check if given Objective-C source compiles and links into an executable."
    },
    {
      "Id": "CheckOBJCSourceRuns",
      "Summary": "Check if given Objective-C source compiles and links into an executable and can subsequently be run."
    },
    {
      "Id": "CheckOBJCXXCompilerFlag",
      "Summary": "Check whether the Objective-C++ compiler supports a given flag."
    },
    {
      "Id": "CheckOBJCXXSourceCompiles",
      "Summary": "Check if given Objective-C++ source compiles and links into an executable."
    },
    {
      "Id": "CheckOBJCXXSourceRuns",
      "Summary": "Check if given Objective-C++ source compiles and links into an executable and can subsequently be run."
    },
    {
      "Id": "CheckPIESupported",
      "Summary": "Check whether the linker supports Position Independent Code (PIE) or No Position Independent Code (NO_PIE) for executables."
    },
    {
      "Id": "CheckPrototypeDefinition",
      "Summary": "Check if the prototype we expect is correct."
    },
    {
      "Id": "CheckSourceCompiles",
      "Summary": "Check if given source compiles and links into an executable."
    },
    {
      "Id": "CheckSourceRuns",
      "Summary": "Check if given source compiles and links into an executable and can subsequently be run."
    },
    {
      "Id": "CheckStructHasMember",
      "Summary": "Check if the given struct or class has the specified member variable"
    },
    {
      "Id": "CheckSymbolExists",
      "Summary": "Provides a macro to check if a symbol exists as a function, variable, or macro in ``C``."
    },
    {
      "Id": "CheckTypeSize",
      "Summary": "Check sizeof a type"
    },
    {
      "Id": "CheckVariableExists",
      "Summary": "Check if the variable exists."
    },
    {
      "Id": "CMakeAddFortranSubdirectory",
      "Summary": "Add a fortran-only subdirectory, find a fortran compiler, and build."
    },
    {
      "Id": "CMakeBackwardCompatibilityCXX",
      "Summary": "define a bunch of backwards compatibility variables"
    },
    {
      "Id": "CMakeDependentOption",
      "Summary": "Macro to provide an option dependent on other options."
    },
    {
      "Id": "CMakeFindDependencyMacro",
      "Summary": ".. command:: find_dependency"
    },
    {
      "Id": "CMakeFindFrameworks",
      "Summary": "helper module to find OSX frameworks"
    },
    {
      "Id": "CMakeFindPackageMode",
      "Summary": "This file is executed by cmake when invoked with --find-package."
    },
    {
      "Id": "CMakeGraphVizOptions",
      "Summary": "The builtin Graphviz support of CMake."
    },
    {
      "Id": "CMakePackageConfigHelpers",
      "Summary": "Helpers functions for creating config files that can be included by other projects to find and use a package."
    },
    {
      "Id": "CMakePrintHelpers",
      "Summary": "Convenience functions for printing properties and variables, useful e."
    },
    {
      "Id": "CMakePrintSystemInformation",
      "Summary": "Print system information."
    },
    {
      "Id": "CMakePushCheckState",
      "Summary": "This module defines three macros: ``CMAKE_PUSH_CHECK_STATE()`` ``CMAKE_POP_CHECK_STATE()`` and ``CMAKE_RESET_CHECK_STATE()`` These macros can be used to save, restore and reset (i.e., clear contents) the state of the variables ``CMAKE_REQUIRED_FLAGS``, ``CMAKE_REQUIRED_DEFINITIONS``, ``CMAKE_REQUIRED_LINK_OPTIONS``, ``CMAKE_REQUIRED_LIBRARIES``, ``CMAKE_REQUIRED_INCLUDES`` and ``CMAKE_EXTRA_INCLUDE_FILES`` used by the various Check-files coming with CMake, like e."
    },
    {
      "Id": "CMakeVerifyManifest",
      "Summary": "CMakeVerifyManifest."
    },
    {
      "Id": "CPack",
      "Summary": "Configure generators for binary installers and source packages."
    },
    {
      "Id": "CPackComponent",
      "Summary": "Configure components for binary installers and source packages."
    },
    {
      "Id": "CPackIFW",
      "Summary": "This module looks for the location of the command-line utilities supplied with the Qt Installer Framework (QtIFW)."
    },
    {
      "Id": "CPackIFWConfigureFile",
      "Summary": "The module defines ``configure_file()`` similar command to configure file templates prepared in QtIFW/SDK/Creator style."
    },
    {
      "Id": "CSharpUtilities",
      "Summary": "Functions to make configuration of CSharp/."
    },
    {
      "Id": "CTest",
      "Summary": "Configure a project for testing with CTest/CDash"
    },
    {
      "Id": "CTestCoverageCollectGCOV",
      "Summary": "This module provides the ``ctest_coverage_collect_gcov`` function."
    },
    {
      "Id": "CTestScriptMode",
      "Summary": "This file is read by ctest in script mode (-S)"
    },
    {
      "Id": "CTestUseLaunchers",
      "Summary": "Set the RULE_LAUNCH_* global properties when CTEST_USE_LAUNCHERS is on."
    },
    {
      "Id": "Dart",
      "Summary": "Configure a project for testing with CTest or old Dart Tcl Client"
    },
    {
      "Id": "DeployQt4",
      "Summary": "Functions to help assemble a standalone Qt4 executable."
    },
    {
      "Id": "ExternalData",
      "Summary": "Manage data files stored outside source tree"
    },
    {
      "Id": "ExternalProject",
      "Summary": "Commands ^^^^^^^^"
    },
    {
      "Id": "FeatureSummary",
      "Summary": "Functions for generating a summary of enabled/disabled features."
    },
    {
      "Id": "FetchContent",
      "Summary": "Overview ^^^^^^^^"
    },
    {
      "Id": "FindPackageHandleStandardArgs",
      "Summary": "This module provides functions intended to be used in :`Find Modules` implementing ``find_package(<PackageName>)`` calls."
    },
    {
      "Id": "FindPackageMessage",
      "Summary": "find_package_message(<name> \"message for user\" \"find result details\")"
    },
    {
      "Id": "FortranCInterface",
      "Summary": "Fortran/C Interface Detection"
    },
    {
      "Id": "GenerateExportHeader",
      "Summary": "Function for generation of export macros for libraries"
    },
    {
      "Id": "GetPrerequisites",
      "Summary": "Functions to analyze and list executable file prerequisites."
    },
    {
      "Id": "GNUInstallDirs",
      "Summary": "Define GNU standard installation directories"
    },
    {
      "Id": "GoogleTest",
      "Summary": "This module defines functions to help use the Google Test infrastructure."
    },
    {
      "Id": "InstallRequiredSystemLibraries",
      "Summary": "Include this module to search for compiler-provided system runtime libraries and add install rules for them."
    },
    {
      "Id": "ProcessorCount",
      "Summary": "ProcessorCount(var)"
    },
    {
      "Id": "SelectLibraryConfigurations",
      "Summary": "select_library_configurations(basename)"
    },
    {
      "Id": "SquishTestScript",
      "Summary": "This script launches a GUI test using Squish."
    },
    {
      "Id": "TestBigEndian",
      "Summary": "Check if the target architecture is big endian or little endian."
    },
    {
      "Id": "TestForANSIForScope",
      "Summary": "Check for ANSI for scope support"
    },
    {
      "Id": "TestForANSIStreamHeaders",
      "Summary": "Test for compiler support of ANSI stream headers iostream, etc."
    },
    {
      "Id": "TestForSSTREAM",
      "Summary": "Test for compiler support of ANSI sstream header"
    },
    {
      "Id": "TestForSTDNamespace",
      "Summary": "Test for std:: namespace support"
    },
    {
      "Id": "UseEcos",
      "Summary": "This module defines variables and macros required to build eCos application."
    },
    {
      "Id": "UseJava",
      "Summary": "This file provides support for ``Java``."
    },
    {
      "Id": "UseSWIG",
      "Summary": "This file provides support for ``SWIG``."
    },
    {
      "Id": "UsewxWidgets",
      "Summary": "Convenience include for using wxWidgets library."
    },
    {
      "Id": "FindALSA",
      "Summary": "Find Advanced Linux Sound Architecture (ALSA)"
    },
    {
      "Id": "FindArmadillo",
      "Summary": "Find the Armadillo C++ library."
    },
    {
      "Id": "FindASPELL",
      "Summary": "Try to find ASPELL"
    },
    {
      "Id": "FindAVIFile",
      "Summary": "Locate AVIFILE library and include paths"
    },
    {
      "Id": "FindBacktrace",
      "Summary": "Find provider for backtrace(3)_."
    },
    {
      "Id": "FindBISON",
      "Summary": "Find ``bison`` executable and provide a macro to generate custom build rules."
    },
    {
      "Id": "FindBLAS",
      "Summary": "Find Basic Linear Algebra Subprograms (BLAS) library"
    },
    {
      "Id": "FindBoost",
      "Summary": "Find Boost include dirs and libraries"
    },
    {
      "Id": "FindBullet",
      "Summary": "Try to find the Bullet physics engine"
    },
    {
      "Id": "FindBZip2",
      "Summary": "Try to find BZip2"
    },
    {
      "Id": "FindCABLE",
      "Summary": "Find CABLE"
    },
    {
      "Id": "FindCoin3D",
      "Summary": "Find Coin3D (Open Inventor)"
    },
    {
      "Id": "FindCUDAToolkit",
      "Summary": "This script locates the NVIDIA CUDA toolkit and the associated libraries, but does not require the ``CUDA`` language be enabled for a given project."
    },
    {
      "Id": "FindCups",
      "Summary": "Find the Common UNIX Printing System (CUPS)."
    },
    {
      "Id": "FindCURL",
      "Summary": "Find the native CURL headers and libraries."
    },
    {
      "Id": "FindCurses",
      "Summary": "Find the curses or ncurses include file and library."
    },
    {
      "Id": "FindCVS",
      "Summary": "Find the Concurrent Versions System (CVS)."
    },
    {
      "Id": "FindCxxTest",
      "Summary": "Find CxxTest unit testing framework."
    },
    {
      "Id": "FindCygwin",
      "Summary": "Find Cygwin, a POSIX-compatible environment that runs natively on Microsoft Windows"
    },
    {
      "Id": "FindDart",
      "Summary": "Find DART"
    },
    {
      "Id": "FindDCMTK",
      "Summary": "Find DICOM ToolKit (DCMTK) libraries and applications"
    },
    {
      "Id": "FindDevIL",
      "Summary": "This module locates the developer's image library."
    },
    {
      "Id": "FindDoxygen",
      "Summary": "Doxygen is a documentation generation tool (see http://www.doxygen.org)."
    },
    {
      "Id": "FindEnvModules",
      "Summary": "Locate an environment module implementation and make commands available to CMake scripts to use them."
    },
    {
      "Id": "FindEXPAT",
      "Summary": "Find the native Expat headers and library."
    },
    {
      "Id": "FindFLEX",
      "Summary": "Find Fast Lexical Analyzer (Flex) executable and provides a macro to generate custom build rules"
    },
    {
      "Id": "FindFLTK",
      "Summary": "Find the Fast Light Toolkit (FLTK) library"
    },
    {
      "Id": "FindFLTK2",
      "Summary": "Find the native FLTK 2.0 includes and library"
    },
    {
      "Id": "FindFontconfig",
      "Summary": "Find Fontconfig headers and library."
    },
    {
      "Id": "FindFreetype",
      "Summary": "Find the FreeType font renderer includes and library."
    },
    {
      "Id": "FindGCCXML",
      "Summary": "Find the GCC-XML front-end executable."
    },
    {
      "Id": "FindGDAL",
      "Summary": "Find Geospatial Data Abstraction Library (GDAL)."
    },
    {
      "Id": "FindGettext",
      "Summary": "Find GNU gettext tools"
    },
    {
      "Id": "FindGIF",
      "Summary": "This finds the Graphics Interchange Format (GIF) library (``giflib``)"
    },
    {
      "Id": "FindGit",
      "Summary": "The module defines the following variables:"
    },
    {
      "Id": "FindGLEW",
      "Summary": "Find the OpenGL Extension Wrangler Library (GLEW)"
    },
    {
      "Id": "FindGLUT",
      "Summary": "Find OpenGL Utility Toolkit (GLUT) library and include files."
    },
    {
      "Id": "FindGnuplot",
      "Summary": "this module looks for gnuplot"
    },
    {
      "Id": "FindGnuTLS",
      "Summary": "Find the GNU Transport Layer Security library (gnutls)"
    },
    {
      "Id": "FindGSL",
      "Summary": "Find the native GNU Scientific Library (GSL) includes and libraries."
    },
    {
      "Id": "FindGTest",
      "Summary": "Locate the Google C++ Testing Framework."
    },
    {
      "Id": "FindGTK",
      "Summary": "Find GTK, glib and GTKGLArea"
    },
    {
      "Id": "FindGTK2",
      "Summary": "Find the GTK2 widget libraries and several of its other optional components like ``gtkmm``, ``glade``, and ``glademm``."
    },
    {
      "Id": "FindHDF5",
      "Summary": "Find Hierarchical Data Format (HDF5), a library for reading and writing self describing array data."
    },
    {
      "Id": "FindHg",
      "Summary": "Extract information from a mercurial working copy."
    },
    {
      "Id": "FindHSPELL",
      "Summary": "Try to find Hebrew spell-checker (Hspell) and morphology engine."
    },
    {
      "Id": "FindHTMLHelp",
      "Summary": "This module looks for Microsoft HTML Help Compiler"
    },
    {
      "Id": "FindIce",
      "Summary": "Find the ZeroC Internet Communication Engine (ICE) programs, libraries and datafiles."
    },
    {
      "Id": "FindIconv",
      "Summary": "This module finds the ``iconv()`` POSIX.1 functions on the system."
    },
    {
      "Id": "FindIcotool",
      "Summary": "Find icotool"
    },
    {
      "Id": "FindICU",
      "Summary": "Find the International Components for Unicode (ICU) libraries and programs."
    },
    {
      "Id": "FindImageMagick",
      "Summary": "Find ImageMagick binary suite."
    },
    {
      "Id": "FindIntl",
      "Summary": "Find the Gettext libintl headers and libraries."
    },
    {
      "Id": "FindITK",
      "Summary": "This module no longer exists."
    },
    {
      "Id": "FindJasper",
      "Summary": "Find the Jasper JPEG2000 library."
    },
    {
      "Id": "FindJava",
      "Summary": "Find Java"
    },
    {
      "Id": "FindJNI",
      "Summary": "Find Java Native Interface (JNI) libraries."
    },
    {
      "Id": "FindJPEG",
      "Summary": "Find the Joint Photographic Experts Group (JPEG) library (``libjpeg``)"
    },
    {
      "Id": "FindKDE3",
      "Summary": "Find the KDE3 include and library dirs, KDE preprocessors and define a some macros"
    },
    {
      "Id": "FindKDE4",
      "Summary": "Find KDE4 and provide all necessary variables and macros to compile software for it."
    },
    {
      "Id": "FindLAPACK",
      "Summary": "Find Linear Algebra PACKage (LAPACK) library"
    },
    {
      "Id": "FindLATEX",
      "Summary": "Find LaTeX"
    },
    {
      "Id": "FindLibArchive",
      "Summary": "Find libarchive library and headers."
    },
    {
      "Id": "FindLibinput",
      "Summary": "Find libinput headers and library."
    },
    {
      "Id": "FindLibLZMA",
      "Summary": "Find LZMA compression algorithm headers and library."
    },
    {
      "Id": "FindLibXml2",
      "Summary": "Find the XML processing library (libxml2)."
    },
    {
      "Id": "FindLibXslt",
      "Summary": "Find the XSL Transformations, Extensible Stylesheet Language Transformations (XSLT) library (LibXslt)"
    },
    {
      "Id": "FindLTTngUST",
      "Summary": "Find Linux Trace Toolkit Next Generation (LTTng-UST)_ library."
    },
    {
      "Id": "FindLua",
      "Summary": "Locate Lua library."
    },
    {
      "Id": "FindLua50",
      "Summary": "Locate Lua library."
    },
    {
      "Id": "FindLua51",
      "Summary": "Locate Lua library."
    },
    {
      "Id": "FindMatlab",
      "Summary": "Finds Matlab or Matlab Compiler Runtime (MCR) and provides Matlab tools, libraries and compilers to CMake."
    },
    {
      "Id": "FindMFC",
      "Summary": "Find Microsoft Foundation Class Library (MFC) on Windows"
    },
    {
      "Id": "FindMotif",
      "Summary": "Try to find Motif (or lesstif)"
    },
    {
      "Id": "FindMPEG",
      "Summary": "Find the native MPEG includes and library"
    },
    {
      "Id": "FindMPEG2",
      "Summary": "Find the native MPEG2 includes and library"
    },
    {
      "Id": "FindMPI",
      "Summary": "Find a Message Passing Interface (MPI) implementation."
    },
    {
      "Id": "FindMsys",
      "Summary": "Find MSYS, a POSIX-compatible environment that runs natively on Microsoft Windows"
    },
    {
      "Id": "FindODBC",
      "Summary": "Find an Open Database Connectivity (ODBC) include directory and library."
    },
    {
      "Id": "FindOpenACC",
      "Summary": "Detect OpenACC support by the compiler."
    },
    {
      "Id": "FindOpenAL",
      "Summary": "Finds Open Audio Library (OpenAL)."
    },
    {
      "Id": "FindOpenCL",
      "Summary": "Finds Open Computing Language (OpenCL)"
    },
    {
      "Id": "FindOpenGL",
      "Summary": "FindModule for OpenGL and OpenGL Utility Library (GLU)."
    },
    {
      "Id": "FindOpenMP",
      "Summary": "Finds Open Multi-Processing (OpenMP) support."
    },
    {
      "Id": "FindOpenSceneGraph",
      "Summary": "Find OpenSceneGraph (3D graphics application programming interface)"
    },
    {
      "Id": "FindOpenSSL",
      "Summary": "Find the OpenSSL encryption library."
    },
    {
      "Id": "FindOpenThreads",
      "Summary": "OpenThreads is a C++ based threading library."
    },
    {
      "Id": "Findosg",
      "Summary": "NOTE: It is highly recommended that you use the new FindOpenSceneGraph."
    },
    {
      "Id": "Findosg_functions",
      "Summary": "This CMake file contains two macros to assist with searching for OSG libraries and nodekits."
    },
    {
      "Id": "FindosgAnimation",
      "Summary": "This is part of the Findosg* suite used to find OpenSceneGraph components."
    },
    {
      "Id": "FindosgDB",
      "Summary": "This is part of the ``Findosg*`` suite used to find OpenSceneGraph components."
    },
    {
      "Id": "FindosgFX",
      "Summary": "This is part of the Findosg* suite used to find OpenSceneGraph components."
    },
    {
      "Id": "FindosgGA",
      "Summary": "This is part of the Findosg* suite used to find OpenSceneGraph components."
    },
    {
      "Id": "FindosgIntrospection",
      "Summary": "This is part of the Findosg* suite used to find OpenSceneGraph components."
    },
    {
      "Id": "FindosgManipulator",
      "Summary": "This is part of the Findosg* suite used to find OpenSceneGraph components."
    },
    {
      "Id": "FindosgParticle",
      "Summary": "This is part of the Findosg* suite used to find OpenSceneGraph components."
    },
    {
      "Id": "FindosgPresentation",
      "Summary": "This is part of the Findosg* suite used to find OpenSceneGraph components."
    },
    {
      "Id": "FindosgProducer",
      "Summary": "This is part of the Findosg* suite used to find OpenSceneGraph components."
    },
    {
      "Id": "FindosgQt",
      "Summary": "This is part of the Findosg* suite used to find OpenSceneGraph components."
    },
    {
      "Id": "FindosgShadow",
      "Summary": "This is part of the Findosg* suite used to find OpenSceneGraph components."
    },
    {
      "Id": "FindosgSim",
      "Summary": "This is part of the Findosg* suite used to find OpenSceneGraph components."
    },
    {
      "Id": "FindosgTerrain",
      "Summary": "This is part of the Findosg* suite used to find OpenSceneGraph components."
    },
    {
      "Id": "FindosgText",
      "Summary": "This is part of the Findosg* suite used to find OpenSceneGraph components."
    },
    {
      "Id": "FindosgUtil",
      "Summary": "This is part of the Findosg* suite used to find OpenSceneGraph components."
    },
    {
      "Id": "FindosgViewer",
      "Summary": "This is part of the Findosg* suite used to find OpenSceneGraph components."
    },
    {
      "Id": "FindosgVolume",
      "Summary": "This is part of the Findosg* suite used to find OpenSceneGraph components."
    },
    {
      "Id": "FindosgWidget",
      "Summary": "This is part of the Findosg* suite used to find OpenSceneGraph components."
    },
    {
      "Id": "FindPatch",
      "Summary": "The module defines the following variables:"
    },
    {
      "Id": "FindPerl",
      "Summary": "Find perl"
    },
    {
      "Id": "FindPerlLibs",
      "Summary": "Find Perl libraries"
    },
    {
      "Id": "FindPHP4",
      "Summary": "Find PHP4"
    },
    {
      "Id": "FindPhysFS",
      "Summary": "Locate PhysFS library This module defines PHYSFS_LIBRARY, the name of the library to link against PHYSFS_FOUND, if false, do not try to link to PHYSFS PHYSFS_INCLUDE_DIR, where to find physfs."
    },
    {
      "Id": "FindPike",
      "Summary": "Find Pike"
    },
    {
      "Id": "FindPkgConfig",
      "Summary": "A ``pkg-config`` module for CMake."
    },
    {
      "Id": "FindPNG",
      "Summary": "Find libpng, the official reference library for the PNG image format."
    },
    {
      "Id": "FindPostgreSQL",
      "Summary": "Find the PostgreSQL installation."
    },
    {
      "Id": "FindProducer",
      "Summary": "Though Producer isn't directly part of OpenSceneGraph, its primary user is OSG so I consider this part of the Findosg* suite used to find OpenSceneGraph components."
    },
    {
      "Id": "FindProtobuf",
      "Summary": "Locate and configure the Google Protocol Buffers library."
    },
    {
      "Id": "FindPython",
      "Summary": "Find Python interpreter, compiler and development environment (include directories and libraries)."
    },
    {
      "Id": "FindPython2",
      "Summary": "Find Python 2 interpreter, compiler and development environment (include directories and libraries)."
    },
    {
      "Id": "FindPython3",
      "Summary": "Find Python 3 interpreter, compiler and development environment (include directories and libraries)."
    },
    {
      "Id": "FindQt3",
      "Summary": "Locate Qt include paths and libraries"
    },
    {
      "Id": "FindQt4",
      "Summary": "Finding and Using Qt4 ^^^^^^^^^^^^^^^^^^^^^"
    },
    {
      "Id": "FindQuickTime",
      "Summary": "Locate QuickTime This module defines QUICKTIME_LIBRARY QUICKTIME_FOUND, if false, do not try to link to gdal QUICKTIME_INCLUDE_DIR, where to find the headers"
    },
    {
      "Id": "FindRTI",
      "Summary": "Try to find M&S HLA RTI libraries"
    },
    {
      "Id": "FindRuby",
      "Summary": "Find Ruby"
    },
    {
      "Id": "FindSDL",
      "Summary": "Locate the SDL library"
    },
    {
      "Id": "FindSDL_image",
      "Summary": "Locate SDL_image library"
    },
    {
      "Id": "FindSDL_mixer",
      "Summary": "Locate SDL_mixer library"
    },
    {
      "Id": "FindSDL_net",
      "Summary": "Locate SDL_net library"
    },
    {
      "Id": "FindSDL_sound",
      "Summary": "Locates the SDL_sound library"
    },
    {
      "Id": "FindSDL_ttf",
      "Summary": "Locate SDL_ttf library"
    },
    {
      "Id": "FindSelfPackers",
      "Summary": "Find upx"
    },
    {
      "Id": "FindSquish",
      "Summary": "-- Typical Use"
    },
    {
      "Id": "FindSQLite3",
      "Summary": "Find the SQLite libraries, v3"
    },
    {
      "Id": "FindSubversion",
      "Summary": "Extract information from a subversion working copy"
    },
    {
      "Id": "FindSWIG",
      "Summary": "Find the Simplified Wrapper and Interface Generator (SWIG_) executable."
    },
    {
      "Id": "FindTCL",
      "Summary": "TK_INTERNAL_PATH was removed."
    },
    {
      "Id": "FindTclsh",
      "Summary": "Find tclsh"
    },
    {
      "Id": "FindTclStub",
      "Summary": "TCL_STUB_LIBRARY_DEBUG and TK_STUB_LIBRARY_DEBUG were removed."
    },
    {
      "Id": "FindThreads",
      "Summary": "This module determines the thread library of the system."
    },
    {
      "Id": "FindTIFF",
      "Summary": "Find the TIFF library (``libtiff``, https://libtiff.gitlab.io/libtiff/)."
    },
    {
      "Id": "FindUnixCommands",
      "Summary": "Find Unix commands, including the ones from Cygwin"
    },
    {
      "Id": "FindVTK",
      "Summary": "This module no longer exists."
    },
    {
      "Id": "FindVulkan",
      "Summary": "Find Vulkan, which is a low-overhead, cross-platform 3D graphics and computing API."
    },
    {
      "Id": "FindWget",
      "Summary": "Find wget"
    },
    {
      "Id": "FindWish",
      "Summary": "Find wish installation"
    },
    {
      "Id": "FindwxWidgets",
      "Summary": "Find a wxWidgets (a.k.a., wxWindows) installation."
    },
    {
      "Id": "FindX11",
      "Summary": "Find X11 installation"
    },
    {
      "Id": "FindXalanC",
      "Summary": "Find the Apache Xalan-C++ XSL transform processor headers and libraries."
    },
    {
      "Id": "FindXCTest",
      "Summary": "Functions to help creating and executing XCTest bundles."
    },
    {
      "Id": "FindXercesC",
      "Summary": "Find the Apache Xerces-C++ validating XML parser headers and libraries."
    },
    {
      "Id": "FindXMLRPC",
      "Summary": "Find xmlrpc"
    },
    {
      "Id": "FindZLIB",
      "Summary": "Find the native ZLIB includes and library."
    },
    {
      "Id": "AddFileDependencies",
      "Summary": "Add dependencies to a source file."
    },
    {
      "Id": "CMakeDetermineVSServicePack",
      "Summary": "The functionality of this module has been superseded by the ``CMAKE_<LANG>_COMPILER_VERSION`` variable that contains the compiler version number."
    },
    {
      "Id": "CMakeExpandImportedTargets",
      "Summary": "This module was once needed to expand imported targets to the underlying libraries they reference on disk for use with the ``try_compile()`` and ``try_run()`` commands."
    },
    {
      "Id": "CMakeForceCompiler",
      "Summary": "The macros provided by this module were once intended for use by cross-compiling toolchain files when CMake was not able to automatically detect the compiler identification."
    },
    {
      "Id": "CMakeParseArguments",
      "Summary": "This module once implemented the ``cmake_parse_arguments()`` command that is now implemented natively by CMake."
    },
    {
      "Id": "Documentation",
      "Summary": "This module provides support for the VTK documentation framework."
    },
    {
      "Id": "MacroAddFileDependencies",
      "Summary": "::"
    },
    {
      "Id": "TestCXXAcceptsFlag",
      "Summary": "Check if the CXX compiler accepts a flag."
    },
    {
      "Id": "UseJavaClassFilelist",
      "Summary": ".. versionchanged:: 3.20 This module was previously documented by mistake and was never meant for direct inclusion by project code."
    },
    {
      "Id": "UseJavaSymlinks",
      "Summary": ".. versionchanged:: 3.20 This module was previously documented by mistake and was never meant for direct inclusion by project code."
    },
    {
      "Id": "UsePkgConfig",
      "Summary": "Obsolete pkg-config module for CMake, use FindPkgConfig instead."
    },
    {
      "Id": "Use_wxWindows",
      "Summary": "This convenience include finds if wxWindows is installed and set the appropriate libs, incdirs, flags etc."
    },
    {
      "Id": "WriteBasicConfigVersionFile",
      "Summary": "::"
    },
    {
      "Id": "WriteCompilerDetectionHeader",
      "Summary": "This module provides the function ``write_compiler_detection_header()``."
    },
    {
      "Id": "FindCUDA",
      "Summary": "It is no longer necessary to use this module or call ``find_package(CUDA)`` for compiling CUDA code."
    },
    {
      "Id": "FindPythonInterp",
      "Summary": "Find python interpreter"
    },
    {
      "Id": "FindPythonLibs",
      "Summary": "Find python libraries"
    },
    {
      "Id": "FindQt",
      "Summary": "Searches for all installed versions of Qt3 or Qt4."
    },
    {
      "Id": "FindwxWindows",
      "Summary": "Find wxWindows (wxWidgets) installation"
    },
    {
      "Id": "CPackArchive",
      "Summary": "The documentation for the CPack Archive generator has moved here: ``CPack Archive Generator``"
    },
    {
      "Id": "CPackBundle",
      "Summary": "The documentation for the CPack Bundle generator has moved here: ``CPack Bundle Generator``"
    },
    {
      "Id": "CPackCygwin",
      "Summary": "The documentation for the CPack Cygwin generator has moved here: ``CPack Cygwin Generator``"
    },
    {
      "Id": "CPackDeb",
      "Summary": "The documentation for the CPack DEB generator has moved here: ``CPack DEB Generator``"
    },
    {
      "Id": "CPackDMG",
      "Summary": "The documentation for the CPack DragNDrop generator has moved here: ``CPack DragNDrop Generator``"
    },
    {
      "Id": "CPackFreeBSD",
      "Summary": "The documentation for the CPack FreeBSD generator has moved here: ``CPack FreeBSD Generator``"
    },
    {
      "Id": "CPackNSIS",
      "Summary": "The documentation for the CPack NSIS generator has moved here: ``CPack NSIS Generator``"
    },
    {
      "Id": "CPackNuGet",
      "Summary": "The documentation for the CPack NuGet generator has moved here: ``CPack NuGet Generator``"
    },
    {
      "Id": "CPackPackageMaker",
      "Summary": "The documentation for the CPack PackageMaker generator has moved here: ``CPack PackageMaker Generator``"
    },
    {
      "Id": "CPackProductBuild",
      "Summary": "The documentation for the CPack productbuild generator has moved here: ``CPack productbuild Generator``"
    },
    {
      "Id": "CPackRPM",
      "Summary": "The documentation for the CPack RPM generator has moved here: ``CPack RPM Generator``"
    },
    {
      "Id": "CPackWIX",
      "Summary": "The documentation for the CPack WIX generator has moved here: ``CPack WIX Generator``"
    }
  ],
  "Properties": [
    {
      "Id": "ALLOW_DUPLICATE_CUSTOM_TARGETS",
      "Summary": "Allow duplicate custom targets to be created."
    },
    {
      "Id": "AUTOGEN_SOURCE_GROUP",
      "Summary": "Name of the ``source_group()`` for ``AUTOMOC``, ``AUTORCC`` and ``AUTOUIC`` generated files."
    },
    {
      "Id": "AUTOGEN_TARGETS_FOLDER",
      "Summary": "Name of ``FOLDER`` for ``*_autogen`` targets that are added automatically by CMake for targets for which ``AUTOMOC`` is enabled."
    },
    {
      "Id": "AUTOMOC_SOURCE_GROUP",
      "Summary": "Name of the ``source_group()`` for ``AUTOMOC`` generated files."
    },
    {
      "Id": "AUTOMOC_TARGETS_FOLDER",
      "Summary": "Name of ``FOLDER`` for ``*_autogen`` targets that are added automatically by CMake for targets for which ``AUTOMOC`` is enabled."
    },
    {
      "Id": "AUTORCC_SOURCE_GROUP",
      "Summary": "Name of the ``source_group()`` for ``AUTORCC`` generated files."
    },
    {
      "Id": "AUTOUIC_SOURCE_GROUP",
      "Summary": "Name of the ``source_group()`` for ``AUTOUIC`` generated files."
    },
    {
      "Id": "CMAKE_C_KNOWN_FEATURES",
      "Summary": "List of C features known to this version of CMake."
    },
    {
      "Id": "CMAKE_CUDA_KNOWN_FEATURES",
      "Summary": "List of CUDA features known to this version of CMake."
    },
    {
      "Id": "CMAKE_CXX_KNOWN_FEATURES",
      "Summary": "List of C++ features known to this version of CMake."
    },
    {
      "Id": "CMAKE_ROLE",
      "Summary": "Tells what mode the current running script is in."
    },
    {
      "Id": "DEBUG_CONFIGURATIONS",
      "Summary": "Specify which configurations are for debugging."
    },
    {
      "Id": "DISABLED_FEATURES",
      "Summary": "List of features which are disabled during the CMake run."
    },
    {
      "Id": "ECLIPSE_EXTRA_CPROJECT_CONTENTS",
      "Summary": "Additional contents to be inserted into the generated Eclipse cproject file."
    },
    {
      "Id": "ECLIPSE_EXTRA_NATURES",
      "Summary": "List of natures to add to the generated Eclipse project file."
    },
    {
      "Id": "ENABLED_FEATURES",
      "Summary": "List of features which are enabled during the CMake run."
    },
    {
      "Id": "ENABLED_LANGUAGES",
      "Summary": "Read-only property that contains the list of currently enabled languages"
    },
    {
      "Id": "FIND_LIBRARY_USE_LIB32_PATHS",
      "Summary": "Whether the ``find_library()`` command should automatically search ``lib32`` directories."
    },
    {
      "Id": "FIND_LIBRARY_USE_LIB64_PATHS",
      "Summary": "Whether ``find_library()`` should automatically search lib64 directories."
    },
    {
      "Id": "FIND_LIBRARY_USE_LIBX32_PATHS",
      "Summary": "Whether the ``find_library()`` command should automatically search ``libx32`` directories."
    },
    {
      "Id": "FIND_LIBRARY_USE_OPENBSD_VERSIONING",
      "Summary": "Whether ``find_library()`` should find OpenBSD-style shared libraries."
    },
    {
      "Id": "GENERATOR_IS_MULTI_CONFIG",
      "Summary": "Read-only property that is true on multi-configuration generators."
    },
    {
      "Id": "GLOBAL_DEPENDS_DEBUG_MODE",
      "Summary": "Enable global target dependency graph debug mode."
    },
    {
      "Id": "GLOBAL_DEPENDS_NO_CYCLES",
      "Summary": "Disallow global target dependency graph cycles."
    },
    {
      "Id": "IN_TRY_COMPILE",
      "Summary": "Read-only property that is true during a try-compile configuration."
    },
    {
      "Id": "JOB_POOLS",
      "Summary": "Ninja only: List of available pools."
    },
    {
      "Id": "PACKAGES_FOUND",
      "Summary": "List of packages which were found during the CMake run."
    },
    {
      "Id": "PACKAGES_NOT_FOUND",
      "Summary": "List of packages which were not found during the CMake run."
    },
    {
      "Id": "PREDEFINED_TARGETS_FOLDER",
      "Summary": "Name of FOLDER for targets that are added automatically by CMake."
    },
    {
      "Id": "REPORT_UNDEFINED_PROPERTIES",
      "Summary": "If set, report any undefined properties to this file."
    },
    {
      "Id": "RULE_LAUNCH_COMPILE",
      "Summary": "Specify a launcher for compile rules."
    },
    {
      "Id": "RULE_LAUNCH_CUSTOM",
      "Summary": "Specify a launcher for custom rules."
    },
    {
      "Id": "RULE_LAUNCH_LINK",
      "Summary": "Specify a launcher for link rules."
    },
    {
      "Id": "RULE_MESSAGES",
      "Summary": "Specify whether to report a message for each make rule."
    },
    {
      "Id": "TARGET_ARCHIVES_MAY_BE_SHARED_LIBS",
      "Summary": "Set if shared libraries may be named like archives."
    },
    {
      "Id": "TARGET_MESSAGES",
      "Summary": "Specify whether to report the completion of each target."
    },
    {
      "Id": "TARGET_SUPPORTS_SHARED_LIBS",
      "Summary": "Does the target platform support shared libraries."
    },
    {
      "Id": "USE_FOLDERS",
      "Summary": "Use the ``FOLDER`` target property to organize targets into folders."
    },
    {
      "Id": "XCODE_EMIT_EFFECTIVE_PLATFORM_NAME",
      "Summary": "Control emission of ``EFFECTIVE_PLATFORM_NAME`` by the ``Xcode`` generator."
    }
  ],
  "DirectoryProperties": [
    {
      "Id": "ADDITIONAL_CLEAN_FILES",
      "Summary": "A :`;-list <CMake Language Lists>` of files or directories that will be removed as a part of the global ``clean`` target."
    },
    {
      "Id": "BINARY_DIR",
      "Summary": "This read-only directory property reports absolute path to the binary directory corresponding to the source on which it is read."
    },
    {
      "Id": "BUILDSYSTEM_TARGETS",
      "Summary": "This read-only directory property contains a :`semicolon-separated list <CMake Language Lists>` of buildsystem targets added in the directory by calls to the ``add_library()``, ``add_executable()``, and ``add_custom_target()`` commands."
    },
    {
      "Id": "CACHE_VARIABLES",
      "Summary": "List of cache variables available in the current directory."
    },
    {
      "Id": "CLEAN_NO_CUSTOM",
      "Summary": "Set to true to tell :`Makefile Generators` not to remove the outputs of custom commands for this directory during the ``make clean`` operation."
    },
    {
      "Id": "CMAKE_CONFIGURE_DEPENDS",
      "Summary": "Tell CMake about additional input files to the configuration process."
    },
    {
      "Id": "COMPILE_DEFINITIONS",
      "Summary": "Preprocessor definitions for compiling a directory's sources."
    },
    {
      "Id": "COMPILE_OPTIONS",
      "Summary": "List of options to pass to the compiler."
    },
    {
      "Id": "DEFINITIONS",
      "Summary": "For CMake 2.4 compatibility only."
    },
    {
      "Id": "EXCLUDE_FROM_ALL",
      "Summary": "Set this directory property to a true value on a subdirectory to exclude its targets from the \"all\" target of its ancestors."
    },
    {
      "Id": "IMPLICIT_DEPENDS_INCLUDE_TRANSFORM",
      "Summary": "Specify ``#include`` line transforms for dependencies in a directory."
    },
    {
      "Id": "IMPORTED_TARGETS",
      "Summary": "This read-only directory property contains a :`semicolon-separated list <CMake Language Lists>` of :`Imported Targets` added in the directory by calls to the ``add_library()`` and ``add_executable()`` commands."
    },
    {
      "Id": "INCLUDE_DIRECTORIES",
      "Summary": "List of preprocessor include file search directories."
    },
    {
      "Id": "INCLUDE_REGULAR_EXPRESSION",
      "Summary": "Include file scanning regular expression."
    },
    {
      "Id": "INTERPROCEDURAL_OPTIMIZATION",
      "Summary": "Enable interprocedural optimization for targets in a directory."
    },
    {
      "Id": "INTERPROCEDURAL_OPTIMIZATION_<CONFIG>",
      "Summary": "Per-configuration interprocedural optimization for a directory."
    },
    {
      "Id": "LABELS",
      "Summary": "Specify a list of text labels associated with a directory and all of its subdirectories."
    },
    {
      "Id": "LINK_DIRECTORIES",
      "Summary": "List of linker search directories."
    },
    {
      "Id": "LINK_OPTIONS",
      "Summary": "List of options to use for the link step of shared library, module and executable targets as well as the device link step."
    },
    {
      "Id": "LISTFILE_STACK",
      "Summary": "The current stack of listfiles being processed."
    },
    {
      "Id": "MACROS",
      "Summary": "List of macro commands available in the current directory."
    },
    {
      "Id": "PARENT_DIRECTORY",
      "Summary": "Source directory that added current subdirectory."
    },
    {
      "Id": "RULE_LAUNCH_COMPILE",
      "Summary": "Specify a launcher for compile rules."
    },
    {
      "Id": "RULE_LAUNCH_CUSTOM",
      "Summary": "Specify a launcher for custom rules."
    },
    {
      "Id": "RULE_LAUNCH_LINK",
      "Summary": "Specify a launcher for link rules."
    },
    {
      "Id": "SOURCE_DIR",
      "Summary": "This read-only directory property reports absolute path to the source directory on which it is read."
    },
    {
      "Id": "SUBDIRECTORIES",
      "Summary": "This read-only directory property contains a :`semicolon-separated list <CMake Language Lists>` of subdirectories processed so far by the ``add_subdirectory()`` or ``subdirs()`` commands."
    },
    {
      "Id": "TESTS",
      "Summary": "List of tests."
    },
    {
      "Id": "TEST_INCLUDE_FILES",
      "Summary": "A list of cmake files that will be included when ctest is run."
    },
    {
      "Id": "VARIABLES",
      "Summary": "List of variables defined in the current directory."
    },
    {
      "Id": "VS_GLOBAL_SECTION_POST_<section>",
      "Summary": "Specify a postSolution global section in Visual Studio."
    },
    {
      "Id": "VS_GLOBAL_SECTION_PRE_<section>",
      "Summary": "Specify a preSolution global section in Visual Studio."
    },
    {
      "Id": "VS_STARTUP_PROJECT",
      "Summary": "Specify the default startup project in a Visual Studio solution."
    }
  ],
  "TestProperties": [
    {
      "Id": "ATTACHED_FILES",
      "Summary": "Attach a list of files to a dashboard submission."
    },
    {
      "Id": "ATTACHED_FILES_ON_FAIL",
      "Summary": "Attach a list of files to a dashboard submission if the test fails."
    },
    {
      "Id": "COST",
      "Summary": "This property describes the cost of a test."
    },
    {
      "Id": "DEPENDS",
      "Summary": "Specifies that this test should only be run after the specified list of tests."
    },
    {
      "Id": "DISABLED",
      "Summary": "If set to ``True``, the test will be skipped and its status will be 'Not Run'."
    },
    {
      "Id": "ENVIRONMENT",
      "Summary": "Specify environment variables that should be defined for running a test."
    },
    {
      "Id": "ENVIRONMENT_MODIFICATION",
      "Summary": "Specify environment variables that should be modified for running a test."
    },
    {
      "Id": "FAIL_REGULAR_EXPRESSION",
      "Summary": "If the output matches this regular expression the test will fail, regardless of the process exit code."
    },
    {
      "Id": "FIXTURES_CLEANUP",
      "Summary": "Specifies a list of fixtures for which the test is to be treated as a cleanup test."
    },
    {
      "Id": "FIXTURES_REQUIRED",
      "Summary": "Specifies a list of fixtures the test requires."
    },
    {
      "Id": "FIXTURES_SETUP",
      "Summary": "Specifies a list of fixtures for which the test is to be treated as a setup test."
    },
    {
      "Id": "LABELS",
      "Summary": "Specify a list of text labels associated with a test."
    },
    {
      "Id": "MEASUREMENT",
      "Summary": "Specify a ``CDASH`` measurement and value to be reported for a test."
    },
    {
      "Id": "PASS_REGULAR_EXPRESSION",
      "Summary": "The output must match this regular expression for the test to pass."
    },
    {
      "Id": "PROCESSOR_AFFINITY",
      "Summary": "Set to a true value to ask CTest to launch the test process with CPU affinity for a fixed set of processors."
    },
    {
      "Id": "PROCESSORS",
      "Summary": "Set to specify how many process slots this test requires."
    },
    {
      "Id": "REQUIRED_FILES",
      "Summary": "List of files required to run the test."
    },
    {
      "Id": "RESOURCE_GROUPS",
      "Summary": "Specify resources required by a test, grouped in a way that is meaningful to the test."
    },
    {
      "Id": "RESOURCE_LOCK",
      "Summary": "Specify a list of resources that are locked by this test."
    },
    {
      "Id": "RUN_SERIAL",
      "Summary": "Do not run this test in parallel with any other test."
    },
    {
      "Id": "SKIP_REGULAR_EXPRESSION",
      "Summary": "If the output matches this regular expression the test will be marked as skipped."
    },
    {
      "Id": "SKIP_RETURN_CODE",
      "Summary": "Return code to mark a test as skipped."
    },
    {
      "Id": "TIMEOUT",
      "Summary": "How many seconds to allow for this test."
    },
    {
      "Id": "TIMEOUT_AFTER_MATCH",
      "Summary": "Change a test's timeout duration after a matching line is encountered in its output."
    },
    {
      "Id": "WILL_FAIL",
      "Summary": "If set to true, this will invert the pass/fail flag of the test."
    },
    {
      "Id": "WORKING_DIRECTORY",
      "Summary": "The directory from which the test executable will be called."
    }
  ],
  "TargetProperties": [
    {
      "Id": "ADDITIONAL_CLEAN_FILES",
      "Summary": "A :`;-list <CMake Language Lists>` of files or directories that will be removed as a part of the global ``clean`` target."
    },
    {
      "Id": "AIX_EXPORT_ALL_SYMBOLS",
      "Summary": "On AIX, CMake automatically exports all symbols from shared libraries, and from executables with the ``ENABLE_EXPORTS`` target property set."
    },
    {
      "Id": "ALIAS_GLOBAL",
      "Summary": "Read-only property indicating of whether an :`ALIAS target <Alias Targets>` is globally visible."
    },
    {
      "Id": "ALIASED_TARGET",
      "Summary": "Name of target aliased by this target."
    },
    {
      "Id": "ANDROID_ANT_ADDITIONAL_OPTIONS",
      "Summary": "Set the additional options for Android Ant build system."
    },
    {
      "Id": "ANDROID_API",
      "Summary": "When :`Cross Compiling for Android with NVIDIA Nsight Tegra Visual Studio Edition`, this property sets the Android target API version (e.g. ``15``)."
    },
    {
      "Id": "ANDROID_API_MIN",
      "Summary": "Set the Android MIN API version (e.g. ``9``)."
    },
    {
      "Id": "ANDROID_ARCH",
      "Summary": "When :`Cross Compiling for Android with NVIDIA Nsight Tegra Visual Studio Edition`, this property sets the Android target architecture."
    },
    {
      "Id": "ANDROID_ASSETS_DIRECTORIES",
      "Summary": "Set the Android assets directories to copy into the main assets folder before build."
    },
    {
      "Id": "ANDROID_GUI",
      "Summary": "When :`Cross Compiling for Android with NVIDIA Nsight Tegra Visual Studio Edition`, this property specifies whether to build an executable as an application package on Android."
    },
    {
      "Id": "ANDROID_JAR_DEPENDENCIES",
      "Summary": "Set the Android property that specifies JAR dependencies."
    },
    {
      "Id": "ANDROID_JAR_DIRECTORIES",
      "Summary": "Set the Android property that specifies directories to search for the JAR libraries."
    },
    {
      "Id": "ANDROID_JAVA_SOURCE_DIR",
      "Summary": "Set the Android property that defines the Java source code root directories."
    },
    {
      "Id": "ANDROID_NATIVE_LIB_DEPENDENCIES",
      "Summary": "Set the Android property that specifies the ."
    },
    {
      "Id": "ANDROID_NATIVE_LIB_DIRECTORIES",
      "Summary": "Set the Android property that specifies directories to search for the ``.so`` libraries."
    },
    {
      "Id": "ANDROID_PROCESS_MAX",
      "Summary": "Set the Android property that defines the maximum number of a parallel Android NDK compiler processes (e.g. ``4``)."
    },
    {
      "Id": "ANDROID_PROGUARD",
      "Summary": "When this property is set to true that enables the ProGuard tool to shrink, optimize, and obfuscate the code by removing unused code and renaming classes, fields, and methods with semantically obscure names."
    },
    {
      "Id": "ANDROID_PROGUARD_CONFIG_PATH",
      "Summary": "Set the Android property that specifies the location of the ProGuard config file."
    },
    {
      "Id": "ANDROID_SECURE_PROPS_PATH",
      "Summary": "Set the Android property that states the location of the secure properties file."
    },
    {
      "Id": "ANDROID_SKIP_ANT_STEP",
      "Summary": "Set the Android property that defines whether or not to skip the Ant build step."
    },
    {
      "Id": "ANDROID_STL_TYPE",
      "Summary": "When :`Cross Compiling for Android with NVIDIA Nsight Tegra Visual Studio Edition`, this property specifies the type of STL support for the project."
    },
    {
      "Id": "ARCHIVE_OUTPUT_DIRECTORY",
      "Summary": "Output directory in which to build :`ARCHIVE <Archive Output Artifacts>` target files."
    },
    {
      "Id": "ARCHIVE_OUTPUT_DIRECTORY_<CONFIG>",
      "Summary": "Per-configuration output directory for :`ARCHIVE <Archive Output Artifacts>` target files."
    },
    {
      "Id": "ARCHIVE_OUTPUT_NAME",
      "Summary": "Output name for :`ARCHIVE <Archive Output Artifacts>` target files."
    },
    {
      "Id": "ARCHIVE_OUTPUT_NAME_<CONFIG>",
      "Summary": "Per-configuration output name for :`ARCHIVE <Archive Output Artifacts>` target files."
    },
    {
      "Id": "AUTOGEN_BUILD_DIR",
      "Summary": "Directory where ``AUTOMOC``, ``AUTOUIC`` and ``AUTORCC`` generate files for the target."
    },
    {
      "Id": "AUTOGEN_ORIGIN_DEPENDS",
      "Summary": "Switch for forwarding origin target dependencies to the corresponding ``_autogen`` target."
    },
    {
      "Id": "AUTOGEN_PARALLEL",
      "Summary": "Number of parallel ``moc`` or ``uic`` processes to start when using ``AUTOMOC`` and ``AUTOUIC``."
    },
    {
      "Id": "AUTOGEN_TARGET_DEPENDS",
      "Summary": "Additional target dependencies of the corresponding ``_autogen`` target."
    },
    {
      "Id": "AUTOMOC",
      "Summary": "Should the target be processed with auto-moc (for Qt projects)."
    },
    {
      "Id": "AUTOMOC_COMPILER_PREDEFINES",
      "Summary": "Boolean value used by ``AUTOMOC`` to determine if the compiler pre definitions file ``moc_predefs.h`` should be generated."
    },
    {
      "Id": "AUTOMOC_DEPEND_FILTERS",
      "Summary": "Filter definitions used by ``AUTOMOC`` to extract file names from a source file that are registered as additional dependencies for the ``moc`` file of the source file."
    },
    {
      "Id": "AUTOMOC_EXECUTABLE",
      "Summary": "``AUTOMOC_EXECUTABLE`` is file path pointing to the ``moc`` executable to use for ``AUTOMOC`` enabled files."
    },
    {
      "Id": "AUTOMOC_MACRO_NAMES",
      "Summary": "A :`semicolon-separated list <CMake Language Lists>` list of macro names used by ``AUTOMOC`` to determine if a C++ file needs to be processed by ``moc``."
    },
    {
      "Id": "AUTOMOC_MOC_OPTIONS",
      "Summary": "Additional options for ``moc`` when using ``AUTOMOC``"
    },
    {
      "Id": "AUTOMOC_PATH_PREFIX",
      "Summary": "When this property is ``ON``, CMake will generate the ``-p`` path prefix option for ``moc`` on ``AUTOMOC`` enabled Qt targets."
    },
    {
      "Id": "AUTORCC",
      "Summary": "Should the target be processed with auto-rcc (for Qt projects)."
    },
    {
      "Id": "AUTORCC_EXECUTABLE",
      "Summary": "``AUTORCC_EXECUTABLE`` is file path pointing to the ``rcc`` executable to use for ``AUTORCC`` enabled files."
    },
    {
      "Id": "AUTORCC_OPTIONS",
      "Summary": "Additional options for ``rcc`` when using ``AUTORCC``"
    },
    {
      "Id": "AUTOUIC",
      "Summary": "Should the target be processed with auto-uic (for Qt projects)."
    },
    {
      "Id": "AUTOUIC_EXECUTABLE",
      "Summary": "``AUTOUIC_EXECUTABLE`` is file path pointing to the ``uic`` executable to use for ``AUTOUIC`` enabled files."
    },
    {
      "Id": "AUTOUIC_OPTIONS",
      "Summary": "Additional options for ``uic`` when using ``AUTOUIC``"
    },
    {
      "Id": "AUTOUIC_SEARCH_PATHS",
      "Summary": "Search path list used by ``AUTOUIC`` to find included ``.ui`` files."
    },
    {
      "Id": "BINARY_DIR",
      "Summary": "This read-only property reports the value of the ``CMAKE_CURRENT_BINARY_DIR`` variable in the directory in which the target was defined."
    },
    {
      "Id": "BUILD_RPATH",
      "Summary": "A :`semicolon-separated list <CMake Language Lists>` specifying runtime path (``RPATH``) entries to add to binaries linked in the build tree (for platforms that support it)."
    },
    {
      "Id": "BUILD_RPATH_USE_ORIGIN",
      "Summary": "Whether to use relative paths for the build ``RPATH``."
    },
    {
      "Id": "BUILD_WITH_INSTALL_NAME_DIR",
      "Summary": "``BUILD_WITH_INSTALL_NAME_DIR`` is a boolean specifying whether the macOS ``install_name`` of a target in the build tree uses the directory given by ``INSTALL_NAME_DIR``."
    },
    {
      "Id": "BUILD_WITH_INSTALL_RPATH",
      "Summary": "``BUILD_WITH_INSTALL_RPATH`` is a boolean specifying whether to link the target in the build tree with the ``INSTALL_RPATH``."
    },
    {
      "Id": "BUNDLE",
      "Summary": "This target is a ``CFBundle`` on the macOS."
    },
    {
      "Id": "BUNDLE_EXTENSION",
      "Summary": "The file extension used to name a ``BUNDLE``, a ``FRAMEWORK``, or a ``MACOSX_BUNDLE`` target on the macOS and iOS."
    },
    {
      "Id": "C_EXTENSIONS",
      "Summary": "Boolean specifying whether compiler specific extensions are requested."
    },
    {
      "Id": "C_STANDARD",
      "Summary": "The C standard whose features are requested to build this target."
    },
    {
      "Id": "C_STANDARD_REQUIRED",
      "Summary": "Boolean describing whether the value of ``C_STANDARD`` is a requirement."
    },
    {
      "Id": "COMMON_LANGUAGE_RUNTIME",
      "Summary": "By setting this target property, the target is configured to build with ``C++/CLI`` support."
    },
    {
      "Id": "COMPATIBLE_INTERFACE_BOOL",
      "Summary": "Properties which must be compatible with their link interface"
    },
    {
      "Id": "COMPATIBLE_INTERFACE_NUMBER_MAX",
      "Summary": "Properties whose maximum value from the link interface will be used."
    },
    {
      "Id": "COMPATIBLE_INTERFACE_NUMBER_MIN",
      "Summary": "Properties whose maximum value from the link interface will be used."
    },
    {
      "Id": "COMPATIBLE_INTERFACE_STRING",
      "Summary": "Properties which must be string-compatible with their link interface"
    },
    {
      "Id": "COMPILE_DEFINITIONS",
      "Summary": "Preprocessor definitions for compiling a target's sources."
    },
    {
      "Id": "COMPILE_FEATURES",
      "Summary": "Compiler features enabled for this target."
    },
    {
      "Id": "COMPILE_FLAGS",
      "Summary": "Additional flags to use when compiling this target's sources."
    },
    {
      "Id": "COMPILE_OPTIONS",
      "Summary": "List of options to pass to the compiler."
    },
    {
      "Id": "COMPILE_PDB_NAME",
      "Summary": "Output name for the MS debug symbol ``.pdb`` file generated by the compiler while building source files."
    },
    {
      "Id": "COMPILE_PDB_NAME_<CONFIG>",
      "Summary": "Per-configuration output name for the MS debug symbol ``.pdb`` file generated by the compiler while building source files."
    },
    {
      "Id": "COMPILE_PDB_OUTPUT_DIRECTORY",
      "Summary": "Output directory for the MS debug symbol ``.pdb`` file generated by the compiler while building source files."
    },
    {
      "Id": "COMPILE_PDB_OUTPUT_DIRECTORY_<CONFIG>",
      "Summary": "Per-configuration output directory for the MS debug symbol ``.pdb`` file generated by the compiler while building source files."
    },
    {
      "Id": "<CONFIG>_OUTPUT_NAME",
      "Summary": "Old per-configuration target file base name."
    },
    {
      "Id": "<CONFIG>_POSTFIX",
      "Summary": "Postfix to append to the target file name for configuration <CONFIG>."
    },
    {
      "Id": "CROSSCOMPILING_EMULATOR",
      "Summary": "Use the given emulator to run executables created when crosscompiling."
    },
    {
      "Id": "CUDA_ARCHITECTURES",
      "Summary": "List of architectures to generate device code for."
    },
    {
      "Id": "CUDA_EXTENSIONS",
      "Summary": "Boolean specifying whether compiler specific extensions are requested."
    },
    {
      "Id": "CUDA_PTX_COMPILATION",
      "Summary": "Compile CUDA sources to ``.ptx`` files instead of ``.obj`` files within :`Object Libraries`."
    },
    {
      "Id": "CUDA_RESOLVE_DEVICE_SYMBOLS",
      "Summary": "CUDA only: Enables device linking for the specific library target where required."
    },
    {
      "Id": "CUDA_RUNTIME_LIBRARY",
      "Summary": "Select the CUDA runtime library for use by compilers targeting the CUDA language."
    },
    {
      "Id": "CUDA_SEPARABLE_COMPILATION",
      "Summary": "CUDA only: Enables separate compilation of device code"
    },
    {
      "Id": "CUDA_STANDARD",
      "Summary": "The CUDA/C++ standard whose features are requested to build this target."
    },
    {
      "Id": "CUDA_STANDARD_REQUIRED",
      "Summary": "Boolean describing whether the value of ``CUDA_STANDARD`` is a requirement."
    },
    {
      "Id": "CXX_EXTENSIONS",
      "Summary": "Boolean specifying whether compiler specific extensions are requested."
    },
    {
      "Id": "CXX_STANDARD",
      "Summary": "The C++ standard whose features are requested to build this target."
    },
    {
      "Id": "CXX_STANDARD_REQUIRED",
      "Summary": "Boolean describing whether the value of ``CXX_STANDARD`` is a requirement."
    },
    {
      "Id": "DEBUG_POSTFIX",
      "Summary": "See target property ``<CONFIG>_POSTFIX``."
    },
    {
      "Id": "DEFINE_SYMBOL",
      "Summary": "Define a symbol when compiling this target's sources."
    },
    {
      "Id": "DEPLOYMENT_ADDITIONAL_FILES",
      "Summary": "Set the WinCE project ``AdditionalFiles`` in ``DeploymentTool`` in ``.vcproj`` files generated by the ``Visual Studio 9 2008`` generator."
    },
    {
      "Id": "DEPLOYMENT_REMOTE_DIRECTORY",
      "Summary": "Set the WinCE project ``RemoteDirectory`` in ``DeploymentTool`` and ``RemoteExecutable`` in ``DebuggerTool`` in ``.vcproj`` files generated by the ``Visual Studio 9 2008`` generator."
    },
    {
      "Id": "DEPRECATION",
      "Summary": "Deprecation message from imported target's developer."
    },
    {
      "Id": "DISABLE_PRECOMPILE_HEADERS",
      "Summary": "Disables the precompilation of header files specified by ``PRECOMPILE_HEADERS`` property."
    },
    {
      "Id": "DOTNET_TARGET_FRAMEWORK",
      "Summary": "Specify the ."
    },
    {
      "Id": "DOTNET_TARGET_FRAMEWORK_VERSION",
      "Summary": "Specify the ."
    },
    {
      "Id": "EchoString",
      "Summary": "A message to be displayed when the target is built."
    },
    {
      "Id": "ENABLE_EXPORTS",
      "Summary": "Specify whether an executable exports symbols for loadable modules."
    },
    {
      "Id": "EXCLUDE_FROM_ALL",
      "Summary": "Set this target property to a true (or false) value to exclude (or include) the target from the \"all\" target of the containing directory and its ancestors."
    },
    {
      "Id": "EXCLUDE_FROM_DEFAULT_BUILD",
      "Summary": "Exclude target from ``Build Solution``."
    },
    {
      "Id": "EXCLUDE_FROM_DEFAULT_BUILD_<CONFIG>",
      "Summary": "Per-configuration version of target exclusion from ``Build Solution``."
    },
    {
      "Id": "EXPORT_COMPILE_COMMANDS",
      "Summary": "Enable/Disable output of compile commands during generation for a target."
    },
    {
      "Id": "EXPORT_NAME",
      "Summary": "Exported name for target files."
    },
    {
      "Id": "EXPORT_PROPERTIES",
      "Summary": "List additional properties to export for a target."
    },
    {
      "Id": "FOLDER",
      "Summary": "Set the folder name."
    },
    {
      "Id": "Fortran_BUILDING_INSTRINSIC_MODULES",
      "Summary": "Instructs the CMake Fortran preprocessor that the target is building Fortran intrinsics for building a Fortran compiler."
    },
    {
      "Id": "Fortran_FORMAT",
      "Summary": "Set to ``FIXED`` or ``FREE`` to indicate the Fortran source layout."
    },
    {
      "Id": "Fortran_MODULE_DIRECTORY",
      "Summary": "Specify output directory for Fortran modules provided by the target."
    },
    {
      "Id": "Fortran_PREPROCESS",
      "Summary": "Control whether the Fortran source file should be unconditionally preprocessed."
    },
    {
      "Id": "FRAMEWORK",
      "Summary": "Build ``SHARED`` or ``STATIC`` library as Framework Bundle on the macOS and iOS."
    },
    {
      "Id": "FRAMEWORK_MULTI_CONFIG_POSTFIX_<CONFIG>",
      "Summary": "Postfix to append to the framework file name for configuration ``<CONFIG>``, when using a multi-config generator (like Xcode and Ninja Multi-Config)."
    },
    {
      "Id": "FRAMEWORK_VERSION",
      "Summary": "Version of a framework created using the ``FRAMEWORK`` target property (e.g. ``A``)."
    },
    {
      "Id": "GENERATOR_FILE_NAME",
      "Summary": "Generator's file for this target."
    },
    {
      "Id": "GHS_INTEGRITY_APP",
      "Summary": "``ON`` / ``OFF`` boolean to determine if an executable target should be treated as an `Integrity Application`."
    },
    {
      "Id": "GHS_NO_SOURCE_GROUP_FILE",
      "Summary": "``ON`` / ``OFF`` boolean to control if the project file for a target should be one single file or multiple files."
    },
    {
      "Id": "GNUtoMS",
      "Summary": "Convert GNU import library (``.dll.a``) to MS format (``.lib``)."
    },
    {
      "Id": "HAS_CXX",
      "Summary": "Link the target using the C++ linker tool (obsolete)."
    },
    {
      "Id": "HIP_ARCHITECTURES",
      "Summary": "List of AMD GPU architectures to generate device code for."
    },
    {
      "Id": "HIP_EXTENSIONS",
      "Summary": "Boolean specifying whether compiler specific extensions are requested."
    },
    {
      "Id": "HIP_STANDARD",
      "Summary": "The HIP/C++ standard requested to build this target."
    },
    {
      "Id": "HIP_STANDARD_REQUIRED",
      "Summary": "Boolean describing whether the value of ``HIP_STANDARD`` is a requirement."
    },
    {
      "Id": "IMPLICIT_DEPENDS_INCLUDE_TRANSFORM",
      "Summary": "Specify ``#include`` line transforms for dependencies in a target."
    },
    {
      "Id": "IMPORTED",
      "Summary": "Read-only indication of whether a target is ``IMPORTED``."
    },
    {
      "Id": "IMPORTED_COMMON_LANGUAGE_RUNTIME",
      "Summary": "Property to define if the target uses ``C++/CLI``."
    },
    {
      "Id": "IMPORTED_CONFIGURATIONS",
      "Summary": "Configurations provided for an IMPORTED target."
    },
    {
      "Id": "IMPORTED_GLOBAL",
      "Summary": "Indication of whether an :`IMPORTED target <Imported Targets>` is globally visible."
    },
    {
      "Id": "IMPORTED_IMPLIB",
      "Summary": "Full path to the import library for an ``IMPORTED`` target."
    },
    {
      "Id": "IMPORTED_IMPLIB_<CONFIG>",
      "Summary": "<CONFIG>-specific version of ``IMPORTED_IMPLIB`` property."
    },
    {
      "Id": "IMPORTED_LIBNAME",
      "Summary": "Specify the link library name for an :`imported <Imported Targets>` :`Interface Library <Interface Libraries>`."
    },
    {
      "Id": "IMPORTED_LIBNAME_<CONFIG>",
      "Summary": "<CONFIG>-specific version of ``IMPORTED_LIBNAME`` property."
    },
    {
      "Id": "IMPORTED_LINK_DEPENDENT_LIBRARIES",
      "Summary": "Dependent shared libraries of an imported shared library."
    },
    {
      "Id": "IMPORTED_LINK_DEPENDENT_LIBRARIES_<CONFIG>",
      "Summary": "<CONFIG>-specific version of ``IMPORTED_LINK_DEPENDENT_LIBRARIES``."
    },
    {
      "Id": "IMPORTED_LINK_INTERFACE_LANGUAGES",
      "Summary": "Languages compiled into an ``IMPORTED`` static library."
    },
    {
      "Id": "IMPORTED_LINK_INTERFACE_LANGUAGES_<CONFIG>",
      "Summary": "<CONFIG>-specific version of ``IMPORTED_LINK_INTERFACE_LANGUAGES``."
    },
    {
      "Id": "IMPORTED_LINK_INTERFACE_LIBRARIES",
      "Summary": "Transitive link interface of an ``IMPORTED`` target."
    },
    {
      "Id": "IMPORTED_LINK_INTERFACE_LIBRARIES_<CONFIG>",
      "Summary": "<CONFIG>-specific version of ``IMPORTED_LINK_INTERFACE_LIBRARIES``."
    },
    {
      "Id": "IMPORTED_LINK_INTERFACE_MULTIPLICITY",
      "Summary": "Repetition count for cycles of ``IMPORTED`` static libraries."
    },
    {
      "Id": "IMPORTED_LINK_INTERFACE_MULTIPLICITY_<CONFIG>",
      "Summary": "<CONFIG>-specific version of ``IMPORTED_LINK_INTERFACE_MULTIPLICITY``."
    },
    {
      "Id": "IMPORTED_LOCATION",
      "Summary": "Full path to the main file on disk for an ``IMPORTED`` target."
    },
    {
      "Id": "IMPORTED_LOCATION_<CONFIG>",
      "Summary": "<CONFIG>-specific version of ``IMPORTED_LOCATION`` property."
    },
    {
      "Id": "IMPORTED_NO_SONAME",
      "Summary": "Specifies that an ``IMPORTED`` shared library target has no ``soname``."
    },
    {
      "Id": "IMPORTED_NO_SONAME_<CONFIG>",
      "Summary": "<CONFIG>-specific version of ``IMPORTED_NO_SONAME`` property."
    },
    {
      "Id": "IMPORTED_OBJECTS",
      "Summary": "A :`semicolon-separated list <CMake Language Lists>` of absolute paths to the object files on disk for an :`imported <Imported targets>` :`object library <object libraries>`."
    },
    {
      "Id": "IMPORTED_OBJECTS_<CONFIG>",
      "Summary": "``<CONFIG>``-specific version of ``IMPORTED_OBJECTS`` property."
    },
    {
      "Id": "IMPORTED_SONAME",
      "Summary": "The ``soname`` of an ``IMPORTED`` target of shared library type."
    },
    {
      "Id": "IMPORTED_SONAME_<CONFIG>",
      "Summary": "<CONFIG>-specific version of ``IMPORTED_SONAME`` property."
    },
    {
      "Id": "IMPORT_PREFIX",
      "Summary": "What comes before the import library name."
    },
    {
      "Id": "IMPORT_SUFFIX",
      "Summary": "What comes after the import library name."
    },
    {
      "Id": "INCLUDE_DIRECTORIES",
      "Summary": "List of preprocessor include file search directories."
    },
    {
      "Id": "INSTALL_NAME_DIR",
      "Summary": "Directory name for installed targets on Apple platforms."
    },
    {
      "Id": "INSTALL_REMOVE_ENVIRONMENT_RPATH",
      "Summary": "Controls whether toolchain-defined rpaths should be removed during installation."
    },
    {
      "Id": "INSTALL_RPATH",
      "Summary": "The rpath to use for installed targets."
    },
    {
      "Id": "INSTALL_RPATH_USE_LINK_PATH",
      "Summary": "Add paths to linker search and installed rpath."
    },
    {
      "Id": "INTERFACE_AUTOUIC_OPTIONS",
      "Summary": "List of interface options to pass to uic."
    },
    {
      "Id": "INTERFACE_COMPILE_DEFINITIONS",
      "Summary": "List of public compile definitions requirements for a library."
    },
    {
      "Id": "INTERFACE_COMPILE_FEATURES",
      "Summary": "List of public compile features requirements for a library."
    },
    {
      "Id": "INTERFACE_COMPILE_OPTIONS",
      "Summary": "List of public compile options requirements for a library."
    },
    {
      "Id": "INTERFACE_INCLUDE_DIRECTORIES",
      "Summary": "List of public include directories requirements for a library."
    },
    {
      "Id": "INTERFACE_LINK_DEPENDS",
      "Summary": "Additional public interface files on which a target binary depends for linking."
    },
    {
      "Id": "INTERFACE_LINK_DIRECTORIES",
      "Summary": "List of public link directories requirements for a library."
    },
    {
      "Id": "INTERFACE_LINK_LIBRARIES",
      "Summary": "List public interface libraries for a library."
    },
    {
      "Id": "INTERFACE_LINK_OPTIONS",
      "Summary": "List of public link options requirements for a library."
    },
    {
      "Id": "INTERFACE_POSITION_INDEPENDENT_CODE",
      "Summary": "Whether consumers need to create a position-independent target"
    },
    {
      "Id": "INTERFACE_PRECOMPILE_HEADERS",
      "Summary": "List of interface header files to precompile into consuming targets."
    },
    {
      "Id": "INTERFACE_SOURCES",
      "Summary": "List of interface sources to compile into consuming targets."
    },
    {
      "Id": "INTERFACE_SYSTEM_INCLUDE_DIRECTORIES",
      "Summary": "List of public system include directories for a library."
    },
    {
      "Id": "INTERPROCEDURAL_OPTIMIZATION",
      "Summary": "Enable interprocedural optimization for a target."
    },
    {
      "Id": "INTERPROCEDURAL_OPTIMIZATION_<CONFIG>",
      "Summary": "Per-configuration interprocedural optimization for a target."
    },
    {
      "Id": "IOS_INSTALL_COMBINED",
      "Summary": "Build a combined (device and simulator) target when installing."
    },
    {
      "Id": "ISPC_HEADER_DIRECTORY",
      "Summary": "Specify relative output directory for ISPC headers provided by the target."
    },
    {
      "Id": "ISPC_HEADER_SUFFIX",
      "Summary": "Specify output suffix to be used for ISPC generated headers provided by the target."
    },
    {
      "Id": "ISPC_INSTRUCTION_SETS",
      "Summary": "List of instruction set architectures to generate code for."
    },
    {
      "Id": "JOB_POOL_COMPILE",
      "Summary": "Ninja only: Pool used for compiling."
    },
    {
      "Id": "JOB_POOL_LINK",
      "Summary": "Ninja only: Pool used for linking."
    },
    {
      "Id": "JOB_POOL_PRECOMPILE_HEADER",
      "Summary": "Ninja only: Pool used for generating pre-compiled headers."
    },
    {
      "Id": "LABELS",
      "Summary": "Specify a list of text labels associated with a target."
    },
    {
      "Id": "<LANG>_CLANG_TIDY",
      "Summary": "This property is implemented only when ``<LANG>`` is ``C``, ``CXX``, ``OBJC`` or ``OBJCXX``."
    },
    {
      "Id": "<LANG>_COMPILER_LAUNCHER",
      "Summary": "This property is implemented only when ``<LANG>`` is ``C``, ``CXX``, ``Fortran``, ``HIP``, ``ISPC``, ``OBJC``, ``OBJCXX``, or ``CUDA``."
    },
    {
      "Id": "<LANG>_CPPCHECK",
      "Summary": "This property is supported only when ``<LANG>`` is ``C`` or ``CXX``."
    },
    {
      "Id": "<LANG>_CPPLINT",
      "Summary": "This property is supported only when ``<LANG>`` is ``C`` or ``CXX``."
    },
    {
      "Id": "<LANG>_EXTENSIONS",
      "Summary": "The variations are:"
    },
    {
      "Id": "<LANG>_INCLUDE_WHAT_YOU_USE",
      "Summary": "This property is implemented only when ``<LANG>`` is ``C`` or ``CXX``."
    },
    {
      "Id": "<LANG>_LINKER_LAUNCHER",
      "Summary": "This property is implemented only when ``<LANG>`` is ``C``, ``CXX``, ``OBJC``, or ``OBJCXX``"
    },
    {
      "Id": "<LANG>_STANDARD",
      "Summary": "The variations are:"
    },
    {
      "Id": "<LANG>_STANDARD_REQUIRED",
      "Summary": "The variations are:"
    },
    {
      "Id": "<LANG>_VISIBILITY_PRESET",
      "Summary": "Value for symbol visibility compile flags"
    },
    {
      "Id": "LIBRARY_OUTPUT_DIRECTORY",
      "Summary": "Output directory in which to build :`LIBRARY <Library Output Artifacts>` target files."
    },
    {
      "Id": "LIBRARY_OUTPUT_DIRECTORY_<CONFIG>",
      "Summary": "Per-configuration output directory for :`LIBRARY <Library Output Artifacts>` target files."
    },
    {
      "Id": "LIBRARY_OUTPUT_NAME",
      "Summary": "Output name for :`LIBRARY <Library Output Artifacts>` target files."
    },
    {
      "Id": "LIBRARY_OUTPUT_NAME_<CONFIG>",
      "Summary": "Per-configuration output name for :`LIBRARY <Library Output Artifacts>` target files."
    },
    {
      "Id": "LINK_DEPENDS",
      "Summary": "Additional files on which a target binary depends for linking."
    },
    {
      "Id": "LINK_DEPENDS_NO_SHARED",
      "Summary": "Do not depend on linked shared library files."
    },
    {
      "Id": "LINK_DIRECTORIES",
      "Summary": "List of directories to use for the link step of shared library, module and executable targets."
    },
    {
      "Id": "LINK_FLAGS",
      "Summary": "Additional flags to use when linking this target if it is a shared library, module library, or an executable."
    },
    {
      "Id": "LINK_FLAGS_<CONFIG>",
      "Summary": "Per-configuration linker flags for a ``SHARED`` library, ``MODULE`` or ``EXECUTABLE`` target."
    },
    {
      "Id": "LINK_INTERFACE_LIBRARIES",
      "Summary": "List public interface libraries for a shared library or executable."
    },
    {
      "Id": "LINK_INTERFACE_LIBRARIES_<CONFIG>",
      "Summary": "Per-configuration list of public interface libraries for a target."
    },
    {
      "Id": "LINK_INTERFACE_MULTIPLICITY",
      "Summary": "Repetition count for ``STATIC`` libraries with cyclic dependencies."
    },
    {
      "Id": "LINK_INTERFACE_MULTIPLICITY_<CONFIG>",
      "Summary": "Per-configuration repetition count for cycles of ``STATIC`` libraries."
    },
    {
      "Id": "LINK_LIBRARIES",
      "Summary": "List of direct link dependencies."
    },
    {
      "Id": "LINK_OPTIONS",
      "Summary": "List of options to use for the link step of shared library, module and executable targets as well as the device link step."
    },
    {
      "Id": "LINK_SEARCH_END_STATIC",
      "Summary": "End a link line such that static system libraries are used."
    },
    {
      "Id": "LINK_SEARCH_START_STATIC",
      "Summary": "Assume the linker looks for static libraries by default."
    },
    {
      "Id": "LINK_WHAT_YOU_USE",
      "Summary": "This is a boolean option that, when set to ``TRUE``, will automatically run contents of variable ``CMAKE_LINK_WHAT_YOU_USE_CHECK`` on the target after it is linked."
    },
    {
      "Id": "LINKER_LANGUAGE",
      "Summary": "Specifies language whose compiler will invoke the linker."
    },
    {
      "Id": "LOCATION",
      "Summary": "Read-only location of a target on disk."
    },
    {
      "Id": "LOCATION_<CONFIG>",
      "Summary": "Read-only property providing a target location on disk."
    },
    {
      "Id": "MACHO_COMPATIBILITY_VERSION",
      "Summary": "What compatibility version number is this target for Mach-O binaries."
    },
    {
      "Id": "MACHO_CURRENT_VERSION",
      "Summary": "What current version number is this target for Mach-O binaries."
    },
    {
      "Id": "MACOSX_BUNDLE",
      "Summary": "Build an executable as an Application Bundle on macOS or iOS."
    },
    {
      "Id": "MACOSX_BUNDLE_INFO_PLIST",
      "Summary": "Specify a custom ``Info.plist`` template for a macOS and iOS Application Bundle."
    },
    {
      "Id": "MACOSX_FRAMEWORK_INFO_PLIST",
      "Summary": "Specify a custom ``Info.plist`` template for a macOS and iOS Framework."
    },
    {
      "Id": "MACOSX_RPATH",
      "Summary": "Whether this target on macOS or iOS is located at runtime using rpaths."
    },
    {
      "Id": "MANUALLY_ADDED_DEPENDENCIES",
      "Summary": "Get manually added dependencies to other top-level targets."
    },
    {
      "Id": "MAP_IMPORTED_CONFIG_<CONFIG>",
      "Summary": "Map from project configuration to :`imported target <IMPORTED targets>`'s configuration."
    },
    {
      "Id": "MSVC_RUNTIME_LIBRARY",
      "Summary": "Select the MSVC runtime library for use by compilers targeting the MSVC ABI."
    },
    {
      "Id": "NAME",
      "Summary": "Logical name for the target."
    },
    {
      "Id": "NO_SONAME",
      "Summary": "Whether to set ``soname`` when linking a shared library."
    },
    {
      "Id": "NO_SYSTEM_FROM_IMPORTED",
      "Summary": "Do not treat include directories from the interfaces of consumed :`imported targets` as ``SYSTEM``."
    },
    {
      "Id": "OBJC_EXTENSIONS",
      "Summary": "Boolean specifying whether compiler specific extensions are requested."
    },
    {
      "Id": "OBJC_STANDARD",
      "Summary": "The OBJC standard whose features are requested to build this target."
    },
    {
      "Id": "OBJC_STANDARD_REQUIRED",
      "Summary": "Boolean describing whether the value of ``OBJC_STANDARD`` is a requirement."
    },
    {
      "Id": "OBJCXX_EXTENSIONS",
      "Summary": "Boolean specifying whether compiler specific extensions are requested."
    },
    {
      "Id": "OBJCXX_STANDARD",
      "Summary": "The ObjC++ standard whose features are requested to build this target."
    },
    {
      "Id": "OBJCXX_STANDARD_REQUIRED",
      "Summary": "Boolean describing whether the value of ``OBJCXX_STANDARD`` is a requirement."
    },
    {
      "Id": "OPTIMIZE_DEPENDENCIES",
      "Summary": "Activates dependency optimization of static and object libraries."
    },
    {
      "Id": "OSX_ARCHITECTURES",
      "Summary": "Target specific architectures for macOS."
    },
    {
      "Id": "OSX_ARCHITECTURES_<CONFIG>",
      "Summary": "Per-configuration macOS and iOS binary architectures for a target."
    },
    {
      "Id": "OUTPUT_NAME",
      "Summary": "Output name for target files."
    },
    {
      "Id": "OUTPUT_NAME_<CONFIG>",
      "Summary": "Per-configuration target file base name."
    },
    {
      "Id": "PCH_WARN_INVALID",
      "Summary": "When this property is set to true, the precompile header compiler options will contain a compiler flag which should warn about invalid precompiled headers e."
    },
    {
      "Id": "PCH_INSTANTIATE_TEMPLATES",
      "Summary": "When this property is set to true, the precompiled header compiler options will contain a flag to instantiate templates during the generation of the PCH if supported."
    },
    {
      "Id": "PDB_NAME",
      "Summary": "Output name for the MS debug symbol ``.pdb`` file generated by the linker for an executable or shared library target."
    },
    {
      "Id": "PDB_NAME_<CONFIG>",
      "Summary": "Per-configuration output name for the MS debug symbol ``.pdb`` file generated by the linker for an executable or shared library target."
    },
    {
      "Id": "PDB_OUTPUT_DIRECTORY",
      "Summary": "Output directory for the MS debug symbols ``.pdb`` file generated by the linker for an executable or shared library target."
    },
    {
      "Id": "PDB_OUTPUT_DIRECTORY_<CONFIG>",
      "Summary": "Per-configuration output directory for the MS debug symbol ``.pdb`` file generated by the linker for an executable or shared library target."
    },
    {
      "Id": "POSITION_INDEPENDENT_CODE",
      "Summary": "Whether to create a position-independent target"
    },
    {
      "Id": "PRECOMPILE_HEADERS",
      "Summary": "List of header files to precompile."
    },
    {
      "Id": "PRECOMPILE_HEADERS_REUSE_FROM",
      "Summary": "Target from which to reuse the precompiled headers build artifact."
    },
    {
      "Id": "PREFIX",
      "Summary": "What comes before the library name."
    },
    {
      "Id": "PRIVATE_HEADER",
      "Summary": "Specify private header files in a ``FRAMEWORK`` shared library target."
    },
    {
      "Id": "PROJECT_LABEL",
      "Summary": "Change the name of a target in an IDE."
    },
    {
      "Id": "PUBLIC_HEADER",
      "Summary": "Specify public header files in a ``FRAMEWORK`` shared library target."
    },
    {
      "Id": "RESOURCE",
      "Summary": "Specify resource files in a ``FRAMEWORK`` or ``BUNDLE``."
    },
    {
      "Id": "RULE_LAUNCH_COMPILE",
      "Summary": "Specify a launcher for compile rules."
    },
    {
      "Id": "RULE_LAUNCH_CUSTOM",
      "Summary": "Specify a launcher for custom rules."
    },
    {
      "Id": "RULE_LAUNCH_LINK",
      "Summary": "Specify a launcher for link rules."
    },
    {
      "Id": "RUNTIME_OUTPUT_DIRECTORY",
      "Summary": "Output directory in which to build :`RUNTIME <Runtime Output Artifacts>` target files."
    },
    {
      "Id": "RUNTIME_OUTPUT_DIRECTORY_<CONFIG>",
      "Summary": "Per-configuration output directory for :`RUNTIME <Runtime Output Artifacts>` target files."
    },
    {
      "Id": "RUNTIME_OUTPUT_NAME",
      "Summary": "Output name for :`RUNTIME <Runtime Output Artifacts>` target files."
    },
    {
      "Id": "RUNTIME_OUTPUT_NAME_<CONFIG>",
      "Summary": "Per-configuration output name for :`RUNTIME <Runtime Output Artifacts>` target files."
    },
    {
      "Id": "SKIP_BUILD_RPATH",
      "Summary": "Should rpaths be used for the build tree."
    },
    {
      "Id": "SOURCE_DIR",
      "Summary": "This read-only property reports the value of the ``CMAKE_CURRENT_SOURCE_DIR`` variable in the directory in which the target was defined."
    },
    {
      "Id": "SOURCES",
      "Summary": "Source names specified for a target."
    },
    {
      "Id": "SOVERSION",
      "Summary": "What version number is this target."
    },
    {
      "Id": "STATIC_LIBRARY_FLAGS",
      "Summary": "Archiver (or MSVC librarian) flags for a static library target."
    },
    {
      "Id": "STATIC_LIBRARY_FLAGS_<CONFIG>",
      "Summary": "Per-configuration archiver (or MSVC librarian) flags for a static library target."
    },
    {
      "Id": "STATIC_LIBRARY_OPTIONS",
      "Summary": "Archiver (or MSVC librarian) flags for a static library target."
    },
    {
      "Id": "SUFFIX",
      "Summary": "What comes after the target name."
    },
    {
      "Id": "Swift_DEPENDENCIES_FILE",
      "Summary": "This property sets the path for the Swift dependency file (swiftdep) for the target."
    },
    {
      "Id": "Swift_LANGUAGE_VERSION",
      "Summary": "This property sets the language version for the Swift sources in the target."
    },
    {
      "Id": "Swift_MODULE_DIRECTORY",
      "Summary": "Specify output directory for Swift modules provided by the target."
    },
    {
      "Id": "Swift_MODULE_NAME",
      "Summary": "This property specifies the name of the Swift module."
    },
    {
      "Id": "TYPE",
      "Summary": "The type of the target."
    },
    {
      "Id": "UNITY_BUILD",
      "Summary": "When this property is set to true, the target source files will be combined into batches for faster compilation."
    },
    {
      "Id": "UNITY_BUILD_BATCH_SIZE",
      "Summary": "Specifies the maximum number of source files that can be combined into any one unity source file when unity builds are enabled by the ``UNITY_BUILD`` target property."
    },
    {
      "Id": "UNITY_BUILD_CODE_AFTER_INCLUDE",
      "Summary": "Code snippet which is included verbatim by the ``UNITY_BUILD`` feature just after every ``#include`` statement in the generated unity source files."
    },
    {
      "Id": "UNITY_BUILD_CODE_BEFORE_INCLUDE",
      "Summary": "Code snippet which is included verbatim by the ``UNITY_BUILD`` feature just before every ``#include`` statement in the generated unity source files."
    },
    {
      "Id": "UNITY_BUILD_MODE",
      "Summary": "CMake provides different algorithms for selecting which sources are grouped together into a *bucket*."
    },
    {
      "Id": "UNITY_BUILD_UNIQUE_ID",
      "Summary": "The name of a valid C-identifier which is set to a unique per-file value during unity builds."
    },
    {
      "Id": "VERSION",
      "Summary": "What version number is this target."
    },
    {
      "Id": "VISIBILITY_INLINES_HIDDEN",
      "Summary": "Whether to add a compile flag to hide symbols of inline functions"
    },
    {
      "Id": "VS_CONFIGURATION_TYPE",
      "Summary": "Visual Studio project configuration type."
    },
    {
      "Id": "VS_DEBUGGER_COMMAND",
      "Summary": "Sets the local debugger command for Visual Studio C++ targets."
    },
    {
      "Id": "VS_DEBUGGER_COMMAND_ARGUMENTS",
      "Summary": "Sets the local debugger command line arguments for Visual Studio C++ targets."
    },
    {
      "Id": "VS_DEBUGGER_ENVIRONMENT",
      "Summary": "Sets the local debugger environment for Visual Studio C++ targets."
    },
    {
      "Id": "VS_DEBUGGER_WORKING_DIRECTORY",
      "Summary": "Sets the local debugger working directory for Visual Studio C++ targets."
    },
    {
      "Id": "VS_DESKTOP_EXTENSIONS_VERSION",
      "Summary": "Visual Studio Windows 10 Desktop Extensions Version"
    },
    {
      "Id": "VS_DOTNET_DOCUMENTATION_FILE",
      "Summary": "Visual Studio managed project ."
    },
    {
      "Id": "VS_DOTNET_REFERENCE_<refname>",
      "Summary": "Visual Studio managed project ."
    },
    {
      "Id": "VS_DOTNET_REFERENCEPROP_<refname>_TAG_<tagname>",
      "Summary": "Defines an XML property ``<tagname>`` for a ."
    },
    {
      "Id": "VS_DOTNET_REFERENCES",
      "Summary": "Visual Studio managed project ."
    },
    {
      "Id": "VS_DOTNET_REFERENCES_COPY_LOCAL",
      "Summary": "Sets the **Copy Local** property for all ."
    },
    {
      "Id": "VS_DOTNET_TARGET_FRAMEWORK_VERSION",
      "Summary": "Specify the ."
    },
    {
      "Id": "VS_DPI_AWARE",
      "Summary": "Set the Manifest Tool -> Input and Output -> DPI Awareness in the Visual Studio target project properties."
    },
    {
      "Id": "VS_GLOBAL_KEYWORD",
      "Summary": "Visual Studio project keyword for VS 10 (2010) and newer."
    },
    {
      "Id": "VS_GLOBAL_PROJECT_TYPES",
      "Summary": "Visual Studio project type(s)."
    },
    {
      "Id": "VS_GLOBAL_ROOTNAMESPACE",
      "Summary": "Visual Studio project root namespace."
    },
    {
      "Id": "VS_GLOBAL_<variable>",
      "Summary": "Visual Studio project-specific global variable."
    },
    {
      "Id": "VS_IOT_EXTENSIONS_VERSION",
      "Summary": "Visual Studio Windows 10 IoT Extensions Version"
    },
    {
      "Id": "VS_IOT_STARTUP_TASK",
      "Summary": "Visual Studio Windows 10 IoT Continuous Background Task"
    },
    {
      "Id": "VS_JUST_MY_CODE_DEBUGGING",
      "Summary": "Enable Just My Code with Visual Studio debugger."
    },
    {
      "Id": "VS_KEYWORD",
      "Summary": "Visual Studio project keyword for VS 9 (2008) and older."
    },
    {
      "Id": "VS_MOBILE_EXTENSIONS_VERSION",
      "Summary": "Visual Studio Windows 10 Mobile Extensions Version"
    },
    {
      "Id": "VS_NO_SOLUTION_DEPLOY",
      "Summary": "Specify that the target should not be marked for deployment to a Windows CE or Windows Phone device in the generated Visual Studio solution."
    },
    {
      "Id": "VS_PACKAGE_REFERENCES",
      "Summary": "Visual Studio package references for nuget."
    },
    {
      "Id": "VS_PLATFORM_TOOLSET",
      "Summary": "Overrides the platform toolset used to build a target."
    },
    {
      "Id": "VS_PROJECT_IMPORT",
      "Summary": "Visual Studio managed project imports"
    },
    {
      "Id": "VS_SCC_AUXPATH",
      "Summary": "Visual Studio Source Code Control Aux Path."
    },
    {
      "Id": "VS_SCC_LOCALPATH",
      "Summary": "Visual Studio Source Code Control Local Path."
    },
    {
      "Id": "VS_SCC_PROJECTNAME",
      "Summary": "Visual Studio Source Code Control Project."
    },
    {
      "Id": "VS_SCC_PROVIDER",
      "Summary": "Visual Studio Source Code Control Provider."
    },
    {
      "Id": "VS_SDK_REFERENCES",
      "Summary": "Visual Studio project SDK references."
    },
    {
      "Id": "VS_SOLUTION_DEPLOY",
      "Summary": "Specify that the target should be marked for deployment when not targeting Windows CE, Windows Phone or a Windows Store application."
    },
    {
      "Id": "VS_SOURCE_SETTINGS_<tool>",
      "Summary": "Set any item metadata on all non-built files that use <tool>."
    },
    {
      "Id": "VS_USER_PROPS",
      "Summary": "Sets the user props file to be included in the visual studio C++ project file."
    },
    {
      "Id": "VS_WINDOWS_TARGET_PLATFORM_MIN_VERSION",
      "Summary": "Visual Studio Windows Target Platform Minimum Version"
    },
    {
      "Id": "VS_WINRT_COMPONENT",
      "Summary": "Mark a target as a Windows Runtime component for the Visual Studio generator."
    },
    {
      "Id": "VS_WINRT_EXTENSIONS",
      "Summary": "Deprecated."
    },
    {
      "Id": "VS_WINRT_REFERENCES",
      "Summary": "Visual Studio project Windows Runtime Metadata references"
    },
    {
      "Id": "WIN32_EXECUTABLE",
      "Summary": "Build an executable with a WinMain entry point on windows."
    },
    {
      "Id": "WINDOWS_EXPORT_ALL_SYMBOLS",
      "Summary": "This property is implemented only for MS-compatible tools on Windows."
    },
    {
      "Id": "XCODE_ATTRIBUTE_<an-attribute>",
      "Summary": "Set Xcode target attributes directly."
    },
    {
      "Id": "XCODE_EMBED_FRAMEWORKS_CODE_SIGN_ON_COPY",
      "Summary": "Tell the ``Xcode`` generator to perform code signing for all the frameworks and libraries that are embedded using the ``XCODE_EMBED_FRAMEWORKS`` property."
    },
    {
      "Id": "XCODE_EMBED_FRAMEWORKS_REMOVE_HEADERS_ON_COPY",
      "Summary": "Tell the ``Xcode`` generator to remove headers from all the frameworks that are embedded using the ``XCODE_EMBED_FRAMEWORKS`` property."
    },
    {
      "Id": "XCODE_EMBED_<type>",
      "Summary": "Tell the ``Xcode`` generator to embed the specified list of items into the target bundle."
    },
    {
      "Id": "XCODE_EMBED_<type>_CODE_SIGN_ON_COPY",
      "Summary": "Boolean property used only by the ``Xcode`` generator."
    },
    {
      "Id": "XCODE_EMBED_<type>_PATH",
      "Summary": "This property is used only by the ``Xcode`` generator."
    },
    {
      "Id": "XCODE_EMBED_<type>_REMOVE_HEADERS_ON_COPY",
      "Summary": "Boolean property used only by the ``Xcode`` generator."
    },
    {
      "Id": "XCODE_EXPLICIT_FILE_TYPE",
      "Summary": "Set the Xcode ``explicitFileType`` attribute on its reference to a target."
    },
    {
      "Id": "XCODE_GENERATE_SCHEME",
      "Summary": "If enabled, the ``Xcode`` generator will generate schema files."
    },
    {
      "Id": "XCODE_LINK_BUILD_PHASE_MODE",
      "Summary": "When using the ``Xcode`` generator, libraries to be linked will be specified in the Xcode project file using either the \"Link Binary With Libraries\" build phase or directly as linker flags."
    },
    {
      "Id": "XCODE_PRODUCT_TYPE",
      "Summary": "Set the Xcode ``productType`` attribute on its reference to a target."
    },
    {
      "Id": "XCODE_SCHEME_ADDRESS_SANITIZER",
      "Summary": "Whether to enable ``Address Sanitizer`` in the Diagnostics section of the generated Xcode scheme."
    },
    {
      "Id": "XCODE_SCHEME_ADDRESS_SANITIZER_USE_AFTER_RETURN",
      "Summary": "Whether to enable ``Detect use of stack after return`` in the Diagnostics section of the generated Xcode scheme."
    },
    {
      "Id": "XCODE_SCHEME_ARGUMENTS",
      "Summary": "Specify command line arguments that should be added to the Arguments section of the generated Xcode scheme."
    },
    {
      "Id": "XCODE_SCHEME_DEBUG_AS_ROOT",
      "Summary": "Whether to debug the target as 'root'."
    },
    {
      "Id": "XCODE_SCHEME_DEBUG_DOCUMENT_VERSIONING",
      "Summary": "Whether to enable ``Allow debugging when using document Versions Browser`` in the Options section of the generated Xcode scheme."
    },
    {
      "Id": "XCODE_SCHEME_DISABLE_MAIN_THREAD_CHECKER",
      "Summary": "Whether to disable the ``Main Thread Checker`` in the Diagnostics section of the generated Xcode scheme."
    },
    {
      "Id": "XCODE_SCHEME_DYNAMIC_LIBRARY_LOADS",
      "Summary": "Whether to enable ``Dynamic Library Loads`` in the Diagnostics section of the generated Xcode scheme."
    },
    {
      "Id": "XCODE_SCHEME_DYNAMIC_LINKER_API_USAGE",
      "Summary": "Whether to enable ``Dynamic Linker API usage`` in the Diagnostics section of the generated Xcode scheme."
    },
    {
      "Id": "XCODE_SCHEME_ENVIRONMENT",
      "Summary": "Specify environment variables that should be added to the Arguments section of the generated Xcode scheme."
    },
    {
      "Id": "XCODE_SCHEME_EXECUTABLE",
      "Summary": "Specify path to executable in the Info section of the generated Xcode scheme."
    },
    {
      "Id": "XCODE_SCHEME_GUARD_MALLOC",
      "Summary": "Whether to enable ``Guard Malloc`` in the Diagnostics section of the generated Xcode scheme."
    },
    {
      "Id": "XCODE_SCHEME_MAIN_THREAD_CHECKER_STOP",
      "Summary": "Whether to enable the ``Main Thread Checker`` option ``Pause on issues`` in the Diagnostics section of the generated Xcode scheme."
    },
    {
      "Id": "XCODE_SCHEME_MALLOC_GUARD_EDGES",
      "Summary": "Whether to enable ``Malloc Guard Edges`` in the Diagnostics section of the generated Xcode scheme."
    },
    {
      "Id": "XCODE_SCHEME_MALLOC_SCRIBBLE",
      "Summary": "Whether to enable ``Malloc Scribble`` in the Diagnostics section of the generated Xcode scheme."
    },
    {
      "Id": "XCODE_SCHEME_MALLOC_STACK",
      "Summary": "Whether to enable ``Malloc Stack`` in the Diagnostics section of the generated Xcode scheme."
    },
    {
      "Id": "XCODE_SCHEME_THREAD_SANITIZER",
      "Summary": "Whether to enable ``Thread Sanitizer`` in the Diagnostics section of the generated Xcode scheme."
    },
    {
      "Id": "XCODE_SCHEME_THREAD_SANITIZER_STOP",
      "Summary": "Whether to enable ``Thread Sanitizer - Pause on issues`` in the Diagnostics section of the generated Xcode scheme."
    },
    {
      "Id": "XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER",
      "Summary": "Whether to enable ``Undefined Behavior Sanitizer`` in the Diagnostics section of the generated Xcode scheme."
    },
    {
      "Id": "XCODE_SCHEME_UNDEFINED_BEHAVIOUR_SANITIZER_STOP",
      "Summary": "Whether to enable ``Undefined Behavior Sanitizer`` option ``Pause on issues`` in the Diagnostics section of the generated Xcode scheme."
    },
    {
      "Id": "XCODE_SCHEME_WORKING_DIRECTORY",
      "Summary": "Specify the ``Working Directory`` of the *Run* and *Profile* actions in the generated Xcode scheme."
    },
    {
      "Id": "XCODE_SCHEME_ZOMBIE_OBJECTS",
      "Summary": "Whether to enable ``Zombie Objects`` in the Diagnostics section of the generated Xcode scheme."
    },
    {
      "Id": "XCTEST",
      "Summary": "This target is a XCTest CFBundle on the Mac."
    }
  ],
  "SourceFileProperties": [
    {
      "Id": "ABSTRACT",
      "Summary": "Is this source file an abstract class."
    },
    {
      "Id": "AUTORCC_OPTIONS",
      "Summary": "Additional options for ``rcc`` when using ``AUTORCC``"
    },
    {
      "Id": "AUTOUIC_OPTIONS",
      "Summary": "Additional options for ``uic`` when using ``AUTOUIC``"
    },
    {
      "Id": "COMPILE_DEFINITIONS",
      "Summary": "Preprocessor definitions for compiling a source file."
    },
    {
      "Id": "COMPILE_FLAGS",
      "Summary": "Additional flags to be added when compiling this source file."
    },
    {
      "Id": "COMPILE_OPTIONS",
      "Summary": "List of additional options to pass to the compiler."
    },
    {
      "Id": "EXTERNAL_OBJECT",
      "Summary": "If set to true then this is an object file."
    },
    {
      "Id": "Fortran_FORMAT",
      "Summary": "Set to ``FIXED`` or ``FREE`` to indicate the Fortran source layout."
    },
    {
      "Id": "Fortran_PREPROCESS",
      "Summary": "Control whether the Fortran source file should be unconditionally preprocessed."
    },
    {
      "Id": "GENERATED",
      "Summary": "Is this source file generated as part of the build or CMake process."
    },
    {
      "Id": "HEADER_FILE_ONLY",
      "Summary": "Is this source file only a header file."
    },
    {
      "Id": "INCLUDE_DIRECTORIES",
      "Summary": "List of preprocessor include file search directories."
    },
    {
      "Id": "KEEP_EXTENSION",
      "Summary": "Make the output file have the same extension as the source file."
    },
    {
      "Id": "LABELS",
      "Summary": "Specify a list of text labels associated with a source file."
    },
    {
      "Id": "LANGUAGE",
      "Summary": "Specify the programming language in which a source file is written."
    },
    {
      "Id": "LOCATION",
      "Summary": "The full path to a source file."
    },
    {
      "Id": "MACOSX_PACKAGE_LOCATION",
      "Summary": "Place a source file inside a Application Bundle (``MACOSX_BUNDLE``), Core Foundation Bundle (``BUNDLE``), or Framework Bundle (``FRAMEWORK``)."
    },
    {
      "Id": "OBJECT_DEPENDS",
      "Summary": "Additional files on which a compiled object file depends."
    },
    {
      "Id": "OBJECT_OUTPUTS",
      "Summary": "Additional outputs for a ``Ninja`` or :`Makefile Generators` rule."
    },
    {
      "Id": "SKIP_AUTOGEN",
      "Summary": "Exclude the source file from ``AUTOMOC``, ``AUTOUIC`` and ``AUTORCC`` processing (for Qt projects)."
    },
    {
      "Id": "SKIP_AUTOMOC",
      "Summary": "Exclude the source file from ``AUTOMOC`` processing (for Qt projects)."
    },
    {
      "Id": "SKIP_AUTORCC",
      "Summary": "Exclude the source file from ``AUTORCC`` processing (for Qt projects)."
    },
    {
      "Id": "SKIP_AUTOUIC",
      "Summary": "Exclude the source file from ``AUTOUIC`` processing (for Qt projects)."
    },
    {
      "Id": "SKIP_PRECOMPILE_HEADERS",
      "Summary": "Is this source file skipped by ``PRECOMPILE_HEADERS`` feature."
    },
    {
      "Id": "SKIP_UNITY_BUILD_INCLUSION",
      "Summary": "Setting this property to true ensures the source file will be skipped by unity builds when its associated target has its ``UNITY_BUILD`` property set to true."
    },
    {
      "Id": "Swift_DEPENDENCIES_FILE",
      "Summary": "This property sets the path for the Swift dependency file (swiftdeps) for the source."
    },
    {
      "Id": "Swift_DIAGNOSTICS_FILE",
      "Summary": "This property controls where the Swift diagnostics are serialized."
    },
    {
      "Id": "SYMBOLIC",
      "Summary": "Is this just a name for a rule."
    },
    {
      "Id": "UNITY_GROUP",
      "Summary": "This property controls which *bucket* the source will be part of when the ``UNITY_BUILD_MODE`` is set to ``GROUP``."
    },
    {
      "Id": "VS_COPY_TO_OUT_DIR",
      "Summary": "Sets the ``<CopyToOutputDirectory>`` tag for a source file in a Visual Studio project file."
    },
    {
      "Id": "VS_CSHARP_<tagname>",
      "Summary": "Visual Studio and CSharp source-file-specific configuration."
    },
    {
      "Id": "VS_DEPLOYMENT_CONTENT",
      "Summary": "Mark a source file as content for deployment with a Windows Phone or Windows Store application when built with a ``Visual Studio generators``."
    },
    {
      "Id": "VS_DEPLOYMENT_LOCATION",
      "Summary": "Specifies the deployment location for a content source file with a Windows Phone or Windows Store application when built with a ``Visual Studio generators``."
    },
    {
      "Id": "VS_INCLUDE_IN_VSIX",
      "Summary": "Boolean property to specify if the file should be included within a VSIX (Visual Studio Integration Extension) extension package."
    },
    {
      "Id": "VS_RESOURCE_GENERATOR",
      "Summary": "This property allows to specify the resource generator to be used on this file."
    },
    {
      "Id": "VS_SETTINGS",
      "Summary": "Set any item metadata on a file."
    },
    {
      "Id": "VS_SHADER_DISABLE_OPTIMIZATIONS",
      "Summary": "Disable compiler optimizations for an ``.hlsl`` source file."
    },
    {
      "Id": "VS_SHADER_ENABLE_DEBUG",
      "Summary": "Enable debugging information for an ``.hlsl`` source file."
    },
    {
      "Id": "VS_SHADER_ENTRYPOINT",
      "Summary": "Specifies the name of the entry point for the shader of a ``.hlsl`` source file."
    },
    {
      "Id": "VS_SHADER_FLAGS",
      "Summary": "Set additional Visual Studio shader flags of a ``.hlsl`` source file."
    },
    {
      "Id": "VS_SHADER_MODEL",
      "Summary": "Specifies the shader model of a ``.hlsl`` source file."
    },
    {
      "Id": "VS_SHADER_OBJECT_FILE_NAME",
      "Summary": "Specifies a file name for the compiled shader object file for an ``.hlsl`` source file."
    },
    {
      "Id": "VS_SHADER_OUTPUT_HEADER_FILE",
      "Summary": "Set filename for output header file containing object code of a ``.hlsl`` source file."
    },
    {
      "Id": "VS_SHADER_TYPE",
      "Summary": "Set the Visual Studio shader type of a ``.hlsl`` source file."
    },
    {
      "Id": "VS_SHADER_VARIABLE_NAME",
      "Summary": "Set name of variable in header file containing object code of a ``.hlsl`` source file."
    },
    {
      "Id": "VS_XAML_TYPE",
      "Summary": "Mark a Extensible Application Markup Language (XAML) source file as a different type than the default ``Page``."
    },
    {
      "Id": "WRAP_EXCLUDE",
      "Summary": "Exclude this source file from any code wrapping techniques."
    },
    {
      "Id": "XCODE_EXPLICIT_FILE_TYPE",
      "Summary": "Set the ``Xcode`` ``explicitFileType`` attribute on its reference to a source file."
    },
    {
      "Id": "XCODE_FILE_ATTRIBUTES",
      "Summary": "Add values to the ``Xcode`` ``ATTRIBUTES`` setting on its reference to a source file."
    },
    {
      "Id": "XCODE_LAST_KNOWN_FILE_TYPE",
      "Summary": "Set the ``Xcode`` ``lastKnownFileType`` attribute on its reference to a source file."
    }
  ],
  "CacheEntryProperties": [
    {
      "Id": "ADVANCED",
      "Summary": "True if entry should be hidden by default in GUIs."
    },
    {
      "Id": "HELPSTRING",
      "Summary": "Help associated with entry in GUIs."
    },
    {
      "Id": "MODIFIED",
      "Summary": "Internal management property."
    },
    {
      "Id": "STRINGS",
      "Summary": "Enumerate possible ``STRING`` entry values for GUI selection."
    },
    {
      "Id": "TYPE",
      "Summary": "Widget type for entry in GUIs."
    },
    {
      "Id": "VALUE",
      "Summary": "Value of a cache entry."
    }
  ],
  "InstalledFileProperties": [],
  "GeneratorExpressions": [
    {
      "Id": "BOOL",
      "Summary": "Converts ``string`` to ``0`` or ``1``."
    },
    {
      "Id": "AND",
      "Summary": "where ``conditions`` is a comma-separated list of boolean expressions."
    },
    {
      "Id": "OR",
      "Summary": "where ``conditions`` is a comma-separated list of boolean expressions."
    },
    {
      "Id": "NOT",
      "Summary": "``0`` if ``condition`` is ``1``, else ``1``."
    },
    {
      "Id": "STREQUAL",
      "Summary": "``1`` if ``string1`` and ``string2`` are equal, else ``0``."
    },
    {
      "Id": "EQUAL",
      "Summary": "``1`` if ``value1`` and ``value2`` are numerically equal, else ``0``."
    },
    {
      "Id": "IN_LIST",
      "Summary": "``1`` if ``string`` is member of the semicolon-separated ``list``, else ``0``."
    },
    {
      "Id": "VERSION_LESS",
      "Summary": "``1`` if ``v1`` is a version less than ``v2``, else ``0``."
    },
    {
      "Id": "VERSION_GREATER",
      "Summary": "``1`` if ``v1`` is a version greater than ``v2``, else ``0``."
    },
    {
      "Id": "VERSION_EQUAL",
      "Summary": "``1`` if ``v1`` is the same version as ``v2``, else ``0``."
    },
    {
      "Id": "VERSION_LESS_EQUAL",
      "Summary": "``1`` if ``v1`` is a version less than or equal to ``v2``, else ``0``."
    },
    {
      "Id": "VERSION_GREATER_EQUAL",
      "Summary": "``1`` if ``v1`` is a version greater than or equal to ``v2``, else ``0``."
    },
    {
      "Id": "TARGET_EXISTS",
      "Summary": "``1`` if ``target`` exists, else ``0``."
    },
    {
      "Id": "CONFIG",
      "Summary": "``1`` if config is any one of the entries in comma-separated list ``cfgs``, else ``0``."
    },
    {
      "Id": "PLATFORM_ID",
      "Summary": "where ``platform_ids`` is a comma-separated list."
    },
    {
      "Id": "C_COMPILER_ID",
      "Summary": "where ``compiler_ids`` is a comma-separated list."
    },
    {
      "Id": "CXX_COMPILER_ID",
      "Summary": "where ``compiler_ids`` is a comma-separated list."
    },
    {
      "Id": "CUDA_COMPILER_ID",
      "Summary": "where ``compiler_ids`` is a comma-separated list."
    },
    {
      "Id": "OBJC_COMPILER_ID",
      "Summary": "where ``compiler_ids`` is a comma-separated list."
    },
    {
      "Id": "OBJCXX_COMPILER_ID",
      "Summary": "where ``compiler_ids`` is a comma-separated list."
    },
    {
      "Id": "Fortran_COMPILER_ID",
      "Summary": "where ``compiler_ids`` is a comma-separated list."
    },
    {
      "Id": "HIP_COMPILER_ID",
      "Summary": "where ``compiler_ids`` is a comma-separated list."
    },
    {
      "Id": "ISPC_COMPILER_ID",
      "Summary": "where ``compiler_ids`` is a comma-separated list."
    },
    {
      "Id": "C_COMPILER_VERSION",
      "Summary": "``1`` if the version of the C compiler matches ``version``, otherwise ``0``."
    },
    {
      "Id": "CXX_COMPILER_VERSION",
      "Summary": "``1`` if the version of the CXX compiler matches ``version``, otherwise ``0``."
    },
    {
      "Id": "CUDA_COMPILER_VERSION",
      "Summary": "``1`` if the version of the CXX compiler matches ``version``, otherwise ``0``."
    },
    {
      "Id": "OBJC_COMPILER_VERSION",
      "Summary": "``1`` if the version of the OBJC compiler matches ``version``, otherwise ``0``."
    },
    {
      "Id": "OBJCXX_COMPILER_VERSION",
      "Summary": "``1`` if the version of the OBJCXX compiler matches ``version``, otherwise ``0``."
    },
    {
      "Id": "Fortran_COMPILER_VERSION",
      "Summary": "``1`` if the version of the Fortran compiler matches ``version``, otherwise ``0``."
    },
    {
      "Id": "HIP_COMPILER_VERSION",
      "Summary": "``1`` if the version of the HIP compiler matches ``version``, otherwise ``0``."
    },
    {
      "Id": "ISPC_COMPILER_VERSION",
      "Summary": "``1`` if the version of the ISPC compiler matches ``version``, otherwise ``0``."
    },
    {
      "Id": "TARGET_POLICY",
      "Summary": "``1`` if the ``policy`` was NEW when the 'head' target was created, else ``0``."
    },
    {
      "Id": "COMPILE_FEATURES",
      "Summary": "where ``features`` is a comma-spearated list."
    },
    {
      "Id": "COMPILE_LANG_AND_ID",
      "Summary": "``1`` when the language used for compilation unit matches ``language`` and the CMake's compiler id of the language compiler matches any one of the entries in ``compiler_ids``, otherwise ``0``."
    },
    {
      "Id": "COMPILE_LANGUAGE",
      "Summary": "``1`` when the language used for compilation unit matches any of the entries in ``languages``, otherwise ``0``."
    },
    {
      "Id": "LINK_LANG_AND_ID",
      "Summary": "``1`` when the language used for link step matches ``language`` and the CMake's compiler id of the language linker matches any one of the entries in ``compiler_ids``, otherwise ``0``."
    },
    {
      "Id": "LINK_LANGUAGE",
      "Summary": "``1`` when the language used for link step matches any of the entries in ``languages``, otherwise ``0``."
    },
    {
      "Id": "DEVICE_LINK",
      "Summary": "Returns the list if it is the device link step, an empty list otherwise."
    },
    {
      "Id": "HOST_LINK",
      "Summary": "Returns the list if it is the normal link step, an empty list otherwise."
    },
    {
      "Id": "COMMA",
      "Summary": "A literal ``,``."
    },
    {
      "Id": "SEMICOLON",
      "Summary": "A literal ``;``."
    },
    {
      "Id": "IF",
      "Summary": "Evaluates to ``true_string`` if ``condition`` is ``1``."
    },
    {
      "Id": "JOIN",
      "Summary": "Joins the list with the content of ``string``."
    },
    {
      "Id": "REMOVE_DUPLICATES",
      "Summary": "Removes duplicated items in the given ``list``."
    },
    {
      "Id": "FILTER",
      "Summary": "Includes or removes items from ``list`` that match the regular expression ``regex``."
    },
    {
      "Id": "LOWER_CASE",
      "Summary": "Content of ``string`` converted to lower case."
    },
    {
      "Id": "UPPER_CASE",
      "Summary": "Content of ``string`` converted to upper case."
    },
    {
      "Id": "GENEX_EVAL",
      "Summary": "Content of ``expr`` evaluated as a generator expression in the current context."
    },
    {
      "Id": "TARGET_GENEX_EVAL",
      "Summary": "Content of ``expr`` evaluated as a generator expression in the context of ``tgt`` target."
    },
    {
      "Id": "CONFIGURATION",
      "Summary": "Configuration name."
    },
    {
      "Id": "TARGET_NAME_IF_EXISTS",
      "Summary": "The target name ``tgt`` if the target exists, an empty string otherwise."
    },
    {
      "Id": "TARGET_FILE",
      "Summary": "Full path to the ``tgt`` binary file."
    },
    {
      "Id": "TARGET_FILE_BASE_NAME",
      "Summary": "Base name of ``tgt``, i."
    },
    {
      "Id": "TARGET_FILE_PREFIX",
      "Summary": "Prefix of the ``tgt`` filename (such as ``lib``)."
    },
    {
      "Id": "TARGET_FILE_SUFFIX",
      "Summary": "Suffix of the ``tgt`` filename (extension such as ``.so`` or ``.exe``)."
    },
    {
      "Id": "TARGET_FILE_NAME",
      "Summary": "The ``tgt`` filename."
    },
    {
      "Id": "TARGET_FILE_DIR",
      "Summary": "Directory of the ``tgt`` binary file."
    },
    {
      "Id": "TARGET_LINKER_FILE",
      "Summary": "File used when linking to the ``tgt`` target."
    },
    {
      "Id": "TARGET_LINKER_FILE_BASE_NAME",
      "Summary": "Base name of file used to link the target ``tgt``, i."
    },
    {
      "Id": "TARGET_LINKER_FILE_PREFIX",
      "Summary": "Prefix of file used to link target ``tgt``."
    },
    {
      "Id": "TARGET_LINKER_FILE_SUFFIX",
      "Summary": "Suffix of file used to link where ``tgt`` is the name of a target."
    },
    {
      "Id": "TARGET_LINKER_FILE_NAME",
      "Summary": "Name of file used to link target ``tgt``."
    },
    {
      "Id": "TARGET_LINKER_FILE_DIR",
      "Summary": "Directory of file used to link target ``tgt``."
    },
    {
      "Id": "TARGET_SONAME_FILE",
      "Summary": "File with soname (``.so.3``) where ``tgt`` is the name of a target."
    },
    {
      "Id": "TARGET_SONAME_FILE_NAME",
      "Summary": "Name of file with soname (``.so.3``)."
    },
    {
      "Id": "TARGET_SONAME_FILE_DIR",
      "Summary": "Directory of with soname (``.so.3``)."
    },
    {
      "Id": "TARGET_PDB_FILE",
      "Summary": "Full path to the linker generated program database file (.pdb) where ``tgt`` is the name of a target."
    },
    {
      "Id": "TARGET_PDB_FILE_BASE_NAME",
      "Summary": "Base name of the linker generated program database file (.pdb) where ``tgt`` is the name of a target."
    },
    {
      "Id": "TARGET_PDB_FILE_NAME",
      "Summary": "Name of the linker generated program database file (.pdb)."
    },
    {
      "Id": "TARGET_PDB_FILE_DIR",
      "Summary": "Directory of the linker generated program database file (.pdb)."
    },
    {
      "Id": "TARGET_BUNDLE_DIR",
      "Summary": "Full path to the bundle directory (``my.app``, ``my.framework``, or ``my.bundle``) where ``tgt`` is the name of a target."
    },
    {
      "Id": "TARGET_BUNDLE_CONTENT_DIR",
      "Summary": "Full path to the bundle content directory where ``tgt`` is the name of a target."
    },
    {
      "Id": "TARGET_PROPERTY",
      "Summary": "Value of the property ``prop`` on the target ``tgt``."
    },
    {
      "Id": "TARGET_RUNTIME_DLLS",
      "Summary": "List of DLLs that the target depends on at runtime."
    },
    {
      "Id": "INSTALL_PREFIX",
      "Summary": "Content of the install prefix when the target is exported via ``install(EXPORT)``, or when evaluated in the ``INSTALL_NAME_DIR`` property or the ``INSTALL_NAME_DIR`` argument of ``install(RUNTIME_DEPENDENCY_SET)``, and empty otherwise."
    },
    {
      "Id": "TARGET_NAME",
      "Summary": "Marks ``...`` as being the name of a target."
    },
    {
      "Id": "LINK_ONLY",
      "Summary": "Content of ``...`` except when evaluated in a link interface while propagating :`Target Usage Requirements`, in which case it is the empty string."
    },
    {
      "Id": "INSTALL_INTERFACE",
      "Summary": "Content of ``...`` when the property is exported using ``install(EXPORT)``, and empty otherwise."
    },
    {
      "Id": "BUILD_INTERFACE",
      "Summary": "Content of ``...`` when the property is exported using ``export()``, or when the target is used by another target in the same buildsystem."
    },
    {
      "Id": "MAKE_C_IDENTIFIER",
      "Summary": "Content of ``...`` converted to a C identifier."
    },
    {
      "Id": "TARGET_OBJECTS",
      "Summary": "List of objects resulting from build of ``objLib``."
    },
    {
      "Id": "SHELL_PATH",
      "Summary": "Content of ``...`` converted to shell path style."
    },
    {
      "Id": "OUTPUT_CONFIG",
      "Summary": "Only valid in ``add_custom_command()`` and ``add_custom_target()`` as the outer-most generator expression in an argument."
    },
    {
      "Id": "COMMAND_CONFIG",
      "Summary": "Only valid in ``add_custom_command()`` and ``add_custom_target()`` as the outer-most generator expression in an argument."
    }
  ]
}